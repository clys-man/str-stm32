
13_Usando_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005c3c  08005c3c  00006c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d44  08005d44  00006d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  08005da8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  08005da8  00007c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c57  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e3  00000000  00000000  0001ece7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000221d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8a  00000000  00000000  000235d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ac4  00000000  00000000  00024562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016af3  00000000  00000000  00028026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000981fe  00000000  00000000  0003eb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  000d6d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000dc648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c24 	.word	0x08005c24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005c24 	.word	0x08005c24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_GPIO_Init+0xd0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <MX_GPIO_Init+0xd0>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xd0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005fc:	f000 fdb2 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000606:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_GPIO_Init+0xd8>)
 8000618:	f000 fc20 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <MX_GPIO_Init+0xd4>)
 8000634:	f000 fc12 	bl	8000e5c <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000
 8000648:	40020800 	.word	0x40020800

0800064c <main>:


QueueHandle_t xQueue;

int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8


  HAL_Init();
 8000652:	f000 fadf 	bl	8000c14 <HAL_Init>
  SystemClock_Config();
 8000656:	f000 f8b1 	bl	80007bc <SystemClock_Config>
  MX_GPIO_Init();
 800065a:	f7ff ff89 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 fa3d 	bl	8000adc <MX_USART2_UART_Init>

  xQueue = xQueueCreate(5,sizeof(int32_t));
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	2005      	movs	r0, #5
 8000668:	f002 fabf 	bl	8002bea <xQueueGenericCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <main+0x58>)
 8000670:	6013      	str	r3, [r2, #0]

  /* Função que cria uma tarefa para controle do LED */
  xTaskCreate(ReceiverTask,"Tarefa_Receptor",128,NULL,osPriorityNormal,NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2318      	movs	r3, #24
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	490a      	ldr	r1, [pc, #40]	@ (80006a8 <main+0x5c>)
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <main+0x60>)
 8000682:	f002 ff61 	bl	8003548 <xTaskCreate>

  xTaskCreate(SenderTask,"Tarefa_Transmissor",128,NULL,osPriorityNormal,NULL);
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2318      	movs	r3, #24
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	4907      	ldr	r1, [pc, #28]	@ (80006b0 <main+0x64>)
 8000694:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <main+0x68>)
 8000696:	f002 ff57 	bl	8003548 <xTaskCreate>


  vTaskStartScheduler(); /* Inicia o escalonador de tarefas - Scheduler */
 800069a:	f003 f8e9 	bl	8003870 <vTaskStartScheduler>



  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <main+0x52>
 80006a2:	bf00      	nop
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	08005c3c 	.word	0x08005c3c
 80006ac:	0800073d 	.word	0x0800073d
 80006b0:	08005c4c 	.word	0x08005c4c
 80006b4:	080006b9 	.word	0x080006b9

080006b8 <SenderTask>:



/* Tarefa de prioridade normal */
void SenderTask(void * pvParameters)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b092      	sub	sp, #72	@ 0x48
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	int value_to_send [] = {1,2,3,4,5};
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <SenderTask+0x74>)
 80006c2:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	682b      	ldr	r3, [r5, #0]
 80006ce:	6023      	str	r3, [r4, #0]
    while (1)
    {
		for(int i = 0; i<QUEUE_LENGTH; i++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80006d4:	e022      	b.n	800071c <SenderTask+0x64>
			 if(xQueueSend(xQueue,&value_to_send[i], portMAX_DELAY) == pdPASS){
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <SenderTask+0x78>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	18d1      	adds	r1, r2, r3
 80006e4:	2300      	movs	r3, #0
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	f002 fadd 	bl	8002ca8 <xQueueGenericSend>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d010      	beq.n	8000716 <SenderTask+0x5e>
			 }else{
				 uint8_t txt1[]="Erro: data nao pode ser enviado\n";
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <SenderTask+0x7c>)
 80006f6:	f107 040c 	add.w	r4, r7, #12
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	682b      	ldr	r3, [r5, #0]
 8000706:	7023      	strb	r3, [r4, #0]
				 HAL_UART_Transmit(&huart2, txt1, sizeof(txt1),100);
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	2221      	movs	r2, #33	@ 0x21
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SenderTask+0x80>)
 8000712:	f001 fccf 	bl	80020b4 <HAL_UART_Transmit>
		for(int i = 0; i<QUEUE_LENGTH; i++){
 8000716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000718:	3301      	adds	r3, #1
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
 800071c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800071e:	2b04      	cmp	r3, #4
 8000720:	ddd9      	ble.n	80006d6 <SenderTask+0x1e>
			 }
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000726:	f003 f86d 	bl	8003804 <vTaskDelay>
		for(int i = 0; i<QUEUE_LENGTH; i++){
 800072a:	e7d1      	b.n	80006d0 <SenderTask+0x18>
 800072c:	08005c60 	.word	0x08005c60
 8000730:	2000007c 	.word	0x2000007c
 8000734:	08005c74 	.word	0x08005c74
 8000738:	200000cc 	.word	0x200000cc

0800073c <ReceiverTask>:
    }
}

/* Tarefa de prioridade alta */
void ReceiverTask(void * pvParameters)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

	int value_received;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 8000744:	2364      	movs	r3, #100	@ 0x64
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
	BaseType_t qStatus;
	uint8_t txt1[28];

    while (1)
    {
        qStatus = xQueueReceive(xQueue, &value_received, wait_time);
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <ReceiverTask+0x70>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fc48 	bl	8002fe8 <xQueueReceive>
 8000758:	64b8      	str	r0, [r7, #72]	@ 0x48
        if(qStatus == pdPASS)
 800075a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10e      	bne.n	800077e <ReceiverTask+0x42>
        {
        	sprintf((char*)txt1, "o valor recebido foi: %d\n", value_received);
 8000760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000766:	4912      	ldr	r1, [pc, #72]	@ (80007b0 <ReceiverTask+0x74>)
 8000768:	4618      	mov	r0, r3
 800076a:	f004 fd65 	bl	8005238 <siprintf>
        	HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 800076e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000772:	2364      	movs	r3, #100	@ 0x64
 8000774:	221c      	movs	r2, #28
 8000776:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <ReceiverTask+0x78>)
 8000778:	f001 fc9c 	bl	80020b4 <HAL_UART_Transmit>
 800077c:	e010      	b.n	80007a0 <ReceiverTask+0x64>
        }
        else
        {
        	uint8_t txt1[]="Erro, nao foi possivel receber\n";
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <ReceiverTask+0x7c>)
 8000780:	f107 0408 	add.w	r4, r7, #8
 8000784:	461d      	mov	r5, r3
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800078e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	2220      	movs	r2, #32
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <ReceiverTask+0x78>)
 800079c:	f001 fc8a 	bl	80020b4 <HAL_UART_Transmit>
        }
        vTaskDelay(pdMS_TO_TICKS(500));
 80007a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a4:	f003 f82e 	bl	8003804 <vTaskDelay>
        qStatus = xQueueReceive(xQueue, &value_received, wait_time);
 80007a8:	e7ce      	b.n	8000748 <ReceiverTask+0xc>
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	08005c98 	.word	0x08005c98
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	08005cb4 	.word	0x08005cb4

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	@ 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	@ 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fd54 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	4a28      	ldr	r2, [pc, #160]	@ (800088c <SystemClock_Config+0xd0>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <SystemClock_Config+0xd0>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <SystemClock_Config+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <SystemClock_Config+0xd4>)
 800080a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <SystemClock_Config+0xd4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000830:	2310      	movs	r3, #16
 8000832:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000834:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800083a:	2304      	movs	r3, #4
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083e:	2307      	movs	r3, #7
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fca6 	bl	8001198 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000852:	f000 f831 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ff08 	bl	8001688 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800087e:	f000 f81b 	bl	80008b8 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	@ 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f9d7 	bl	8000c58 <HAL_IncTick>
  }

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010000 	.word	0x40010000

080008b8 <Error_Handler>:


void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop

  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa7d 	bl	8000e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <HAL_InitTick+0xd0>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000934:	4a2d      	ldr	r2, [pc, #180]	@ (80009ec <HAL_InitTick+0xd0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6453      	str	r3, [r2, #68]	@ 0x44
 800093c:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <HAL_InitTick+0xd0>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 020c 	add.w	r2, r7, #12
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f8b8 	bl	8001ac8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000958:	f001 f8a2 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 800095c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000960:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <HAL_InitTick+0xd4>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9b      	lsrs	r3, r3, #18
 8000968:	3b01      	subs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <HAL_InitTick+0xd8>)
 800096e:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <HAL_InitTick+0xdc>)
 8000970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_InitTick+0xd8>)
 8000974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097a:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <HAL_InitTick+0xd8>)
 800097c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_InitTick+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_InitTick+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <HAL_InitTick+0xd8>)
 8000994:	f001 f8ca 	bl	8001b2c <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d11b      	bne.n	80009de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <HAL_InitTick+0xd8>)
 80009a8:	f001 f91a 	bl	8001be0 <HAL_TIM_Base_Start_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d111      	bne.n	80009de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ba:	2019      	movs	r0, #25
 80009bc:	f000 fa40 	bl	8000e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d808      	bhi.n	80009d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 fa1c 	bl	8000e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_InitTick+0xe0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e002      	b.n	80009de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20000080 	.word	0x20000080
 80009f8:	40010000 	.word	0x40010000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a3e:	f001 f931 	bl	8001ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000080 	.word	0x20000080

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f004 fc5a 	bl	8005334 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20018000 	.word	0x20018000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	200000c8 	.word	0x200000c8
 8000ab4:	20004c48 	.word	0x20004c48

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <MX_USART2_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f001 fa7e 	bl	8002014 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f7ff fecb 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000cc 	.word	0x200000cc
 8000b2c:	40004400 	.word	0x40004400

08000b30 <HAL_UART_MspInit>:
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba6:	f000 f959 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc4:	f7ff ff78 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f004 fba7 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fd2b 	bl	800064c <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c04:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8000c08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c0c:	20004c44 	.word	0x20004c44

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f8d8 	bl	8000df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f7ff fe6a 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe3c 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000114 	.word	0x20000114

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000114 	.word	0x20000114

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	@ (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff4c 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff61 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb1 	bl	8000d8c <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff80 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff54 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e159      	b.n	800112c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8148 	bne.w	8001126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d005      	beq.n	8000eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a2 	beq.w	8001126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b57      	ldr	r3, [pc, #348]	@ (8001144 <HAL_GPIO_Init+0x2e8>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a56      	ldr	r2, [pc, #344]	@ (8001144 <HAL_GPIO_Init+0x2e8>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffe:	4a52      	ldr	r2, [pc, #328]	@ (8001148 <HAL_GPIO_Init+0x2ec>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a49      	ldr	r2, [pc, #292]	@ (800114c <HAL_GPIO_Init+0x2f0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x202>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a48      	ldr	r2, [pc, #288]	@ (8001150 <HAL_GPIO_Init+0x2f4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x1fe>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <HAL_GPIO_Init+0x2f8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x1fa>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a46      	ldr	r2, [pc, #280]	@ (8001158 <HAL_GPIO_Init+0x2fc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x1f6>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a45      	ldr	r2, [pc, #276]	@ (800115c <HAL_GPIO_Init+0x300>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x1f2>
 800104a:	2304      	movs	r3, #4
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800104e:	2307      	movs	r3, #7
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x204>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x204>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	@ (8001148 <HAL_GPIO_Init+0x2ec>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <HAL_GPIO_Init+0x304>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a24      	ldr	r2, [pc, #144]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_GPIO_Init+0x304>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a0f      	ldr	r2, [pc, #60]	@ (8001160 <HAL_GPIO_Init+0x304>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f aea2 	bls.w	8000e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e267      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d075      	beq.n	80012a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011b6:	4b88      	ldr	r3, [pc, #544]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b85      	ldr	r3, [pc, #532]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4b82      	ldr	r3, [pc, #520]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b7e      	ldr	r3, [pc, #504]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x108>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d157      	bne.n	80012a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e242      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x74>
 80011fe:	4b76      	ldr	r3, [pc, #472]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a75      	ldr	r2, [pc, #468]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x98>
 8001216:	4b70      	ldr	r3, [pc, #448]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6f      	ldr	r2, [pc, #444]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6d      	ldr	r3, [pc, #436]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6c      	ldr	r2, [pc, #432]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 8001230:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a68      	ldr	r2, [pc, #416]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b66      	ldr	r3, [pc, #408]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a65      	ldr	r2, [pc, #404]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fd16 	bl	8000c80 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fd12 	bl	8000c80 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e207      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5b      	ldr	r3, [pc, #364]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xc0>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fd02 	bl	8000c80 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcfe 	bl	8000c80 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	@ 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1f3      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b51      	ldr	r3, [pc, #324]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0xe8>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ae:	4b4a      	ldr	r3, [pc, #296]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b41      	ldr	r3, [pc, #260]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c7      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4937      	ldr	r1, [pc, #220]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <HAL_RCC_OscConfig+0x244>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fcb7 	bl	8000c80 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fcb3 	bl	8000c80 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1a8      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4925      	ldr	r1, [pc, #148]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_RCC_OscConfig+0x244>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fc96 	bl	8000c80 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc92 	bl	8000c80 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e187      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d036      	beq.n	80013f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_RCC_OscConfig+0x248>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fc76 	bl	8000c80 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc72 	bl	8000c80 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e167      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x200>
 80013b6:	e01b      	b.n	80013f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_RCC_OscConfig+0x248>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fc5f 	bl	8000c80 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	e00e      	b.n	80013e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc5b 	bl	8000c80 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d907      	bls.n	80013e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e150      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	42470000 	.word	0x42470000
 80013e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	4b88      	ldr	r3, [pc, #544]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1ea      	bne.n	80013c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8097 	beq.w	800152c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b81      	ldr	r3, [pc, #516]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b7d      	ldr	r3, [pc, #500]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a7c      	ldr	r2, [pc, #496]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b7a      	ldr	r3, [pc, #488]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b77      	ldr	r3, [pc, #476]	@ (800160c <HAL_RCC_OscConfig+0x474>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b74      	ldr	r3, [pc, #464]	@ (800160c <HAL_RCC_OscConfig+0x474>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a73      	ldr	r2, [pc, #460]	@ (800160c <HAL_RCC_OscConfig+0x474>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fc1b 	bl	8000c80 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fc17 	bl	8000c80 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e10c      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b6a      	ldr	r3, [pc, #424]	@ (800160c <HAL_RCC_OscConfig+0x474>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x2ea>
 8001474:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001478:	4a63      	ldr	r2, [pc, #396]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001480:	e01c      	b.n	80014bc <HAL_RCC_OscConfig+0x324>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x30c>
 800148a:	4b5f      	ldr	r3, [pc, #380]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148e:	4a5e      	ldr	r2, [pc, #376]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6713      	str	r3, [r2, #112]	@ 0x70
 8001496:	4b5c      	ldr	r3, [pc, #368]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149a:	4a5b      	ldr	r2, [pc, #364]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0x324>
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a8:	4a57      	ldr	r2, [pc, #348]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b0:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b4:	4a54      	ldr	r2, [pc, #336]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80014b6:	f023 0304 	bic.w	r3, r3, #4
 80014ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d015      	beq.n	80014f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fbdc 	bl	8000c80 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff fbd8 	bl	8000c80 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0cb      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	4b49      	ldr	r3, [pc, #292]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0ee      	beq.n	80014cc <HAL_RCC_OscConfig+0x334>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fbc6 	bl	8000c80 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff fbc2 	bl	8000c80 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e0b5      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150e:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ee      	bne.n	80014f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a1 	beq.w	8001678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b08      	cmp	r3, #8
 8001540:	d05c      	beq.n	80015fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d141      	bne.n	80015ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <HAL_RCC_OscConfig+0x478>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fb96 	bl	8000c80 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb92 	bl	8000c80 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e087      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	3b01      	subs	r3, #1
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	491b      	ldr	r1, [pc, #108]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x478>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb6b 	bl	8000c80 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fb67 	bl	8000c80 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e05c      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x416>
 80015cc:	e054      	b.n	8001678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_RCC_OscConfig+0x478>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb54 	bl	8000c80 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fb50 	bl	8000c80 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e045      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_RCC_OscConfig+0x470>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x444>
 80015fa:	e03d      	b.n	8001678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e038      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000
 8001610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_RCC_OscConfig+0x4ec>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d028      	beq.n	8001674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d121      	bne.n	8001674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d11a      	bne.n	8001674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001644:	4013      	ands	r3, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800164a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800164c:	4293      	cmp	r3, r2
 800164e:	d111      	bne.n	8001674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	3b01      	subs	r3, #1
 800165e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d107      	bne.n	8001674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0cc      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d90c      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a58      	ldr	r2, [pc, #352]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a52      	ldr	r2, [pc, #328]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d044      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d119      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d003      	beq.n	8001746 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001742:	2b03      	cmp	r3, #3
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e067      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001766:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f023 0203 	bic.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4934      	ldr	r1, [pc, #208]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001778:	f7ff fa82 	bl	8000c80 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	e00a      	b.n	8001796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff fa7e 	bl	8000c80 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e04f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 020c 	and.w	r2, r3, #12
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1eb      	bne.n	8001780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d20c      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f874 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00
 8001844:	40023800 	.word	0x40023800
 8001848:	08005cec 	.word	0x08005cec
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001858:	b094      	sub	sp, #80	@ 0x50
 800185a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186c:	4b79      	ldr	r3, [pc, #484]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d00d      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x40>
 8001878:	2b08      	cmp	r3, #8
 800187a:	f200 80e1 	bhi.w	8001a40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x34>
 8001882:	2b04      	cmp	r3, #4
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x3a>
 8001886:	e0db      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x204>)
 800188a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800188c:	e0db      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188e:	4b73      	ldr	r3, [pc, #460]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001892:	e0d8      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001894:	4b6f      	ldr	r3, [pc, #444]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800189c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	2200      	movs	r2, #0
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018c6:	4622      	mov	r2, r4
 80018c8:	462b      	mov	r3, r5
 80018ca:	f04f 0000 	mov.w	r0, #0
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	0159      	lsls	r1, r3, #5
 80018d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d8:	0150      	lsls	r0, r2, #5
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4621      	mov	r1, r4
 80018e0:	1a51      	subs	r1, r2, r1
 80018e2:	6139      	str	r1, [r7, #16]
 80018e4:	4629      	mov	r1, r5
 80018e6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018f8:	4659      	mov	r1, fp
 80018fa:	018b      	lsls	r3, r1, #6
 80018fc:	4651      	mov	r1, sl
 80018fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001902:	4651      	mov	r1, sl
 8001904:	018a      	lsls	r2, r1, #6
 8001906:	4651      	mov	r1, sl
 8001908:	ebb2 0801 	subs.w	r8, r2, r1
 800190c:	4659      	mov	r1, fp
 800190e:	eb63 0901 	sbc.w	r9, r3, r1
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800191e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001926:	4690      	mov	r8, r2
 8001928:	4699      	mov	r9, r3
 800192a:	4623      	mov	r3, r4
 800192c:	eb18 0303 	adds.w	r3, r8, r3
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	462b      	mov	r3, r5
 8001934:	eb49 0303 	adc.w	r3, r9, r3
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001946:	4629      	mov	r1, r5
 8001948:	024b      	lsls	r3, r1, #9
 800194a:	4621      	mov	r1, r4
 800194c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001950:	4621      	mov	r1, r4
 8001952:	024a      	lsls	r2, r1, #9
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195a:	2200      	movs	r2, #0
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800195e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001964:	f7fe fc8c 	bl	8000280 <__aeabi_uldivmod>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4613      	mov	r3, r2
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001970:	e058      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	4618      	mov	r0, r3
 800197c:	4611      	mov	r1, r2
 800197e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
 8001988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800198c:	4642      	mov	r2, r8
 800198e:	464b      	mov	r3, r9
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0159      	lsls	r1, r3, #5
 800199a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199e:	0150      	lsls	r0, r2, #5
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4641      	mov	r1, r8
 80019a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019aa:	4649      	mov	r1, r9
 80019ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019c4:	ebb2 040a 	subs.w	r4, r2, sl
 80019c8:	eb63 050b 	sbc.w	r5, r3, fp
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	00eb      	lsls	r3, r5, #3
 80019d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019da:	00e2      	lsls	r2, r4, #3
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
 80019e0:	4643      	mov	r3, r8
 80019e2:	18e3      	adds	r3, r4, r3
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	464b      	mov	r3, r9
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fa:	4629      	mov	r1, r5
 80019fc:	028b      	lsls	r3, r1, #10
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a04:	4621      	mov	r1, r4
 8001a06:	028a      	lsls	r2, r1, #10
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	61fa      	str	r2, [r7, #28]
 8001a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a18:	f7fe fc32 	bl	8000280 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a3e:	e002      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3750      	adds	r7, #80	@ 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	00f42400 	.word	0x00f42400
 8001a5c:	007a1200 	.word	0x007a1200

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff0 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	@ (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08005cfc 	.word	0x08005cfc

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffdc 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0b5b      	lsrs	r3, r3, #13
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	@ (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08005cfc 	.word	0x08005cfc

08001ac8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001afc:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <HAL_RCC_GetClockConfig+0x60>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0207 	and.w	r2, r3, #7
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e041      	b.n	8001bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f839 	bl	8001bca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f000 f9b2 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e044      	b.n	8001c82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d018      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x6c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c22:	d013      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x6c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00e      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x6c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a19      	ldr	r2, [pc, #100]	@ (8001c98 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x6c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <HAL_TIM_Base_Start_IT+0xbc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x6c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d010      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	e007      	b.n	8001c80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40000c00 	.word	0x40000c00
 8001ca0:	40014000 	.word	0x40014000

08001ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d020      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01b      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0202 	mvn.w	r2, #2
 8001cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8d2 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8c4 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8d5 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d020      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01b      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0204 	mvn.w	r2, #4
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8ac 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f89e 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8af 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d020      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0208 	mvn.w	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f886 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f878 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f889 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0210 	mvn.w	r2, #16
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f860 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f852 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f863 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0201 	mvn.w	r2, #1
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fd42 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8e6 	bl	8002000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f834 	bl	8001ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0220 	mvn.w	r2, #32
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8b8 	bl	8001fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00f      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef2:	d00b      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a37      	ldr	r2, [pc, #220]	@ (8001fd4 <TIM_Base_SetConfig+0x100>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a36      	ldr	r2, [pc, #216]	@ (8001fd8 <TIM_Base_SetConfig+0x104>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <TIM_Base_SetConfig+0x38>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a35      	ldr	r2, [pc, #212]	@ (8001fdc <TIM_Base_SetConfig+0x108>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01b      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2c:	d017      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a28      	ldr	r2, [pc, #160]	@ (8001fd4 <TIM_Base_SetConfig+0x100>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <TIM_Base_SetConfig+0x104>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <TIM_Base_SetConfig+0x108>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a25      	ldr	r2, [pc, #148]	@ (8001fe0 <TIM_Base_SetConfig+0x10c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <TIM_Base_SetConfig+0x110>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <TIM_Base_SetConfig+0x114>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <TIM_Base_SetConfig+0xfc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 0201 	bic.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40014800 	.word	0x40014800

08001fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e042      	b.n	80020ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fd78 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	@ 0x24
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f973 	bl	8002344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800206c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800207c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800208c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d175      	bne.n	80021c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_UART_Transmit+0x2c>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e06e      	b.n	80021c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	@ 0x21
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fdc5 	bl	8000c80 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800210c:	d108      	bne.n	8002120 <HAL_UART_Transmit+0x6c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e003      	b.n	8002128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002128:	e02e      	b.n	8002188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f848 	bl	80021ca <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e03a      	b.n	80021c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10b      	bne.n	800216a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3302      	adds	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	e007      	b.n	800217a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3301      	adds	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1cb      	bne.n	800212a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2200      	movs	r2, #0
 800219a:	2140      	movs	r1, #64	@ 0x40
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f814 	bl	80021ca <UART_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e006      	b.n	80021c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021da:	e03b      	b.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d037      	beq.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e4:	f7fe fd4c 	bl	8000c80 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	6a3a      	ldr	r2, [r7, #32]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d302      	bcc.n	80021fa <UART_WaitOnFlagUntilTimeout+0x30>
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e03a      	b.n	8002274 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b80      	cmp	r3, #128	@ 0x80
 8002210:	d020      	beq.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d01d      	beq.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b08      	cmp	r3, #8
 8002224:	d116      	bne.n	8002254 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f81d 	bl	800227c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2208      	movs	r2, #8
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e00f      	b.n	8002274 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	429a      	cmp	r2, r3
 8002270:	d0b4      	beq.n	80021dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800227c:	b480      	push	{r7}
 800227e:	b095      	sub	sp, #84	@ 0x54
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	330c      	adds	r3, #12
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228e:	e853 3f00 	ldrex	r3, [r3]
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800229a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	330c      	adds	r3, #12
 80022a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ac:	e841 2300 	strex	r3, r2, [r1]
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e5      	bne.n	8002284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3314      	adds	r3, #20
 80022d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e5      	bne.n	80022b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d119      	bne.n	8002328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	60bb      	str	r3, [r7, #8]
   return(result);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f023 0310 	bic.w	r3, r3, #16
 800230a:	647b      	str	r3, [r7, #68]	@ 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002314:	61ba      	str	r2, [r7, #24]
 8002316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	613b      	str	r3, [r7, #16]
   return(result);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e5      	bne.n	80022f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002336:	bf00      	nop
 8002338:	3754      	adds	r7, #84	@ 0x54
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b0c0      	sub	sp, #256	@ 0x100
 800234a:	af00      	add	r7, sp, #0
 800234c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	ea40 0301 	orr.w	r3, r0, r1
 800236c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	431a      	orrs	r2, r3
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	431a      	orrs	r2, r3
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800239c:	f021 010c 	bic.w	r1, r1, #12
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023aa:	430b      	orrs	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	6999      	ldr	r1, [r3, #24]
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	ea40 0301 	orr.w	r3, r0, r1
 80023ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002610 <UART_SetConfig+0x2cc>)
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <UART_SetConfig+0xa0>
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b8d      	ldr	r3, [pc, #564]	@ (8002614 <UART_SetConfig+0x2d0>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d104      	bne.n	80023ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e4:	f7ff fb5c 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 80023e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023ec:	e003      	b.n	80023f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ee:	f7ff fb43 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 80023f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002400:	f040 810c 	bne.w	800261c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002408:	2200      	movs	r2, #0
 800240a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800240e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	1891      	adds	r1, r2, r2
 800241c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800241e:	415b      	adcs	r3, r3
 8002420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002426:	4621      	mov	r1, r4
 8002428:	eb12 0801 	adds.w	r8, r2, r1
 800242c:	4629      	mov	r1, r5
 800242e:	eb43 0901 	adc.w	r9, r3, r1
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800243e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002446:	4690      	mov	r8, r2
 8002448:	4699      	mov	r9, r3
 800244a:	4623      	mov	r3, r4
 800244c:	eb18 0303 	adds.w	r3, r8, r3
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002454:	462b      	mov	r3, r5
 8002456:	eb49 0303 	adc.w	r3, r9, r3
 800245a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800246a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800246e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002472:	460b      	mov	r3, r1
 8002474:	18db      	adds	r3, r3, r3
 8002476:	653b      	str	r3, [r7, #80]	@ 0x50
 8002478:	4613      	mov	r3, r2
 800247a:	eb42 0303 	adc.w	r3, r2, r3
 800247e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002488:	f7fd fefa 	bl	8000280 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4b61      	ldr	r3, [pc, #388]	@ (8002618 <UART_SetConfig+0x2d4>)
 8002492:	fba3 2302 	umull	r2, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	011c      	lsls	r4, r3, #4
 800249a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024ac:	4642      	mov	r2, r8
 80024ae:	464b      	mov	r3, r9
 80024b0:	1891      	adds	r1, r2, r2
 80024b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024b4:	415b      	adcs	r3, r3
 80024b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024bc:	4641      	mov	r1, r8
 80024be:	eb12 0a01 	adds.w	sl, r2, r1
 80024c2:	4649      	mov	r1, r9
 80024c4:	eb43 0b01 	adc.w	fp, r3, r1
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024dc:	4692      	mov	sl, r2
 80024de:	469b      	mov	fp, r3
 80024e0:	4643      	mov	r3, r8
 80024e2:	eb1a 0303 	adds.w	r3, sl, r3
 80024e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb4b 0303 	adc.w	r3, fp, r3
 80024f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002500:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002508:	460b      	mov	r3, r1
 800250a:	18db      	adds	r3, r3, r3
 800250c:	643b      	str	r3, [r7, #64]	@ 0x40
 800250e:	4613      	mov	r3, r2
 8002510:	eb42 0303 	adc.w	r3, r2, r3
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
 8002516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800251a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800251e:	f7fd feaf 	bl	8000280 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4611      	mov	r1, r2
 8002528:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <UART_SetConfig+0x2d4>)
 800252a:	fba3 2301 	umull	r2, r3, r3, r1
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2264      	movs	r2, #100	@ 0x64
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800253e:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <UART_SetConfig+0x2d4>)
 8002540:	fba3 2302 	umull	r2, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800254c:	441c      	add	r4, r3
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002558:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800255c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002568:	415b      	adcs	r3, r3
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6339      	str	r1, [r7, #48]	@ 0x30
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4651      	mov	r1, sl
 800258e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025c4:	460b      	mov	r3, r1
 80025c6:	18db      	adds	r3, r3, r3
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ca:	4613      	mov	r3, r2
 80025cc:	eb42 0303 	adc.w	r3, r2, r3
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025da:	f7fd fe51 	bl	8000280 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <UART_SetConfig+0x2d4>)
 80025e4:	fba3 1302 	umull	r1, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2164      	movs	r1, #100	@ 0x64
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3332      	adds	r3, #50	@ 0x32
 80025f6:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <UART_SetConfig+0x2d4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4422      	add	r2, r4
 800260a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800260c:	e106      	b.n	800281c <UART_SetConfig+0x4d8>
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800261c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002626:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800262a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800262e:	4642      	mov	r2, r8
 8002630:	464b      	mov	r3, r9
 8002632:	1891      	adds	r1, r2, r2
 8002634:	6239      	str	r1, [r7, #32]
 8002636:	415b      	adcs	r3, r3
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
 800263a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800263e:	4641      	mov	r1, r8
 8002640:	1854      	adds	r4, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb43 0501 	adc.w	r5, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	00eb      	lsls	r3, r5, #3
 8002652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002656:	00e2      	lsls	r2, r4, #3
 8002658:	4614      	mov	r4, r2
 800265a:	461d      	mov	r5, r3
 800265c:	4643      	mov	r3, r8
 800265e:	18e3      	adds	r3, r4, r3
 8002660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002664:	464b      	mov	r3, r9
 8002666:	eb45 0303 	adc.w	r3, r5, r3
 800266a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800267a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800268a:	4629      	mov	r1, r5
 800268c:	008b      	lsls	r3, r1, #2
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002694:	4621      	mov	r1, r4
 8002696:	008a      	lsls	r2, r1, #2
 8002698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4b60      	ldr	r3, [pc, #384]	@ (8002828 <UART_SetConfig+0x4e4>)
 80026a6:	fba3 2302 	umull	r2, r3, r3, r2
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	011c      	lsls	r4, r3, #4
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026c0:	4642      	mov	r2, r8
 80026c2:	464b      	mov	r3, r9
 80026c4:	1891      	adds	r1, r2, r2
 80026c6:	61b9      	str	r1, [r7, #24]
 80026c8:	415b      	adcs	r3, r3
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d0:	4641      	mov	r1, r8
 80026d2:	1851      	adds	r1, r2, r1
 80026d4:	6139      	str	r1, [r7, #16]
 80026d6:	4649      	mov	r1, r9
 80026d8:	414b      	adcs	r3, r1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e8:	4659      	mov	r1, fp
 80026ea:	00cb      	lsls	r3, r1, #3
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f2:	4651      	mov	r1, sl
 80026f4:	00ca      	lsls	r2, r1, #3
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	4642      	mov	r2, r8
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002704:	464b      	mov	r3, r9
 8002706:	460a      	mov	r2, r1
 8002708:	eb42 0303 	adc.w	r3, r2, r3
 800270c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002728:	4649      	mov	r1, r9
 800272a:	008b      	lsls	r3, r1, #2
 800272c:	4641      	mov	r1, r8
 800272e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002732:	4641      	mov	r1, r8
 8002734:	008a      	lsls	r2, r1, #2
 8002736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800273a:	f7fd fda1 	bl	8000280 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4611      	mov	r1, r2
 8002744:	4b38      	ldr	r3, [pc, #224]	@ (8002828 <UART_SetConfig+0x4e4>)
 8002746:	fba3 2301 	umull	r2, r3, r3, r1
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2264      	movs	r2, #100	@ 0x64
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	1acb      	subs	r3, r1, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	3332      	adds	r3, #50	@ 0x32
 8002758:	4a33      	ldr	r2, [pc, #204]	@ (8002828 <UART_SetConfig+0x4e4>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002764:	441c      	add	r4, r3
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	673b      	str	r3, [r7, #112]	@ 0x70
 800276e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002774:	4642      	mov	r2, r8
 8002776:	464b      	mov	r3, r9
 8002778:	1891      	adds	r1, r2, r2
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	415b      	adcs	r3, r3
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002784:	4641      	mov	r1, r8
 8002786:	1851      	adds	r1, r2, r1
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	4649      	mov	r1, r9
 800278c:	414b      	adcs	r3, r1
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800279c:	4659      	mov	r1, fp
 800279e:	00cb      	lsls	r3, r1, #3
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a6:	4651      	mov	r1, sl
 80027a8:	00ca      	lsls	r2, r1, #3
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	4642      	mov	r2, r8
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027b6:	464b      	mov	r3, r9
 80027b8:	460a      	mov	r2, r1
 80027ba:	eb42 0303 	adc.w	r3, r2, r3
 80027be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027d8:	4649      	mov	r1, r9
 80027da:	008b      	lsls	r3, r1, #2
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e2:	4641      	mov	r1, r8
 80027e4:	008a      	lsls	r2, r1, #2
 80027e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ea:	f7fd fd49 	bl	8000280 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <UART_SetConfig+0x4e4>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2164      	movs	r1, #100	@ 0x64
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	3332      	adds	r3, #50	@ 0x32
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <UART_SetConfig+0x4e4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4422      	add	r2, r4
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002822:	46bd      	mov	sp, r7
 8002824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002828:	51eb851f 	.word	0x51eb851f

0800282c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SysTick_Handler+0x1c>)
 8002832:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002834:	f001 fc80 	bl	8004138 <xTaskGetSchedulerState>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800283e:	f002 fa7b 	bl	8004d38 <xPortSysTickHandler>
  }
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a07      	ldr	r2, [pc, #28]	@ (8002878 <vApplicationGetIdleTaskMemory+0x2c>)
 800285c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4a06      	ldr	r2, [pc, #24]	@ (800287c <vApplicationGetIdleTaskMemory+0x30>)
 8002862:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000118 	.word	0x20000118
 800287c:	200001c0 	.word	0x200001c0

08002880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4a06      	ldr	r2, [pc, #24]	@ (80028b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	200003c0 	.word	0x200003c0
 80028b0:	20000468 	.word	0x20000468

080028b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0208 	add.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f103 0208 	add.w	r2, r3, #8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f103 0208 	add.w	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d103      	bne.n	8002976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e00c      	b.n	8002990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3308      	adds	r3, #8
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e002      	b.n	8002984 <vListInsert+0x2e>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	d2f6      	bcs.n	800297e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	601a      	str	r2, [r3, #0]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6852      	ldr	r2, [r2, #4]
 80029e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d103      	bne.n	80029fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a48:	f002 f8e6 	bl	8004c18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	441a      	add	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	22ff      	movs	r2, #255	@ 0xff
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	22ff      	movs	r2, #255	@ 0xff
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d114      	bne.n	8002ac8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01a      	beq.n	8002adc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f97e 	bl	8003dac <xTaskRemoveFromEventList>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <xQueueGenericReset+0xd0>)
 8002ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	e009      	b.n	8002adc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3310      	adds	r3, #16
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fef1 	bl	80028b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3324      	adds	r3, #36	@ 0x24
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff feec 	bl	80028b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002adc:	f002 f8ce 	bl	8004c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	@ 0x38
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	e7fd      	b.n	8002b36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <xQueueGenericCreateStatic+0x56>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <xQueueGenericCreateStatic+0x5a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericCreateStatic+0x5c>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	623b      	str	r3, [r7, #32]
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <xQueueGenericCreateStatic+0x84>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <xQueueGenericCreateStatic+0x88>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <xQueueGenericCreateStatic+0x8a>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	61fb      	str	r3, [r7, #28]
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	e7fd      	b.n	8002b92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b96:	2350      	movs	r3, #80	@ 0x50
 8002b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b50      	cmp	r3, #80	@ 0x50
 8002b9e:	d00b      	beq.n	8002bb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61bb      	str	r3, [r7, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00d      	beq.n	8002be0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f840 	bl	8002c60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3730      	adds	r7, #48	@ 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	@ 0x28
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	613b      	str	r3, [r7, #16]
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	e7fd      	b.n	8002c12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3350      	adds	r3, #80	@ 0x50
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 f919 	bl	8004e5c <pvPortMalloc>
 8002c2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3350      	adds	r3, #80	@ 0x50
 8002c3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f805 	bl	8002c60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c56:	69bb      	ldr	r3, [r7, #24]
	}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c8e:	2101      	movs	r1, #1
 8002c90:	69b8      	ldr	r0, [r7, #24]
 8002c92:	f7ff fec3 	bl	8002a1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	@ 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <xQueueGenericSend+0x34>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <xQueueGenericSend+0x42>
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericSend+0x46>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericSend+0x48>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <xQueueGenericSend+0x64>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSend+0x72>
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <xQueueGenericSend+0x76>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueGenericSend+0x78>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <xQueueGenericSend+0x94>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	623b      	str	r3, [r7, #32]
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d3c:	f001 f9fc 	bl	8004138 <xTaskGetSchedulerState>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <xQueueGenericSend+0xa4>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGenericSend+0xa8>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <xQueueGenericSend+0xaa>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <xQueueGenericSend+0xc6>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	61fb      	str	r3, [r7, #28]
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d6e:	f001 ff53 	bl	8004c18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <xQueueGenericSend+0xdc>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d129      	bne.n	8002dd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d8a:	f000 fa0f 	bl	80031ac <prvCopyDataToQueue>
 8002d8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	3324      	adds	r3, #36	@ 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f805 	bl	8003dac <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <xQueueGenericSend+0x200>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	e00a      	b.n	8002dd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <xQueueGenericSend+0x200>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dd0:	f001 ff54 	bl	8004c7c <vPortExitCritical>
				return pdPASS;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e063      	b.n	8002ea0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dde:	f001 ff4d 	bl	8004c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e05c      	b.n	8002ea0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f83f 	bl	8003e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df6:	2301      	movs	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dfa:	f001 ff3f 	bl	8004c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dfe:	f000 fda7 	bl	8003950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e02:	f001 ff09 	bl	8004c18 <vPortEnterCritical>
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <xQueueGenericSend+0x174>
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d103      	bne.n	8002e32 <xQueueGenericSend+0x18a>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e32:	f001 ff23 	bl	8004c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f82e 	bl	8003ea0 <xTaskCheckForTimeOut>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d124      	bne.n	8002e94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e4c:	f000 faa6 	bl	800339c <prvIsQueueFull>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	3310      	adds	r3, #16
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 ff52 	bl	8003d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e66:	f000 fa31 	bl	80032cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e6a:	f000 fd7f 	bl	800396c <xTaskResumeAll>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af7c 	bne.w	8002d6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <xQueueGenericSend+0x200>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	e772      	b.n	8002d6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e8a:	f000 fa1f 	bl	80032cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e8e:	f000 fd6d 	bl	800396c <xTaskResumeAll>
 8002e92:	e76c      	b.n	8002d6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e96:	f000 fa19 	bl	80032cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e9a:	f000 fd67 	bl	800396c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	@ 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b090      	sub	sp, #64	@ 0x40
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSendFromISR+0x3e>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <xQueueGenericSendFromISR+0x42>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericSendFromISR+0x44>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d103      	bne.n	8002f1a <xQueueGenericSendFromISR+0x6e>
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <xQueueGenericSendFromISR+0x72>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <xQueueGenericSendFromISR+0x74>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	623b      	str	r3, [r7, #32]
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f3c:	f001 ff4c 	bl	8004dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f40:	f3ef 8211 	mrs	r2, BASEPRI
 8002f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61fa      	str	r2, [r7, #28]
 8002f56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <xQueueGenericSendFromISR+0xc2>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d12f      	bne.n	8002fce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f84:	f000 f912 	bl	80031ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d112      	bne.n	8002fb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	3324      	adds	r3, #36	@ 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 ff04 	bl	8003dac <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e007      	b.n	8002fc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002fcc:	e001      	b.n	8002fd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3740      	adds	r7, #64	@ 0x40
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	@ 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <xQueueReceive+0x32>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	623b      	str	r3, [r7, #32]
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	e7fd      	b.n	8003016 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <xQueueReceive+0x40>
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <xQueueReceive+0x44>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <xQueueReceive+0x46>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <xQueueReceive+0x62>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	61fb      	str	r3, [r7, #28]
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f001 f875 	bl	8004138 <xTaskGetSchedulerState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <xQueueReceive+0x72>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueReceive+0x76>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueReceive+0x78>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <xQueueReceive+0x94>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61bb      	str	r3, [r7, #24]
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307c:	f001 fdcc 	bl	8004c18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01f      	beq.n	80030cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003090:	f000 f8f6 	bl	8003280 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fe7f 	bl	8003dac <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <xQueueReceive+0x1c0>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030c4:	f001 fdda 	bl	8004c7c <vPortExitCritical>
				return pdPASS;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e069      	b.n	80031a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d2:	f001 fdd3 	bl	8004c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e062      	b.n	80031a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d106      	bne.n	80030ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fec5 	bl	8003e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ee:	f001 fdc5 	bl	8004c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f2:	f000 fc2d 	bl	8003950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f6:	f001 fd8f 	bl	8004c18 <vPortEnterCritical>
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003100:	b25b      	sxtb	r3, r3
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d103      	bne.n	8003110 <xQueueReceive+0x128>
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003116:	b25b      	sxtb	r3, r3
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d103      	bne.n	8003126 <xQueueReceive+0x13e>
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003126:	f001 fda9 	bl	8004c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312a:	1d3a      	adds	r2, r7, #4
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f000 feb4 	bl	8003ea0 <xTaskCheckForTimeOut>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d123      	bne.n	8003186 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800313e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003140:	f000 f916 	bl	8003370 <prvIsQueueEmpty>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314c:	3324      	adds	r3, #36	@ 0x24
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fdd8 	bl	8003d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800315a:	f000 f8b7 	bl	80032cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800315e:	f000 fc05 	bl	800396c <xTaskResumeAll>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d189      	bne.n	800307c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003168:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <xQueueReceive+0x1c0>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e780      	b.n	800307c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800317a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800317c:	f000 f8a6 	bl	80032cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003180:	f000 fbf4 	bl	800396c <xTaskResumeAll>
 8003184:	e77a      	b.n	800307c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003188:	f000 f8a0 	bl	80032cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800318c:	f000 fbee 	bl	800396c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003192:	f000 f8ed 	bl	8003370 <prvIsQueueEmpty>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f43f af6f 	beq.w	800307c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800319e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3730      	adds	r7, #48	@ 0x30
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d14d      	bne.n	800326e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 ffcc 	bl	8004174 <xTaskPriorityDisinherit>
 80031dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	e043      	b.n	800326e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d119      	bne.n	8003220 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6858      	ldr	r0, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	461a      	mov	r2, r3
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	f002 f8c8 	bl	800538c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	441a      	add	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d32b      	bcc.n	800326e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	e026      	b.n	800326e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68d8      	ldr	r0, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	461a      	mov	r2, r3
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	f002 f8ae 	bl	800538c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	425b      	negs	r3, r3
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d207      	bcs.n	800325c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	425b      	negs	r3, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d105      	bne.n	800326e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3b01      	subs	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003276:	697b      	ldr	r3, [r7, #20]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d018      	beq.n	80032c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	441a      	add	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d303      	bcc.n	80032b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68d9      	ldr	r1, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	461a      	mov	r2, r3
 80032be:	6838      	ldr	r0, [r7, #0]
 80032c0:	f002 f864 	bl	800538c <memcpy>
	}
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032d4:	f001 fca0 	bl	8004c18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032e0:	e011      	b.n	8003306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3324      	adds	r3, #36	@ 0x24
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fd5c 	bl	8003dac <xTaskRemoveFromEventList>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032fa:	f000 fe35 	bl	8003f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3b01      	subs	r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	dce9      	bgt.n	80032e2 <prvUnlockQueue+0x16>
 800330e:	e000      	b.n	8003312 <prvUnlockQueue+0x46>
					break;
 8003310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	22ff      	movs	r2, #255	@ 0xff
 8003316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800331a:	f001 fcaf 	bl	8004c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800331e:	f001 fc7b 	bl	8004c18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800332a:	e011      	b.n	8003350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3310      	adds	r3, #16
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd37 	bl	8003dac <xTaskRemoveFromEventList>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003344:	f000 fe10 	bl	8003f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	3b01      	subs	r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003354:	2b00      	cmp	r3, #0
 8003356:	dce9      	bgt.n	800332c <prvUnlockQueue+0x60>
 8003358:	e000      	b.n	800335c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800335a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	22ff      	movs	r2, #255	@ 0xff
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003364:	f001 fc8a 	bl	8004c7c <vPortExitCritical>
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003378:	f001 fc4e 	bl	8004c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e001      	b.n	800338e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800338e:	f001 fc75 	bl	8004c7c <vPortExitCritical>

	return xReturn;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a4:	f001 fc38 	bl	8004c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d102      	bne.n	80033ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e001      	b.n	80033be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033be:	f001 fc5d 	bl	8004c7c <vPortExitCritical>

	return xReturn;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e014      	b.n	8003406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <vQueueAddToRegistry+0x50>)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033e8:	490c      	ldr	r1, [pc, #48]	@ (800341c <vQueueAddToRegistry+0x50>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <vQueueAddToRegistry+0x50>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033fe:	e006      	b.n	800340e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d9e7      	bls.n	80033dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000868 	.word	0x20000868

08003420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003430:	f001 fbf2 	bl	8004c18 <vPortEnterCritical>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800343a:	b25b      	sxtb	r3, r3
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d103      	bne.n	800344a <vQueueWaitForMessageRestricted+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d103      	bne.n	8003460 <vQueueWaitForMessageRestricted+0x40>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003460:	f001 fc0c 	bl	8004c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3324      	adds	r3, #36	@ 0x24
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc6d 	bl	8003d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff26 	bl	80032cc <prvUnlockQueue>
	}
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	@ 0x38
 800348c:	af04      	add	r7, sp, #16
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61fb      	str	r3, [r7, #28]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034d2:	23a8      	movs	r3, #168	@ 0xa8
 80034d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80034da:	d00b      	beq.n	80034f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	61bb      	str	r3, [r7, #24]
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01e      	beq.n	800353a <xTaskCreateStatic+0xb2>
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01b      	beq.n	800353a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	2202      	movs	r2, #2
 8003510:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003514:	2300      	movs	r3, #0
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f851 	bl	80035d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003534:	f000 f8f6 	bl	8003724 <prvAddNewTaskToReadyList>
 8003538:	e001      	b.n	800353e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800353e:	697b      	ldr	r3, [r7, #20]
	}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	@ 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	@ 0x30
 800354c:	af04      	add	r7, sp, #16
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc7d 	bl	8004e5c <pvPortMalloc>
 8003562:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800356a:	20a8      	movs	r0, #168	@ 0xa8
 800356c:	f001 fc76 	bl	8004e5c <pvPortMalloc>
 8003570:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
 800357e:	e005      	b.n	800358c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f001 fd39 	bl	8004ff8 <vPortFree>
 8003586:	e001      	b.n	800358c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d017      	beq.n	80035c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	2300      	movs	r3, #0
 800359e:	9303      	str	r3, [sp, #12]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	9302      	str	r3, [sp, #8]
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f80f 	bl	80035d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b6:	69f8      	ldr	r0, [r7, #28]
 80035b8:	f000 f8b4 	bl	8003724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035bc:	2301      	movs	r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e002      	b.n	80035c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035c8:	69bb      	ldr	r3, [r7, #24]
	}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	461a      	mov	r2, r3
 80035ec:	21a5      	movs	r1, #165	@ 0xa5
 80035ee:	f001 fe43 	bl	8005278 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035fc:	3b01      	subs	r3, #1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	617b      	str	r3, [r7, #20]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01f      	beq.n	8003674 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	e012      	b.n	8003660 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	7819      	ldrb	r1, [r3, #0]
 8003642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	3334      	adds	r3, #52	@ 0x34
 800364a:	460a      	mov	r2, r1
 800364c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d9e9      	bls.n	800363a <prvInitialiseNewTask+0x66>
 8003666:	e000      	b.n	800366a <prvInitialiseNewTask+0x96>
			{
				break;
 8003668:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003672:	e003      	b.n	800367c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	2b37      	cmp	r3, #55	@ 0x37
 8003680:	d901      	bls.n	8003686 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003682:	2337      	movs	r3, #55	@ 0x37
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003690:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	2200      	movs	r2, #0
 8003696:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	3304      	adds	r3, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f929 	bl	80028f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a4:	3318      	adds	r3, #24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f924 	bl	80028f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	3354      	adds	r3, #84	@ 0x54
 80036d6:	224c      	movs	r2, #76	@ 0x4c
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fdcc 	bl	8005278 <memset>
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <prvInitialiseNewTask+0x144>)
 80036e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <prvInitialiseNewTask+0x148>)
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <prvInitialiseNewTask+0x14c>)
 80036f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f001 f95a 	bl	80049b0 <pxPortInitialiseStack>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20004afc 	.word	0x20004afc
 800371c:	20004b64 	.word	0x20004b64
 8003720:	20004bcc 	.word	0x20004bcc

08003724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800372c:	f001 fa74 	bl	8004c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003730:	4b2d      	ldr	r3, [pc, #180]	@ (80037e8 <prvAddNewTaskToReadyList+0xc4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a2c      	ldr	r2, [pc, #176]	@ (80037e8 <prvAddNewTaskToReadyList+0xc4>)
 8003738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800373a:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <prvAddNewTaskToReadyList+0xc8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003742:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <prvAddNewTaskToReadyList+0xc8>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003748:	4b27      	ldr	r3, [pc, #156]	@ (80037e8 <prvAddNewTaskToReadyList+0xc4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d110      	bne.n	8003772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003750:	f000 fc2e 	bl	8003fb0 <prvInitialiseTaskLists>
 8003754:	e00d      	b.n	8003772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <prvAddNewTaskToReadyList+0xcc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800375e:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <prvAddNewTaskToReadyList+0xc8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d802      	bhi.n	8003772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800376c:	4a1f      	ldr	r2, [pc, #124]	@ (80037ec <prvAddNewTaskToReadyList+0xc8>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <prvAddNewTaskToReadyList+0xd0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <prvAddNewTaskToReadyList+0xd0>)
 800377a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800377c:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <prvAddNewTaskToReadyList+0xd0>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <prvAddNewTaskToReadyList+0xd4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d903      	bls.n	8003798 <prvAddNewTaskToReadyList+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <prvAddNewTaskToReadyList+0xd4>)
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <prvAddNewTaskToReadyList+0xd8>)
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7ff f8ad 	bl	800290e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037b4:	f001 fa62 	bl	8004c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037b8:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <prvAddNewTaskToReadyList+0xcc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <prvAddNewTaskToReadyList+0xc8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d207      	bcs.n	80037de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <prvAddNewTaskToReadyList+0xdc>)
 80037d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000d7c 	.word	0x20000d7c
 80037ec:	200008a8 	.word	0x200008a8
 80037f0:	20000d88 	.word	0x20000d88
 80037f4:	20000d98 	.word	0x20000d98
 80037f8:	20000d84 	.word	0x20000d84
 80037fc:	200008ac 	.word	0x200008ac
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003816:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <vTaskDelay+0x64>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <vTaskDelay+0x32>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60bb      	str	r3, [r7, #8]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003836:	f000 f88b 	bl	8003950 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800383a:	2100      	movs	r1, #0
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fd09 	bl	8004254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003842:	f000 f893 	bl	800396c <xTaskResumeAll>
 8003846:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <vTaskDelay+0x68>)
 8003850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000da4 	.word	0x20000da4
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	@ 0x28
 8003874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800387e:	463a      	mov	r2, r7
 8003880:	1d39      	adds	r1, r7, #4
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ffe0 	bl	800284c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	9202      	str	r2, [sp, #8]
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	2300      	movs	r3, #0
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2300      	movs	r3, #0
 800389c:	460a      	mov	r2, r1
 800389e:	4924      	ldr	r1, [pc, #144]	@ (8003930 <vTaskStartScheduler+0xc0>)
 80038a0:	4824      	ldr	r0, [pc, #144]	@ (8003934 <vTaskStartScheduler+0xc4>)
 80038a2:	f7ff fdf1 	bl	8003488 <xTaskCreateStatic>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4a23      	ldr	r2, [pc, #140]	@ (8003938 <vTaskStartScheduler+0xc8>)
 80038aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038ac:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <vTaskStartScheduler+0xc8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e001      	b.n	80038be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038c4:	f000 fd1a 	bl	80042fc <xTimerCreateTimerTask>
 80038c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d11b      	bne.n	8003908 <vTaskStartScheduler+0x98>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	613b      	str	r3, [r7, #16]
}
 80038e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038e4:	4b15      	ldr	r3, [pc, #84]	@ (800393c <vTaskStartScheduler+0xcc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3354      	adds	r3, #84	@ 0x54
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <vTaskStartScheduler+0xd0>)
 80038ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038ee:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <vTaskStartScheduler+0xd4>)
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295
 80038f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038f6:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <vTaskStartScheduler+0xd8>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038fc:	4b13      	ldr	r3, [pc, #76]	@ (800394c <vTaskStartScheduler+0xdc>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003902:	f001 f8e5 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003906:	e00f      	b.n	8003928 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d10b      	bne.n	8003928 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60fb      	str	r3, [r7, #12]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <vTaskStartScheduler+0xb4>
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	08005cd4 	.word	0x08005cd4
 8003934:	08003f81 	.word	0x08003f81
 8003938:	20000da0 	.word	0x20000da0
 800393c:	200008a8 	.word	0x200008a8
 8003940:	20000010 	.word	0x20000010
 8003944:	20000d9c 	.word	0x20000d9c
 8003948:	20000d88 	.word	0x20000d88
 800394c:	20000d80 	.word	0x20000d80

08003950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <vTaskSuspendAll+0x18>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a03      	ldr	r2, [pc, #12]	@ (8003968 <vTaskSuspendAll+0x18>)
 800395c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	20000da4 	.word	0x20000da4

0800396c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800397a:	4b42      	ldr	r3, [pc, #264]	@ (8003a84 <xTaskResumeAll+0x118>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <xTaskResumeAll+0x2e>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	603b      	str	r3, [r7, #0]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800399a:	f001 f93d 	bl	8004c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800399e:	4b39      	ldr	r3, [pc, #228]	@ (8003a84 <xTaskResumeAll+0x118>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4a37      	ldr	r2, [pc, #220]	@ (8003a84 <xTaskResumeAll+0x118>)
 80039a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a8:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <xTaskResumeAll+0x118>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d162      	bne.n	8003a76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039b0:	4b35      	ldr	r3, [pc, #212]	@ (8003a88 <xTaskResumeAll+0x11c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05e      	beq.n	8003a76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b8:	e02f      	b.n	8003a1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <xTaskResumeAll+0x120>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3318      	adds	r3, #24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fffe 	bl	80029c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fff9 	bl	80029c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	4b2d      	ldr	r3, [pc, #180]	@ (8003a90 <xTaskResumeAll+0x124>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d903      	bls.n	80039ea <xTaskResumeAll+0x7e>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a90 <xTaskResumeAll+0x124>)
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <xTaskResumeAll+0x128>)
 80039f8:	441a      	add	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7fe ff84 	bl	800290e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0a:	4b23      	ldr	r3, [pc, #140]	@ (8003a98 <xTaskResumeAll+0x12c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a14:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <xTaskResumeAll+0x130>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a8c <xTaskResumeAll+0x120>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1cb      	bne.n	80039ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a28:	f000 fb66 	bl	80040f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <xTaskResumeAll+0x134>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a38:	f000 f846 	bl	8003ac8 <xTaskIncrementTick>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a42:	4b16      	ldr	r3, [pc, #88]	@ (8003a9c <xTaskResumeAll+0x130>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f1      	bne.n	8003a38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003a54:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <xTaskResumeAll+0x134>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <xTaskResumeAll+0x130>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <xTaskResumeAll+0x138>)
 8003a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a76:	f001 f901 	bl	8004c7c <vPortExitCritical>

	return xAlreadyYielded;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000da4 	.word	0x20000da4
 8003a88:	20000d7c 	.word	0x20000d7c
 8003a8c:	20000d3c 	.word	0x20000d3c
 8003a90:	20000d84 	.word	0x20000d84
 8003a94:	200008ac 	.word	0x200008ac
 8003a98:	200008a8 	.word	0x200008a8
 8003a9c:	20000d90 	.word	0x20000d90
 8003aa0:	20000d8c 	.word	0x20000d8c
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <xTaskGetTickCount+0x1c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000d80 	.word	0x20000d80

08003ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c10 <xTaskIncrementTick+0x148>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 8090 	bne.w	8003bfc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003adc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c14 <xTaskIncrementTick+0x14c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c14 <xTaskIncrementTick+0x14c>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d121      	bne.n	8003b34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003af0:	4b49      	ldr	r3, [pc, #292]	@ (8003c18 <xTaskIncrementTick+0x150>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	603b      	str	r3, [r7, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <xTaskIncrementTick+0x46>
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <xTaskIncrementTick+0x150>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4b40      	ldr	r3, [pc, #256]	@ (8003c1c <xTaskIncrementTick+0x154>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c18 <xTaskIncrementTick+0x150>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4a3e      	ldr	r2, [pc, #248]	@ (8003c1c <xTaskIncrementTick+0x154>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <xTaskIncrementTick+0x158>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c20 <xTaskIncrementTick+0x158>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	f000 fae2 	bl	80040f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b34:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <xTaskIncrementTick+0x15c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d349      	bcc.n	8003bd2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3e:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <xTaskIncrementTick+0x150>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <xTaskIncrementTick+0x15c>)
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	601a      	str	r2, [r3, #0]
					break;
 8003b50:	e03f      	b.n	8003bd2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b52:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <xTaskIncrementTick+0x150>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d203      	bcs.n	8003b72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <xTaskIncrementTick+0x15c>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b70:	e02f      	b.n	8003bd2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff26 	bl	80029c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3318      	adds	r3, #24
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe ff1d 	bl	80029c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b92:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <xTaskIncrementTick+0x160>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d903      	bls.n	8003ba2 <xTaskIncrementTick+0xda>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	4a22      	ldr	r2, [pc, #136]	@ (8003c28 <xTaskIncrementTick+0x160>)
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <xTaskIncrementTick+0x164>)
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fe fea8 	bl	800290e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <xTaskIncrementTick+0x168>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d3b8      	bcc.n	8003b3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd0:	e7b5      	b.n	8003b3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <xTaskIncrementTick+0x168>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd8:	4914      	ldr	r1, [pc, #80]	@ (8003c2c <xTaskIncrementTick+0x164>)
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d901      	bls.n	8003bee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bee:	4b11      	ldr	r3, [pc, #68]	@ (8003c34 <xTaskIncrementTick+0x16c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e004      	b.n	8003c06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <xTaskIncrementTick+0x170>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a0d      	ldr	r2, [pc, #52]	@ (8003c38 <xTaskIncrementTick+0x170>)
 8003c04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000da4 	.word	0x20000da4
 8003c14:	20000d80 	.word	0x20000d80
 8003c18:	20000d34 	.word	0x20000d34
 8003c1c:	20000d38 	.word	0x20000d38
 8003c20:	20000d94 	.word	0x20000d94
 8003c24:	20000d9c 	.word	0x20000d9c
 8003c28:	20000d84 	.word	0x20000d84
 8003c2c:	200008ac 	.word	0x200008ac
 8003c30:	200008a8 	.word	0x200008a8
 8003c34:	20000d90 	.word	0x20000d90
 8003c38:	20000d8c 	.word	0x20000d8c

08003c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c42:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <vTaskSwitchContext+0xb4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <vTaskSwitchContext+0xb8>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c50:	e047      	b.n	8003ce2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003c52:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <vTaskSwitchContext+0xb8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c58:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <vTaskSwitchContext+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e011      	b.n	8003c84 <vTaskSwitchContext+0x48>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <vTaskSwitchContext+0x42>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	607b      	str	r3, [r7, #4]
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	e7fd      	b.n	8003c7a <vTaskSwitchContext+0x3e>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	491d      	ldr	r1, [pc, #116]	@ (8003cfc <vTaskSwitchContext+0xc0>)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0e3      	beq.n	8003c60 <vTaskSwitchContext+0x24>
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4a16      	ldr	r2, [pc, #88]	@ (8003cfc <vTaskSwitchContext+0xc0>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d104      	bne.n	8003cc8 <vTaskSwitchContext+0x8c>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4a0c      	ldr	r2, [pc, #48]	@ (8003d00 <vTaskSwitchContext+0xc4>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <vTaskSwitchContext+0xbc>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <vTaskSwitchContext+0xc4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3354      	adds	r3, #84	@ 0x54
 8003cde:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <vTaskSwitchContext+0xc8>)
 8003ce0:	6013      	str	r3, [r2, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000da4 	.word	0x20000da4
 8003cf4:	20000d90 	.word	0x20000d90
 8003cf8:	20000d84 	.word	0x20000d84
 8003cfc:	200008ac 	.word	0x200008ac
 8003d00:	200008a8 	.word	0x200008a8
 8003d04:	20000010 	.word	0x20000010

08003d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d30:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <vTaskPlaceOnEventList+0x48>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3318      	adds	r3, #24
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fe fe0c 	bl	8002956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d3e:	2101      	movs	r1, #1
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f000 fa87 	bl	8004254 <prvAddCurrentTaskToDelayedList>
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200008a8 	.word	0x200008a8

08003d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	617b      	str	r3, [r7, #20]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3318      	adds	r3, #24
 8003d84:	4619      	mov	r1, r3
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7fe fdc1 	bl	800290e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f000 fa5a 	bl	8004254 <prvAddCurrentTaskToDelayedList>
	}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200008a8 	.word	0x200008a8

08003dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3318      	adds	r3, #24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fdf2 	bl	80029c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <xTaskRemoveFromEventList+0xb0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11d      	bne.n	8003e28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fde9 	bl	80029c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <xTaskRemoveFromEventList+0xb4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d903      	bls.n	8003e0a <xTaskRemoveFromEventList+0x5e>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <xTaskRemoveFromEventList+0xb4>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <xTaskRemoveFromEventList+0xb8>)
 8003e18:	441a      	add	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7fe fd74 	bl	800290e <vListInsertEnd>
 8003e26:	e005      	b.n	8003e34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	480e      	ldr	r0, [pc, #56]	@ (8003e68 <xTaskRemoveFromEventList+0xbc>)
 8003e30:	f7fe fd6d 	bl	800290e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <xTaskRemoveFromEventList+0xc0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d905      	bls.n	8003e4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <xTaskRemoveFromEventList+0xc4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e001      	b.n	8003e52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e52:	697b      	ldr	r3, [r7, #20]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000da4 	.word	0x20000da4
 8003e60:	20000d84 	.word	0x20000d84
 8003e64:	200008ac 	.word	0x200008ac
 8003e68:	20000d3c 	.word	0x20000d3c
 8003e6c:	200008a8 	.word	0x200008a8
 8003e70:	20000d90 	.word	0x20000d90

08003e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <vTaskInternalSetTimeOutState+0x24>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <vTaskInternalSetTimeOutState+0x28>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	605a      	str	r2, [r3, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20000d94 	.word	0x20000d94
 8003e9c:	20000d80 	.word	0x20000d80

08003ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10b      	bne.n	8003ec8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	613b      	str	r3, [r7, #16]
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ee6:	f000 fe97 	bl	8004c18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <xTaskCheckForTimeOut+0xc0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d102      	bne.n	8003f0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e023      	b.n	8003f52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b15      	ldr	r3, [pc, #84]	@ (8003f64 <xTaskCheckForTimeOut+0xc4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d007      	beq.n	8003f26 <xTaskCheckForTimeOut+0x86>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e015      	b.n	8003f52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d20b      	bcs.n	8003f48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad2      	subs	r2, r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff99 	bl	8003e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e004      	b.n	8003f52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f52:	f000 fe93 	bl	8004c7c <vPortExitCritical>

	return xReturn;
 8003f56:	69fb      	ldr	r3, [r7, #28]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000d80 	.word	0x20000d80
 8003f64:	20000d94 	.word	0x20000d94

08003f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <vTaskMissedYield+0x14>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000d90 	.word	0x20000d90

08003f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f88:	f000 f852 	bl	8004030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <prvIdleTask+0x28>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d9f9      	bls.n	8003f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <prvIdleTask+0x2c>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fa4:	e7f0      	b.n	8003f88 <prvIdleTask+0x8>
 8003fa6:	bf00      	nop
 8003fa8:	200008ac 	.word	0x200008ac
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	e00c      	b.n	8003fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a12      	ldr	r2, [pc, #72]	@ (8004010 <prvInitialiseTaskLists+0x60>)
 8003fc8:	4413      	add	r3, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fc72 	bl	80028b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b37      	cmp	r3, #55	@ 0x37
 8003fda:	d9ef      	bls.n	8003fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fdc:	480d      	ldr	r0, [pc, #52]	@ (8004014 <prvInitialiseTaskLists+0x64>)
 8003fde:	f7fe fc69 	bl	80028b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fe2:	480d      	ldr	r0, [pc, #52]	@ (8004018 <prvInitialiseTaskLists+0x68>)
 8003fe4:	f7fe fc66 	bl	80028b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fe8:	480c      	ldr	r0, [pc, #48]	@ (800401c <prvInitialiseTaskLists+0x6c>)
 8003fea:	f7fe fc63 	bl	80028b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fee:	480c      	ldr	r0, [pc, #48]	@ (8004020 <prvInitialiseTaskLists+0x70>)
 8003ff0:	f7fe fc60 	bl	80028b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ff4:	480b      	ldr	r0, [pc, #44]	@ (8004024 <prvInitialiseTaskLists+0x74>)
 8003ff6:	f7fe fc5d 	bl	80028b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <prvInitialiseTaskLists+0x78>)
 8003ffc:	4a05      	ldr	r2, [pc, #20]	@ (8004014 <prvInitialiseTaskLists+0x64>)
 8003ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <prvInitialiseTaskLists+0x7c>)
 8004002:	4a05      	ldr	r2, [pc, #20]	@ (8004018 <prvInitialiseTaskLists+0x68>)
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200008ac 	.word	0x200008ac
 8004014:	20000d0c 	.word	0x20000d0c
 8004018:	20000d20 	.word	0x20000d20
 800401c:	20000d3c 	.word	0x20000d3c
 8004020:	20000d50 	.word	0x20000d50
 8004024:	20000d68 	.word	0x20000d68
 8004028:	20000d34 	.word	0x20000d34
 800402c:	20000d38 	.word	0x20000d38

08004030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004036:	e019      	b.n	800406c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004038:	f000 fdee 	bl	8004c18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <prvCheckTasksWaitingTermination+0x50>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fcbd 	bl	80029c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a0b      	ldr	r2, [pc, #44]	@ (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <prvCheckTasksWaitingTermination+0x58>)
 8004060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004062:	f000 fe0b 	bl	8004c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f810 	bl	800408c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e1      	bne.n	8004038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000d50 	.word	0x20000d50
 8004084:	20000d7c 	.word	0x20000d7c
 8004088:	20000d64 	.word	0x20000d64

0800408c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3354      	adds	r3, #84	@ 0x54
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f8f5 	bl	8005288 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ffa3 	bl	8004ff8 <vPortFree>
				vPortFree( pxTCB );
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 ffa0 	bl	8004ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040b8:	e019      	b.n	80040ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d103      	bne.n	80040cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 ff97 	bl	8004ff8 <vPortFree>
	}
 80040ca:	e010      	b.n	80040ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d00b      	beq.n	80040ee <prvDeleteTCB+0x62>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60fb      	str	r3, [r7, #12]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <prvDeleteTCB+0x5e>
	}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <prvResetNextTaskUnblockTime+0x38>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004108:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <prvResetNextTaskUnblockTime+0x3c>)
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004110:	e008      	b.n	8004124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <prvResetNextTaskUnblockTime+0x38>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <prvResetNextTaskUnblockTime+0x3c>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000d34 	.word	0x20000d34
 8004134:	20000d9c 	.word	0x20000d9c

08004138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800413e:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <xTaskGetSchedulerState+0x34>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004146:	2301      	movs	r3, #1
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	e008      	b.n	800415e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <xTaskGetSchedulerState+0x38>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004154:	2302      	movs	r3, #2
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	e001      	b.n	800415e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800415e:	687b      	ldr	r3, [r7, #4]
	}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000d88 	.word	0x20000d88
 8004170:	20000da4 	.word	0x20000da4

08004174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d058      	beq.n	800423c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800418a:	4b2f      	ldr	r3, [pc, #188]	@ (8004248 <xTaskPriorityDisinherit+0xd4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d00b      	beq.n	80041ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	60bb      	str	r3, [r7, #8]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d02c      	beq.n	800423c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d128      	bne.n	800423c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fbea 	bl	80029c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420c:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <xTaskPriorityDisinherit+0xd8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <xTaskPriorityDisinherit+0xa8>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a0c      	ldr	r2, [pc, #48]	@ (800424c <xTaskPriorityDisinherit+0xd8>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <xTaskPriorityDisinherit+0xdc>)
 800422a:	441a      	add	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe fb6b 	bl	800290e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800423c:	697b      	ldr	r3, [r7, #20]
	}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200008a8 	.word	0x200008a8
 800424c:	20000d84 	.word	0x20000d84
 8004250:	200008ac 	.word	0x200008ac

08004254 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800425e:	4b21      	ldr	r3, [pc, #132]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fbac 	bl	80029c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d10a      	bne.n	800428e <prvAddCurrentTaskToDelayedList+0x3a>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4819      	ldr	r0, [pc, #100]	@ (80042ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004288:	f7fe fb41 	bl	800290e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800428c:	e026      	b.n	80042dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d209      	bcs.n	80042ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a6:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b0f      	ldr	r3, [pc, #60]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f7fe fb4f 	bl	8002956 <vListInsert>
}
 80042b8:	e010      	b.n	80042dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7fe fb45 	bl	8002956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d202      	bcs.n	80042dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042d6:	4a08      	ldr	r2, [pc, #32]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000d80 	.word	0x20000d80
 80042e8:	200008a8 	.word	0x200008a8
 80042ec:	20000d68 	.word	0x20000d68
 80042f0:	20000d38 	.word	0x20000d38
 80042f4:	20000d34 	.word	0x20000d34
 80042f8:	20000d9c 	.word	0x20000d9c

080042fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004306:	f000 fb13 	bl	8004930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800430a:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <xTimerCreateTimerTask+0x84>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800431a:	1d3a      	adds	r2, r7, #4
 800431c:	f107 0108 	add.w	r1, r7, #8
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe faab 	bl	8002880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	2302      	movs	r3, #2
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	460a      	mov	r2, r1
 800433c:	4911      	ldr	r1, [pc, #68]	@ (8004384 <xTimerCreateTimerTask+0x88>)
 800433e:	4812      	ldr	r0, [pc, #72]	@ (8004388 <xTimerCreateTimerTask+0x8c>)
 8004340:	f7ff f8a2 	bl	8003488 <xTaskCreateStatic>
 8004344:	4603      	mov	r3, r0
 8004346:	4a11      	ldr	r2, [pc, #68]	@ (800438c <xTimerCreateTimerTask+0x90>)
 8004348:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800434a:	4b10      	ldr	r3, [pc, #64]	@ (800438c <xTimerCreateTimerTask+0x90>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004352:	2301      	movs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	613b      	str	r3, [r7, #16]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000dd8 	.word	0x20000dd8
 8004384:	08005cdc 	.word	0x08005cdc
 8004388:	080044c9 	.word	0x080044c9
 800438c:	20000ddc 	.word	0x20000ddc

08004390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	@ 0x28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	623b      	str	r3, [r7, #32]
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	e7fd      	b.n	80043bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <xTimerGenericCommand+0x98>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02a      	beq.n	800441e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	dc18      	bgt.n	800440c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043da:	f7ff fead 	bl	8004138 <xTaskGetSchedulerState>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d109      	bne.n	80043f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <xTimerGenericCommand+0x98>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	f107 0110 	add.w	r1, r7, #16
 80043ec:	2300      	movs	r3, #0
 80043ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f0:	f7fe fc5a 	bl	8002ca8 <xQueueGenericSend>
 80043f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80043f6:	e012      	b.n	800441e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <xTimerGenericCommand+0x98>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	f107 0110 	add.w	r1, r7, #16
 8004400:	2300      	movs	r3, #0
 8004402:	2200      	movs	r2, #0
 8004404:	f7fe fc50 	bl	8002ca8 <xQueueGenericSend>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24
 800440a:	e008      	b.n	800441e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <xTimerGenericCommand+0x98>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f107 0110 	add.w	r1, r7, #16
 8004414:	2300      	movs	r3, #0
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	f7fe fd48 	bl	8002eac <xQueueGenericSendFromISR>
 800441c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004420:	4618      	mov	r0, r3
 8004422:	3728      	adds	r7, #40	@ 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000dd8 	.word	0x20000dd8

0800442c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004436:	4b23      	ldr	r3, [pc, #140]	@ (80044c4 <prvProcessExpiredTimer+0x98>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fabf 	bl	80029c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d023      	beq.n	80044a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	18d1      	adds	r1, r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f000 f8d5 	bl	8004614 <prvInsertTimerInActiveList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004470:	2300      	movs	r3, #0
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	2100      	movs	r1, #0
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff ff88 	bl	8004390 <xTimerGenericCommand>
 8004480:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d114      	bne.n	80044b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	60fb      	str	r3, [r7, #12]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	4798      	blx	r3
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000dd0 	.word	0x20000dd0

080044c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d0:	f107 0308 	add.w	r3, r7, #8
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f859 	bl	800458c <prvGetNextExpireTime>
 80044da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4619      	mov	r1, r3
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f805 	bl	80044f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044e6:	f000 f8d7 	bl	8004698 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ea:	bf00      	nop
 80044ec:	e7f0      	b.n	80044d0 <prvTimerTask+0x8>
	...

080044f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044fa:	f7ff fa29 	bl	8003950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f866 	bl	80045d4 <prvSampleTimeNow>
 8004508:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d130      	bne.n	8004572 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <prvProcessTimerOrBlockTask+0x3c>
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	429a      	cmp	r2, r3
 800451c:	d806      	bhi.n	800452c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800451e:	f7ff fa25 	bl	800396c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff81 	bl	800442c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800452a:	e024      	b.n	8004576 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004532:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <prvProcessTimerOrBlockTask+0x90>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <prvProcessTimerOrBlockTask+0x50>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <prvProcessTimerOrBlockTask+0x52>
 8004540:	2300      	movs	r3, #0
 8004542:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004544:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <prvProcessTimerOrBlockTask+0x94>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f7fe ff65 	bl	8003420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004556:	f7ff fa09 	bl	800396c <xTaskResumeAll>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <prvProcessTimerOrBlockTask+0x98>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
}
 8004570:	e001      	b.n	8004576 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004572:	f7ff f9fb 	bl	800396c <xTaskResumeAll>
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000dd4 	.word	0x20000dd4
 8004584:	20000dd8 	.word	0x20000dd8
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004594:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <prvGetNextExpireTime+0x44>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <prvGetNextExpireTime+0x16>
 800459e:	2201      	movs	r2, #1
 80045a0:	e000      	b.n	80045a4 <prvGetNextExpireTime+0x18>
 80045a2:	2200      	movs	r2, #0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b0:	4b07      	ldr	r3, [pc, #28]	@ (80045d0 <prvGetNextExpireTime+0x44>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e001      	b.n	80045c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000dd0 	.word	0x20000dd0

080045d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045dc:	f7ff fa64 	bl	8003aa8 <xTaskGetTickCount>
 80045e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <prvSampleTimeNow+0x3c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d205      	bcs.n	80045f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045ec:	f000 f93a 	bl	8004864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e002      	b.n	80045fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045fe:	4a04      	ldr	r2, [pc, #16]	@ (8004610 <prvSampleTimeNow+0x3c>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000de0 	.word	0x20000de0

08004614 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d812      	bhi.n	8004660 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e01b      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800464e:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <prvInsertTimerInActiveList+0x7c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe f97c 	bl	8002956 <vListInsert>
 800465e:	e012      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d206      	bcs.n	8004676 <prvInsertTimerInActiveList+0x62>
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e007      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004676:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <prvInsertTimerInActiveList+0x80>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7fe f968 	bl	8002956 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004686:	697b      	ldr	r3, [r7, #20]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000dd4 	.word	0x20000dd4
 8004694:	20000dd0 	.word	0x20000dd0

08004698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	@ 0x38
 800469c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800469e:	e0ce      	b.n	800483e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da19      	bge.n	80046da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	3304      	adds	r3, #4
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61fb      	str	r3, [r7, #28]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d0:	6850      	ldr	r0, [r2, #4]
 80046d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d4:	6892      	ldr	r2, [r2, #8]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f2c0 80ae 	blt.w	800483e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	3304      	adds	r3, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f968 	bl	80029c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f8:	463b      	mov	r3, r7
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff6a 	bl	80045d4 <prvSampleTimeNow>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b09      	cmp	r3, #9
 8004706:	f200 8097 	bhi.w	8004838 <prvProcessReceivedCommands+0x1a0>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <prvProcessReceivedCommands+0x78>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004739 	.word	0x08004739
 8004714:	08004739 	.word	0x08004739
 8004718:	08004739 	.word	0x08004739
 800471c:	080047af 	.word	0x080047af
 8004720:	080047c3 	.word	0x080047c3
 8004724:	0800480f 	.word	0x0800480f
 8004728:	08004739 	.word	0x08004739
 800472c:	08004739 	.word	0x08004739
 8004730:	080047af 	.word	0x080047af
 8004734:	080047c3 	.word	0x080047c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	18d1      	adds	r1, r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004758:	f7ff ff5c 	bl	8004614 <prvInsertTimerInActiveList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06c      	beq.n	800483c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004768:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d061      	beq.n	800483c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	441a      	add	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	2100      	movs	r1, #0
 8004788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800478a:	f7ff fe01 	bl	8004390 <xTimerGenericCommand>
 800478e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d152      	bne.n	800483c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61bb      	str	r3, [r7, #24]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047c0:	e03d      	b.n	800483e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	617b      	str	r3, [r7, #20]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	18d1      	adds	r1, r2, r3
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004808:	f7ff ff04 	bl	8004614 <prvInsertTimerInActiveList>
					break;
 800480c:	e017      	b.n	800483e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800480e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800481c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481e:	f000 fbeb 	bl	8004ff8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004822:	e00c      	b.n	800483e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004836:	e002      	b.n	800483e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <prvProcessReceivedCommands+0x1a6>
					break;
 800483c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800483e:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <prvProcessReceivedCommands+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1d39      	adds	r1, r7, #4
 8004844:	2200      	movs	r2, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fbce 	bl	8002fe8 <xQueueReceive>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	f47f af26 	bne.w	80046a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	3730      	adds	r7, #48	@ 0x30
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000dd8 	.word	0x20000dd8

08004864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800486a:	e049      	b.n	8004900 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800486c:	4b2e      	ldr	r3, [pc, #184]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004876:	4b2c      	ldr	r3, [pc, #176]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe f89f 	bl	80029c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d02f      	beq.n	8004900 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d90e      	bls.n	80048d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048be:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe f844 	bl	8002956 <vListInsert>
 80048ce:	e017      	b.n	8004900 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	2100      	movs	r1, #0
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff fd58 	bl	8004390 <xTimerGenericCommand>
 80048e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1b0      	bne.n	800486c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800490a:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <prvSwitchTimerLists+0xc8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <prvSwitchTimerLists+0xc4>)
 8004916:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004918:	4a04      	ldr	r2, [pc, #16]	@ (800492c <prvSwitchTimerLists+0xc8>)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6013      	str	r3, [r2, #0]
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000dd0 	.word	0x20000dd0
 800492c:	20000dd4 	.word	0x20000dd4

08004930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004936:	f000 f96f 	bl	8004c18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800493a:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <prvCheckForValidListAndQueue+0x60>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d120      	bne.n	8004984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004942:	4814      	ldr	r0, [pc, #80]	@ (8004994 <prvCheckForValidListAndQueue+0x64>)
 8004944:	f7fd ffb6 	bl	80028b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004948:	4813      	ldr	r0, [pc, #76]	@ (8004998 <prvCheckForValidListAndQueue+0x68>)
 800494a:	f7fd ffb3 	bl	80028b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800494e:	4b13      	ldr	r3, [pc, #76]	@ (800499c <prvCheckForValidListAndQueue+0x6c>)
 8004950:	4a10      	ldr	r2, [pc, #64]	@ (8004994 <prvCheckForValidListAndQueue+0x64>)
 8004952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004954:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <prvCheckForValidListAndQueue+0x70>)
 8004956:	4a10      	ldr	r2, [pc, #64]	@ (8004998 <prvCheckForValidListAndQueue+0x68>)
 8004958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <prvCheckForValidListAndQueue+0x74>)
 8004960:	4a11      	ldr	r2, [pc, #68]	@ (80049a8 <prvCheckForValidListAndQueue+0x78>)
 8004962:	2110      	movs	r1, #16
 8004964:	200a      	movs	r0, #10
 8004966:	f7fe f8c3 	bl	8002af0 <xQueueGenericCreateStatic>
 800496a:	4603      	mov	r3, r0
 800496c:	4a08      	ldr	r2, [pc, #32]	@ (8004990 <prvCheckForValidListAndQueue+0x60>)
 800496e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <prvCheckForValidListAndQueue+0x60>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <prvCheckForValidListAndQueue+0x60>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	490b      	ldr	r1, [pc, #44]	@ (80049ac <prvCheckForValidListAndQueue+0x7c>)
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fd24 	bl	80033cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004984:	f000 f97a 	bl	8004c7c <vPortExitCritical>
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000dd8 	.word	0x20000dd8
 8004994:	20000da8 	.word	0x20000da8
 8004998:	20000dbc 	.word	0x20000dbc
 800499c:	20000dd0 	.word	0x20000dd0
 80049a0:	20000dd4 	.word	0x20000dd4
 80049a4:	20000e84 	.word	0x20000e84
 80049a8:	20000de4 	.word	0x20000de4
 80049ac:	08005ce4 	.word	0x08005ce4

080049b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b04      	subs	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b04      	subs	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004a14 <pxPortInitialiseStack+0x64>)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b14      	subs	r3, #20
 80049ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3b04      	subs	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f06f 0202 	mvn.w	r2, #2
 80049fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b20      	subs	r3, #32
 8004a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	08004a19 	.word	0x08004a19

08004a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a22:	4b13      	ldr	r3, [pc, #76]	@ (8004a70 <prvTaskExitError+0x58>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d00b      	beq.n	8004a44 <prvTaskExitError+0x2c>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60fb      	str	r3, [r7, #12]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <prvTaskExitError+0x28>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60bb      	str	r3, [r7, #8]
}
 8004a56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a58:	bf00      	nop
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0fc      	beq.n	8004a5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	2000000c 	.word	0x2000000c
	...

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	@ (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b47      	ldr	r3, [pc, #284]	@ (8004bf4 <xPortStartScheduler+0x124>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a47      	ldr	r2, [pc, #284]	@ (8004bf8 <xPortStartScheduler+0x128>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10b      	bne.n	8004af8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <xPortStartScheduler+0x124>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3f      	ldr	r2, [pc, #252]	@ (8004bfc <xPortStartScheduler+0x12c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10b      	bne.n	8004b1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60fb      	str	r3, [r7, #12]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b1a:	4b39      	ldr	r3, [pc, #228]	@ (8004c00 <xPortStartScheduler+0x130>)
 8004b1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	22ff      	movs	r2, #255	@ 0xff
 8004b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b44:	2207      	movs	r2, #7
 8004b46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b48:	e009      	b.n	8004b5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	4a2d      	ldr	r2, [pc, #180]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d0ef      	beq.n	8004b4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b6a:	4b27      	ldr	r3, [pc, #156]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d00b      	beq.n	8004b8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60bb      	str	r3, [r7, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004ba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bac:	4b17      	ldr	r3, [pc, #92]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bc4:	f000 f8da 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <xPortStartScheduler+0x140>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bce:	f000 f8f9 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <xPortStartScheduler+0x144>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c14 <xPortStartScheduler+0x144>)
 8004bd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bde:	f7ff ff63 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004be2:	f7ff f82b 	bl	8003c3c <vTaskSwitchContext>
	prvTaskExitError();
 8004be6:	f7ff ff17 	bl	8004a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e000ed00 	.word	0xe000ed00
 8004bf8:	410fc271 	.word	0x410fc271
 8004bfc:	410fc270 	.word	0x410fc270
 8004c00:	e000e400 	.word	0xe000e400
 8004c04:	20000ed4 	.word	0x20000ed4
 8004c08:	20000ed8 	.word	0x20000ed8
 8004c0c:	e000ed20 	.word	0xe000ed20
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	e000ef34 	.word	0xe000ef34

08004c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a0e      	ldr	r2, [pc, #56]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d110      	bne.n	8004c66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <vPortEnterCritical+0x60>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	603b      	str	r3, [r7, #0]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <vPortEnterCritical+0x4a>
	}
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000000c 	.word	0x2000000c
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <vPortExitCritical+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <vPortExitCritical+0x26>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	607b      	str	r3, [r7, #4]
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <vPortExitCritical+0x50>)
 8004caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <vPortExitCritical+0x50>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <vPortExitCritical+0x44>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f383 8811 	msr	BASEPRI, r3
}
 8004cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7fe ff9c 	bl	8003c3c <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7fe feb9 	bl	8003ac8 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <xPortSysTickHandler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	@ (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d915      	bls.n	8004e16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dea:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <vPortValidateInterruptPriority+0x74>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df4:	4b16      	ldr	r3, [pc, #88]	@ (8004e50 <vPortValidateInterruptPriority+0x78>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	7afa      	ldrb	r2, [r7, #11]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20b      	bcs.n	8004e16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e16:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <vPortValidateInterruptPriority+0x7c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <vPortValidateInterruptPriority+0x80>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d90b      	bls.n	8004e3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	603b      	str	r3, [r7, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <vPortValidateInterruptPriority+0x62>
	}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000e3f0 	.word	0xe000e3f0
 8004e50:	20000ed4 	.word	0x20000ed4
 8004e54:	e000ed0c 	.word	0xe000ed0c
 8004e58:	20000ed8 	.word	0x20000ed8

08004e5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	@ 0x28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e68:	f7fe fd72 	bl	8003950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe0 <pvPortMalloc+0x184>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e74:	f000 f924 	bl	80050c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e78:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <pvPortMalloc+0x188>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f040 8095 	bne.w	8004fb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01e      	beq.n	8004eca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d015      	beq.n	8004eca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f023 0307 	bic.w	r3, r3, #7
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <pvPortMalloc+0x6e>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	617b      	str	r3, [r7, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d06f      	beq.n	8004fb0 <pvPortMalloc+0x154>
 8004ed0:	4b45      	ldr	r3, [pc, #276]	@ (8004fe8 <pvPortMalloc+0x18c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d86a      	bhi.n	8004fb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004eda:	4b44      	ldr	r3, [pc, #272]	@ (8004fec <pvPortMalloc+0x190>)
 8004edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ede:	4b43      	ldr	r3, [pc, #268]	@ (8004fec <pvPortMalloc+0x190>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee4:	e004      	b.n	8004ef0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d903      	bls.n	8004f02 <pvPortMalloc+0xa6>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f1      	bne.n	8004ee6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f02:	4b37      	ldr	r3, [pc, #220]	@ (8004fe0 <pvPortMalloc+0x184>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d051      	beq.n	8004fb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2208      	movs	r2, #8
 8004f12:	4413      	add	r3, r2
 8004f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	2308      	movs	r3, #8
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d920      	bls.n	8004f70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <pvPortMalloc+0xfc>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f6a:	69b8      	ldr	r0, [r7, #24]
 8004f6c:	f000 f90a 	bl	8005184 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <pvPortMalloc+0x18c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <pvPortMalloc+0x18c>)
 8004f7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <pvPortMalloc+0x18c>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff0 <pvPortMalloc+0x194>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d203      	bcs.n	8004f92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f8a:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <pvPortMalloc+0x18c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <pvPortMalloc+0x194>)
 8004f90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <pvPortMalloc+0x188>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fa6:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <pvPortMalloc+0x198>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	4a11      	ldr	r2, [pc, #68]	@ (8004ff4 <pvPortMalloc+0x198>)
 8004fae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fb0:	f7fe fcdc 	bl	800396c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <pvPortMalloc+0x17a>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <pvPortMalloc+0x176>
	return pvReturn;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	@ 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20004ae4 	.word	0x20004ae4
 8004fe4:	20004af8 	.word	0x20004af8
 8004fe8:	20004ae8 	.word	0x20004ae8
 8004fec:	20004adc 	.word	0x20004adc
 8004ff0:	20004aec 	.word	0x20004aec
 8004ff4:	20004af0 	.word	0x20004af0

08004ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04f      	beq.n	80050aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800500a:	2308      	movs	r3, #8
 800500c:	425b      	negs	r3, r3
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <vPortFree+0xbc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <vPortFree+0x46>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <vPortFree+0x66>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	60bb      	str	r3, [r7, #8]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	4b14      	ldr	r3, [pc, #80]	@ (80050b4 <vPortFree+0xbc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11a      	bne.n	80050aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	4b0e      	ldr	r3, [pc, #56]	@ (80050b4 <vPortFree+0xbc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	43db      	mvns	r3, r3
 800507e:	401a      	ands	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005084:	f7fe fc64 	bl	8003950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <vPortFree+0xc0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4413      	add	r3, r2
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <vPortFree+0xc0>)
 8005094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005096:	6938      	ldr	r0, [r7, #16]
 8005098:	f000 f874 	bl	8005184 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <vPortFree+0xc4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a06      	ldr	r2, [pc, #24]	@ (80050bc <vPortFree+0xc4>)
 80050a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050a6:	f7fe fc61 	bl	800396c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20004af8 	.word	0x20004af8
 80050b8:	20004ae8 	.word	0x20004ae8
 80050bc:	20004af4 	.word	0x20004af4

080050c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80050ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050cc:	4b27      	ldr	r3, [pc, #156]	@ (800516c <prvHeapInit+0xac>)
 80050ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3307      	adds	r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	4a1f      	ldr	r2, [pc, #124]	@ (800516c <prvHeapInit+0xac>)
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005170 <prvHeapInit+0xb0>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005170 <prvHeapInit+0xb0>)
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4413      	add	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800510c:	2208      	movs	r2, #8
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <prvHeapInit+0xb4>)
 8005120:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005122:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <prvHeapInit+0xb4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800512a:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <prvHeapInit+0xb4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	1ad2      	subs	r2, r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <prvHeapInit+0xb4>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a0a      	ldr	r2, [pc, #40]	@ (8005178 <prvHeapInit+0xb8>)
 800514e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a09      	ldr	r2, [pc, #36]	@ (800517c <prvHeapInit+0xbc>)
 8005156:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <prvHeapInit+0xc0>)
 800515a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800515e:	601a      	str	r2, [r3, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000edc 	.word	0x20000edc
 8005170:	20004adc 	.word	0x20004adc
 8005174:	20004ae4 	.word	0x20004ae4
 8005178:	20004aec 	.word	0x20004aec
 800517c:	20004ae8 	.word	0x20004ae8
 8005180:	20004af8 	.word	0x20004af8

08005184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800518c:	4b28      	ldr	r3, [pc, #160]	@ (8005230 <prvInsertBlockIntoFreeList+0xac>)
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e002      	b.n	8005198 <prvInsertBlockIntoFreeList+0x14>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d8f7      	bhi.n	8005192 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d108      	bne.n	80051c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d118      	bne.n	800520c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <prvInsertBlockIntoFreeList+0xb0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d00d      	beq.n	8005202 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	441a      	add	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e008      	b.n	8005214 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005202:	4b0c      	ldr	r3, [pc, #48]	@ (8005234 <prvInsertBlockIntoFreeList+0xb0>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e003      	b.n	8005214 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d002      	beq.n	8005222 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20004adc 	.word	0x20004adc
 8005234:	20004ae4 	.word	0x20004ae4

08005238 <siprintf>:
 8005238:	b40e      	push	{r1, r2, r3}
 800523a:	b500      	push	{lr}
 800523c:	b09c      	sub	sp, #112	@ 0x70
 800523e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005240:	9002      	str	r0, [sp, #8]
 8005242:	9006      	str	r0, [sp, #24]
 8005244:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005248:	4809      	ldr	r0, [pc, #36]	@ (8005270 <siprintf+0x38>)
 800524a:	9107      	str	r1, [sp, #28]
 800524c:	9104      	str	r1, [sp, #16]
 800524e:	4909      	ldr	r1, [pc, #36]	@ (8005274 <siprintf+0x3c>)
 8005250:	f853 2b04 	ldr.w	r2, [r3], #4
 8005254:	9105      	str	r1, [sp, #20]
 8005256:	6800      	ldr	r0, [r0, #0]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	a902      	add	r1, sp, #8
 800525c:	f000 f9f8 	bl	8005650 <_svfiprintf_r>
 8005260:	9b02      	ldr	r3, [sp, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	b01c      	add	sp, #112	@ 0x70
 8005268:	f85d eb04 	ldr.w	lr, [sp], #4
 800526c:	b003      	add	sp, #12
 800526e:	4770      	bx	lr
 8005270:	20000010 	.word	0x20000010
 8005274:	ffff0208 	.word	0xffff0208

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <_reclaim_reent>:
 8005288:	4b29      	ldr	r3, [pc, #164]	@ (8005330 <_reclaim_reent+0xa8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4283      	cmp	r3, r0
 800528e:	b570      	push	{r4, r5, r6, lr}
 8005290:	4604      	mov	r4, r0
 8005292:	d04b      	beq.n	800532c <_reclaim_reent+0xa4>
 8005294:	69c3      	ldr	r3, [r0, #28]
 8005296:	b1ab      	cbz	r3, 80052c4 <_reclaim_reent+0x3c>
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	b16b      	cbz	r3, 80052b8 <_reclaim_reent+0x30>
 800529c:	2500      	movs	r5, #0
 800529e:	69e3      	ldr	r3, [r4, #28]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	5959      	ldr	r1, [r3, r5]
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d13b      	bne.n	8005320 <_reclaim_reent+0x98>
 80052a8:	3504      	adds	r5, #4
 80052aa:	2d80      	cmp	r5, #128	@ 0x80
 80052ac:	d1f7      	bne.n	800529e <_reclaim_reent+0x16>
 80052ae:	69e3      	ldr	r3, [r4, #28]
 80052b0:	4620      	mov	r0, r4
 80052b2:	68d9      	ldr	r1, [r3, #12]
 80052b4:	f000 f878 	bl	80053a8 <_free_r>
 80052b8:	69e3      	ldr	r3, [r4, #28]
 80052ba:	6819      	ldr	r1, [r3, #0]
 80052bc:	b111      	cbz	r1, 80052c4 <_reclaim_reent+0x3c>
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f872 	bl	80053a8 <_free_r>
 80052c4:	6961      	ldr	r1, [r4, #20]
 80052c6:	b111      	cbz	r1, 80052ce <_reclaim_reent+0x46>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 f86d 	bl	80053a8 <_free_r>
 80052ce:	69e1      	ldr	r1, [r4, #28]
 80052d0:	b111      	cbz	r1, 80052d8 <_reclaim_reent+0x50>
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f868 	bl	80053a8 <_free_r>
 80052d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80052da:	b111      	cbz	r1, 80052e2 <_reclaim_reent+0x5a>
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 f863 	bl	80053a8 <_free_r>
 80052e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052e4:	b111      	cbz	r1, 80052ec <_reclaim_reent+0x64>
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f85e 	bl	80053a8 <_free_r>
 80052ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80052ee:	b111      	cbz	r1, 80052f6 <_reclaim_reent+0x6e>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 f859 	bl	80053a8 <_free_r>
 80052f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80052f8:	b111      	cbz	r1, 8005300 <_reclaim_reent+0x78>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f854 	bl	80053a8 <_free_r>
 8005300:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005302:	b111      	cbz	r1, 800530a <_reclaim_reent+0x82>
 8005304:	4620      	mov	r0, r4
 8005306:	f000 f84f 	bl	80053a8 <_free_r>
 800530a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800530c:	b111      	cbz	r1, 8005314 <_reclaim_reent+0x8c>
 800530e:	4620      	mov	r0, r4
 8005310:	f000 f84a 	bl	80053a8 <_free_r>
 8005314:	6a23      	ldr	r3, [r4, #32]
 8005316:	b14b      	cbz	r3, 800532c <_reclaim_reent+0xa4>
 8005318:	4620      	mov	r0, r4
 800531a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800531e:	4718      	bx	r3
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	f000 f840 	bl	80053a8 <_free_r>
 8005328:	4631      	mov	r1, r6
 800532a:	e7bb      	b.n	80052a4 <_reclaim_reent+0x1c>
 800532c:	bd70      	pop	{r4, r5, r6, pc}
 800532e:	bf00      	nop
 8005330:	20000010 	.word	0x20000010

08005334 <__errno>:
 8005334:	4b01      	ldr	r3, [pc, #4]	@ (800533c <__errno+0x8>)
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000010 	.word	0x20000010

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4d0d      	ldr	r5, [pc, #52]	@ (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	@ (800537c <__libc_init_array+0x3c>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2600      	movs	r6, #0
 800534c:	42a6      	cmp	r6, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4d0b      	ldr	r5, [pc, #44]	@ (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	@ (8005384 <__libc_init_array+0x44>)
 8005354:	f000 fc66 	bl	8005c24 <_init>
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2600      	movs	r6, #0
 800535e:	42a6      	cmp	r6, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f855 3b04 	ldr.w	r3, [r5], #4
 8005368:	4798      	blx	r3
 800536a:	3601      	adds	r6, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005372:	4798      	blx	r3
 8005374:	3601      	adds	r6, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	08005d40 	.word	0x08005d40
 800537c:	08005d40 	.word	0x08005d40
 8005380:	08005d40 	.word	0x08005d40
 8005384:	08005d44 	.word	0x08005d44

08005388 <__retarget_lock_acquire_recursive>:
 8005388:	4770      	bx	lr

0800538a <__retarget_lock_release_recursive>:
 800538a:	4770      	bx	lr

0800538c <memcpy>:
 800538c:	440a      	add	r2, r1
 800538e:	4291      	cmp	r1, r2
 8005390:	f100 33ff 	add.w	r3, r0, #4294967295
 8005394:	d100      	bne.n	8005398 <memcpy+0xc>
 8005396:	4770      	bx	lr
 8005398:	b510      	push	{r4, lr}
 800539a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a2:	4291      	cmp	r1, r2
 80053a4:	d1f9      	bne.n	800539a <memcpy+0xe>
 80053a6:	bd10      	pop	{r4, pc}

080053a8 <_free_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4605      	mov	r5, r0
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d041      	beq.n	8005434 <_free_r+0x8c>
 80053b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b4:	1f0c      	subs	r4, r1, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bfb8      	it	lt
 80053ba:	18e4      	addlt	r4, r4, r3
 80053bc:	f000 f8e0 	bl	8005580 <__malloc_lock>
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <_free_r+0x90>)
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	b933      	cbnz	r3, 80053d4 <_free_r+0x2c>
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	4628      	mov	r0, r5
 80053cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d0:	f000 b8dc 	b.w	800558c <__malloc_unlock>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d908      	bls.n	80053ea <_free_r+0x42>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf01      	itttt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	e7ed      	b.n	80053c6 <_free_r+0x1e>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x4c>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x42>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1850      	adds	r0, r2, r1
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x6c>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	1850      	adds	r0, r2, r1
 8005402:	4283      	cmp	r3, r0
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1e0      	bne.n	80053ca <_free_r+0x22>
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4408      	add	r0, r1
 8005410:	6010      	str	r0, [r2, #0]
 8005412:	e7da      	b.n	80053ca <_free_r+0x22>
 8005414:	d902      	bls.n	800541c <_free_r+0x74>
 8005416:	230c      	movs	r3, #12
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	e7d6      	b.n	80053ca <_free_r+0x22>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7ca      	b.n	80053ca <_free_r+0x22>
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20004c40 	.word	0x20004c40

0800543c <sbrk_aligned>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4e0f      	ldr	r6, [pc, #60]	@ (800547c <sbrk_aligned+0x40>)
 8005440:	460c      	mov	r4, r1
 8005442:	6831      	ldr	r1, [r6, #0]
 8005444:	4605      	mov	r5, r0
 8005446:	b911      	cbnz	r1, 800544e <sbrk_aligned+0x12>
 8005448:	f000 fba6 	bl	8005b98 <_sbrk_r>
 800544c:	6030      	str	r0, [r6, #0]
 800544e:	4621      	mov	r1, r4
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fba1 	bl	8005b98 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d103      	bne.n	8005462 <sbrk_aligned+0x26>
 800545a:	f04f 34ff 	mov.w	r4, #4294967295
 800545e:	4620      	mov	r0, r4
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	1cc4      	adds	r4, r0, #3
 8005464:	f024 0403 	bic.w	r4, r4, #3
 8005468:	42a0      	cmp	r0, r4
 800546a:	d0f8      	beq.n	800545e <sbrk_aligned+0x22>
 800546c:	1a21      	subs	r1, r4, r0
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fb92 	bl	8005b98 <_sbrk_r>
 8005474:	3001      	adds	r0, #1
 8005476:	d1f2      	bne.n	800545e <sbrk_aligned+0x22>
 8005478:	e7ef      	b.n	800545a <sbrk_aligned+0x1e>
 800547a:	bf00      	nop
 800547c:	20004c3c 	.word	0x20004c3c

08005480 <_malloc_r>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	1ccd      	adds	r5, r1, #3
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	2d00      	cmp	r5, #0
 8005494:	4606      	mov	r6, r0
 8005496:	db01      	blt.n	800549c <_malloc_r+0x1c>
 8005498:	42a9      	cmp	r1, r5
 800549a:	d904      	bls.n	80054a6 <_malloc_r+0x26>
 800549c:	230c      	movs	r3, #12
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800557c <_malloc_r+0xfc>
 80054aa:	f000 f869 	bl	8005580 <__malloc_lock>
 80054ae:	f8d8 3000 	ldr.w	r3, [r8]
 80054b2:	461c      	mov	r4, r3
 80054b4:	bb44      	cbnz	r4, 8005508 <_malloc_r+0x88>
 80054b6:	4629      	mov	r1, r5
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7ff ffbf 	bl	800543c <sbrk_aligned>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	4604      	mov	r4, r0
 80054c2:	d158      	bne.n	8005576 <_malloc_r+0xf6>
 80054c4:	f8d8 4000 	ldr.w	r4, [r8]
 80054c8:	4627      	mov	r7, r4
 80054ca:	2f00      	cmp	r7, #0
 80054cc:	d143      	bne.n	8005556 <_malloc_r+0xd6>
 80054ce:	2c00      	cmp	r4, #0
 80054d0:	d04b      	beq.n	800556a <_malloc_r+0xea>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	eb04 0903 	add.w	r9, r4, r3
 80054dc:	f000 fb5c 	bl	8005b98 <_sbrk_r>
 80054e0:	4581      	cmp	r9, r0
 80054e2:	d142      	bne.n	800556a <_malloc_r+0xea>
 80054e4:	6821      	ldr	r1, [r4, #0]
 80054e6:	1a6d      	subs	r5, r5, r1
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffa6 	bl	800543c <sbrk_aligned>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d03a      	beq.n	800556a <_malloc_r+0xea>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	442b      	add	r3, r5
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	f8d8 3000 	ldr.w	r3, [r8]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	bb62      	cbnz	r2, 800555c <_malloc_r+0xdc>
 8005502:	f8c8 7000 	str.w	r7, [r8]
 8005506:	e00f      	b.n	8005528 <_malloc_r+0xa8>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	1b52      	subs	r2, r2, r5
 800550c:	d420      	bmi.n	8005550 <_malloc_r+0xd0>
 800550e:	2a0b      	cmp	r2, #11
 8005510:	d917      	bls.n	8005542 <_malloc_r+0xc2>
 8005512:	1961      	adds	r1, r4, r5
 8005514:	42a3      	cmp	r3, r4
 8005516:	6025      	str	r5, [r4, #0]
 8005518:	bf18      	it	ne
 800551a:	6059      	strne	r1, [r3, #4]
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	bf08      	it	eq
 8005520:	f8c8 1000 	streq.w	r1, [r8]
 8005524:	5162      	str	r2, [r4, r5]
 8005526:	604b      	str	r3, [r1, #4]
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f82f 	bl	800558c <__malloc_unlock>
 800552e:	f104 000b 	add.w	r0, r4, #11
 8005532:	1d23      	adds	r3, r4, #4
 8005534:	f020 0007 	bic.w	r0, r0, #7
 8005538:	1ac2      	subs	r2, r0, r3
 800553a:	bf1c      	itt	ne
 800553c:	1a1b      	subne	r3, r3, r0
 800553e:	50a3      	strne	r3, [r4, r2]
 8005540:	e7af      	b.n	80054a2 <_malloc_r+0x22>
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	42a3      	cmp	r3, r4
 8005546:	bf0c      	ite	eq
 8005548:	f8c8 2000 	streq.w	r2, [r8]
 800554c:	605a      	strne	r2, [r3, #4]
 800554e:	e7eb      	b.n	8005528 <_malloc_r+0xa8>
 8005550:	4623      	mov	r3, r4
 8005552:	6864      	ldr	r4, [r4, #4]
 8005554:	e7ae      	b.n	80054b4 <_malloc_r+0x34>
 8005556:	463c      	mov	r4, r7
 8005558:	687f      	ldr	r7, [r7, #4]
 800555a:	e7b6      	b.n	80054ca <_malloc_r+0x4a>
 800555c:	461a      	mov	r2, r3
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	d1fb      	bne.n	800555c <_malloc_r+0xdc>
 8005564:	2300      	movs	r3, #0
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	e7de      	b.n	8005528 <_malloc_r+0xa8>
 800556a:	230c      	movs	r3, #12
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	4630      	mov	r0, r6
 8005570:	f000 f80c 	bl	800558c <__malloc_unlock>
 8005574:	e794      	b.n	80054a0 <_malloc_r+0x20>
 8005576:	6005      	str	r5, [r0, #0]
 8005578:	e7d6      	b.n	8005528 <_malloc_r+0xa8>
 800557a:	bf00      	nop
 800557c:	20004c40 	.word	0x20004c40

08005580 <__malloc_lock>:
 8005580:	4801      	ldr	r0, [pc, #4]	@ (8005588 <__malloc_lock+0x8>)
 8005582:	f7ff bf01 	b.w	8005388 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	20004c38 	.word	0x20004c38

0800558c <__malloc_unlock>:
 800558c:	4801      	ldr	r0, [pc, #4]	@ (8005594 <__malloc_unlock+0x8>)
 800558e:	f7ff befc 	b.w	800538a <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	20004c38 	.word	0x20004c38

08005598 <__ssputs_r>:
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	688e      	ldr	r6, [r1, #8]
 800559e:	461f      	mov	r7, r3
 80055a0:	42be      	cmp	r6, r7
 80055a2:	680b      	ldr	r3, [r1, #0]
 80055a4:	4682      	mov	sl, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4690      	mov	r8, r2
 80055aa:	d82d      	bhi.n	8005608 <__ssputs_r+0x70>
 80055ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055b4:	d026      	beq.n	8005604 <__ssputs_r+0x6c>
 80055b6:	6965      	ldr	r5, [r4, #20]
 80055b8:	6909      	ldr	r1, [r1, #16]
 80055ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055be:	eba3 0901 	sub.w	r9, r3, r1
 80055c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055c6:	1c7b      	adds	r3, r7, #1
 80055c8:	444b      	add	r3, r9
 80055ca:	106d      	asrs	r5, r5, #1
 80055cc:	429d      	cmp	r5, r3
 80055ce:	bf38      	it	cc
 80055d0:	461d      	movcc	r5, r3
 80055d2:	0553      	lsls	r3, r2, #21
 80055d4:	d527      	bpl.n	8005626 <__ssputs_r+0x8e>
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7ff ff52 	bl	8005480 <_malloc_r>
 80055dc:	4606      	mov	r6, r0
 80055de:	b360      	cbz	r0, 800563a <__ssputs_r+0xa2>
 80055e0:	6921      	ldr	r1, [r4, #16]
 80055e2:	464a      	mov	r2, r9
 80055e4:	f7ff fed2 	bl	800538c <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	6165      	str	r5, [r4, #20]
 80055f8:	444e      	add	r6, r9
 80055fa:	eba5 0509 	sub.w	r5, r5, r9
 80055fe:	6026      	str	r6, [r4, #0]
 8005600:	60a5      	str	r5, [r4, #8]
 8005602:	463e      	mov	r6, r7
 8005604:	42be      	cmp	r6, r7
 8005606:	d900      	bls.n	800560a <__ssputs_r+0x72>
 8005608:	463e      	mov	r6, r7
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	4632      	mov	r2, r6
 800560e:	4641      	mov	r1, r8
 8005610:	f000 faa8 	bl	8005b64 <memmove>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	1b9b      	subs	r3, r3, r6
 8005618:	60a3      	str	r3, [r4, #8]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4433      	add	r3, r6
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	2000      	movs	r0, #0
 8005622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005626:	462a      	mov	r2, r5
 8005628:	f000 fac6 	bl	8005bb8 <_realloc_r>
 800562c:	4606      	mov	r6, r0
 800562e:	2800      	cmp	r0, #0
 8005630:	d1e0      	bne.n	80055f4 <__ssputs_r+0x5c>
 8005632:	6921      	ldr	r1, [r4, #16]
 8005634:	4650      	mov	r0, sl
 8005636:	f7ff feb7 	bl	80053a8 <_free_r>
 800563a:	230c      	movs	r3, #12
 800563c:	f8ca 3000 	str.w	r3, [sl]
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e7e9      	b.n	8005622 <__ssputs_r+0x8a>
	...

08005650 <_svfiprintf_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	4698      	mov	r8, r3
 8005656:	898b      	ldrh	r3, [r1, #12]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	b09d      	sub	sp, #116	@ 0x74
 800565c:	4607      	mov	r7, r0
 800565e:	460d      	mov	r5, r1
 8005660:	4614      	mov	r4, r2
 8005662:	d510      	bpl.n	8005686 <_svfiprintf_r+0x36>
 8005664:	690b      	ldr	r3, [r1, #16]
 8005666:	b973      	cbnz	r3, 8005686 <_svfiprintf_r+0x36>
 8005668:	2140      	movs	r1, #64	@ 0x40
 800566a:	f7ff ff09 	bl	8005480 <_malloc_r>
 800566e:	6028      	str	r0, [r5, #0]
 8005670:	6128      	str	r0, [r5, #16]
 8005672:	b930      	cbnz	r0, 8005682 <_svfiprintf_r+0x32>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b01d      	add	sp, #116	@ 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	2340      	movs	r3, #64	@ 0x40
 8005684:	616b      	str	r3, [r5, #20]
 8005686:	2300      	movs	r3, #0
 8005688:	9309      	str	r3, [sp, #36]	@ 0x24
 800568a:	2320      	movs	r3, #32
 800568c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005690:	f8cd 800c 	str.w	r8, [sp, #12]
 8005694:	2330      	movs	r3, #48	@ 0x30
 8005696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005834 <_svfiprintf_r+0x1e4>
 800569a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800569e:	f04f 0901 	mov.w	r9, #1
 80056a2:	4623      	mov	r3, r4
 80056a4:	469a      	mov	sl, r3
 80056a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056aa:	b10a      	cbz	r2, 80056b0 <_svfiprintf_r+0x60>
 80056ac:	2a25      	cmp	r2, #37	@ 0x25
 80056ae:	d1f9      	bne.n	80056a4 <_svfiprintf_r+0x54>
 80056b0:	ebba 0b04 	subs.w	fp, sl, r4
 80056b4:	d00b      	beq.n	80056ce <_svfiprintf_r+0x7e>
 80056b6:	465b      	mov	r3, fp
 80056b8:	4622      	mov	r2, r4
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ff6b 	bl	8005598 <__ssputs_r>
 80056c2:	3001      	adds	r0, #1
 80056c4:	f000 80a7 	beq.w	8005816 <_svfiprintf_r+0x1c6>
 80056c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ca:	445a      	add	r2, fp
 80056cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 809f 	beq.w	8005816 <_svfiprintf_r+0x1c6>
 80056d8:	2300      	movs	r3, #0
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e2:	f10a 0a01 	add.w	sl, sl, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80056f0:	4654      	mov	r4, sl
 80056f2:	2205      	movs	r2, #5
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	484e      	ldr	r0, [pc, #312]	@ (8005834 <_svfiprintf_r+0x1e4>)
 80056fa:	f7fa fd71 	bl	80001e0 <memchr>
 80056fe:	9a04      	ldr	r2, [sp, #16]
 8005700:	b9d8      	cbnz	r0, 800573a <_svfiprintf_r+0xea>
 8005702:	06d0      	lsls	r0, r2, #27
 8005704:	bf44      	itt	mi
 8005706:	2320      	movmi	r3, #32
 8005708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570c:	0711      	lsls	r1, r2, #28
 800570e:	bf44      	itt	mi
 8005710:	232b      	movmi	r3, #43	@ 0x2b
 8005712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005716:	f89a 3000 	ldrb.w	r3, [sl]
 800571a:	2b2a      	cmp	r3, #42	@ 0x2a
 800571c:	d015      	beq.n	800574a <_svfiprintf_r+0xfa>
 800571e:	9a07      	ldr	r2, [sp, #28]
 8005720:	4654      	mov	r4, sl
 8005722:	2000      	movs	r0, #0
 8005724:	f04f 0c0a 	mov.w	ip, #10
 8005728:	4621      	mov	r1, r4
 800572a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800572e:	3b30      	subs	r3, #48	@ 0x30
 8005730:	2b09      	cmp	r3, #9
 8005732:	d94b      	bls.n	80057cc <_svfiprintf_r+0x17c>
 8005734:	b1b0      	cbz	r0, 8005764 <_svfiprintf_r+0x114>
 8005736:	9207      	str	r2, [sp, #28]
 8005738:	e014      	b.n	8005764 <_svfiprintf_r+0x114>
 800573a:	eba0 0308 	sub.w	r3, r0, r8
 800573e:	fa09 f303 	lsl.w	r3, r9, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	46a2      	mov	sl, r4
 8005748:	e7d2      	b.n	80056f0 <_svfiprintf_r+0xa0>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	1d19      	adds	r1, r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	9103      	str	r1, [sp, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	bfbb      	ittet	lt
 8005756:	425b      	neglt	r3, r3
 8005758:	f042 0202 	orrlt.w	r2, r2, #2
 800575c:	9307      	strge	r3, [sp, #28]
 800575e:	9307      	strlt	r3, [sp, #28]
 8005760:	bfb8      	it	lt
 8005762:	9204      	strlt	r2, [sp, #16]
 8005764:	7823      	ldrb	r3, [r4, #0]
 8005766:	2b2e      	cmp	r3, #46	@ 0x2e
 8005768:	d10a      	bne.n	8005780 <_svfiprintf_r+0x130>
 800576a:	7863      	ldrb	r3, [r4, #1]
 800576c:	2b2a      	cmp	r3, #42	@ 0x2a
 800576e:	d132      	bne.n	80057d6 <_svfiprintf_r+0x186>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9203      	str	r2, [sp, #12]
 8005778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800577c:	3402      	adds	r4, #2
 800577e:	9305      	str	r3, [sp, #20]
 8005780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005844 <_svfiprintf_r+0x1f4>
 8005784:	7821      	ldrb	r1, [r4, #0]
 8005786:	2203      	movs	r2, #3
 8005788:	4650      	mov	r0, sl
 800578a:	f7fa fd29 	bl	80001e0 <memchr>
 800578e:	b138      	cbz	r0, 80057a0 <_svfiprintf_r+0x150>
 8005790:	9b04      	ldr	r3, [sp, #16]
 8005792:	eba0 000a 	sub.w	r0, r0, sl
 8005796:	2240      	movs	r2, #64	@ 0x40
 8005798:	4082      	lsls	r2, r0
 800579a:	4313      	orrs	r3, r2
 800579c:	3401      	adds	r4, #1
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	4824      	ldr	r0, [pc, #144]	@ (8005838 <_svfiprintf_r+0x1e8>)
 80057a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057aa:	2206      	movs	r2, #6
 80057ac:	f7fa fd18 	bl	80001e0 <memchr>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d036      	beq.n	8005822 <_svfiprintf_r+0x1d2>
 80057b4:	4b21      	ldr	r3, [pc, #132]	@ (800583c <_svfiprintf_r+0x1ec>)
 80057b6:	bb1b      	cbnz	r3, 8005800 <_svfiprintf_r+0x1b0>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	3307      	adds	r3, #7
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	3308      	adds	r3, #8
 80057c2:	9303      	str	r3, [sp, #12]
 80057c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c6:	4433      	add	r3, r6
 80057c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ca:	e76a      	b.n	80056a2 <_svfiprintf_r+0x52>
 80057cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d0:	460c      	mov	r4, r1
 80057d2:	2001      	movs	r0, #1
 80057d4:	e7a8      	b.n	8005728 <_svfiprintf_r+0xd8>
 80057d6:	2300      	movs	r3, #0
 80057d8:	3401      	adds	r4, #1
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	4619      	mov	r1, r3
 80057de:	f04f 0c0a 	mov.w	ip, #10
 80057e2:	4620      	mov	r0, r4
 80057e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e8:	3a30      	subs	r2, #48	@ 0x30
 80057ea:	2a09      	cmp	r2, #9
 80057ec:	d903      	bls.n	80057f6 <_svfiprintf_r+0x1a6>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c6      	beq.n	8005780 <_svfiprintf_r+0x130>
 80057f2:	9105      	str	r1, [sp, #20]
 80057f4:	e7c4      	b.n	8005780 <_svfiprintf_r+0x130>
 80057f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057fa:	4604      	mov	r4, r0
 80057fc:	2301      	movs	r3, #1
 80057fe:	e7f0      	b.n	80057e2 <_svfiprintf_r+0x192>
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	462a      	mov	r2, r5
 8005806:	4b0e      	ldr	r3, [pc, #56]	@ (8005840 <_svfiprintf_r+0x1f0>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4638      	mov	r0, r7
 800580c:	f3af 8000 	nop.w
 8005810:	1c42      	adds	r2, r0, #1
 8005812:	4606      	mov	r6, r0
 8005814:	d1d6      	bne.n	80057c4 <_svfiprintf_r+0x174>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	065b      	lsls	r3, r3, #25
 800581a:	f53f af2d 	bmi.w	8005678 <_svfiprintf_r+0x28>
 800581e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005820:	e72c      	b.n	800567c <_svfiprintf_r+0x2c>
 8005822:	ab03      	add	r3, sp, #12
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	462a      	mov	r2, r5
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <_svfiprintf_r+0x1f0>)
 800582a:	a904      	add	r1, sp, #16
 800582c:	4638      	mov	r0, r7
 800582e:	f000 f879 	bl	8005924 <_printf_i>
 8005832:	e7ed      	b.n	8005810 <_svfiprintf_r+0x1c0>
 8005834:	08005d04 	.word	0x08005d04
 8005838:	08005d0e 	.word	0x08005d0e
 800583c:	00000000 	.word	0x00000000
 8005840:	08005599 	.word	0x08005599
 8005844:	08005d0a 	.word	0x08005d0a

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4698      	mov	r8, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005858:	4293      	cmp	r3, r2
 800585a:	bfb8      	it	lt
 800585c:	4613      	movlt	r3, r2
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005864:	4607      	mov	r7, r0
 8005866:	460c      	mov	r4, r1
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc26      	bgt.n	80058de <_printf_common+0x96>
 8005890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	3b00      	subs	r3, #0
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42b      	bmi.n	80058f8 <_printf_common+0xb0>
 80058a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a4:	4641      	mov	r1, r8
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c8      	blx	r9
 80058aa:	3001      	adds	r0, #1
 80058ac:	d01e      	beq.n	80058ec <_printf_common+0xa4>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf02      	ittt	eq
 80058ba:	68e5      	ldreq	r5, [r4, #12]
 80058bc:	6833      	ldreq	r3, [r6, #0]
 80058be:	1aed      	subeq	r5, r5, r3
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	bf0c      	ite	eq
 80058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c8:	2500      	movne	r5, #0
 80058ca:	4293      	cmp	r3, r2
 80058cc:	bfc4      	itt	gt
 80058ce:	1a9b      	subgt	r3, r3, r2
 80058d0:	18ed      	addgt	r5, r5, r3
 80058d2:	2600      	movs	r6, #0
 80058d4:	341a      	adds	r4, #26
 80058d6:	42b5      	cmp	r5, r6
 80058d8:	d11a      	bne.n	8005910 <_printf_common+0xc8>
 80058da:	2000      	movs	r0, #0
 80058dc:	e008      	b.n	80058f0 <_printf_common+0xa8>
 80058de:	2301      	movs	r3, #1
 80058e0:	4652      	mov	r2, sl
 80058e2:	4641      	mov	r1, r8
 80058e4:	4638      	mov	r0, r7
 80058e6:	47c8      	blx	r9
 80058e8:	3001      	adds	r0, #1
 80058ea:	d103      	bne.n	80058f4 <_printf_common+0xac>
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7c6      	b.n	8005886 <_printf_common+0x3e>
 80058f8:	18e1      	adds	r1, r4, r3
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	2030      	movs	r0, #48	@ 0x30
 80058fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005902:	4422      	add	r2, r4
 8005904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800590c:	3302      	adds	r3, #2
 800590e:	e7c7      	b.n	80058a0 <_printf_common+0x58>
 8005910:	2301      	movs	r3, #1
 8005912:	4622      	mov	r2, r4
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d0e6      	beq.n	80058ec <_printf_common+0xa4>
 800591e:	3601      	adds	r6, #1
 8005920:	e7d9      	b.n	80058d6 <_printf_common+0x8e>
	...

08005924 <_printf_i>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	7e0f      	ldrb	r7, [r1, #24]
 800592a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800592c:	2f78      	cmp	r7, #120	@ 0x78
 800592e:	4691      	mov	r9, r2
 8005930:	4680      	mov	r8, r0
 8005932:	460c      	mov	r4, r1
 8005934:	469a      	mov	sl, r3
 8005936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800593a:	d807      	bhi.n	800594c <_printf_i+0x28>
 800593c:	2f62      	cmp	r7, #98	@ 0x62
 800593e:	d80a      	bhi.n	8005956 <_printf_i+0x32>
 8005940:	2f00      	cmp	r7, #0
 8005942:	f000 80d2 	beq.w	8005aea <_printf_i+0x1c6>
 8005946:	2f58      	cmp	r7, #88	@ 0x58
 8005948:	f000 80b9 	beq.w	8005abe <_printf_i+0x19a>
 800594c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005954:	e03a      	b.n	80059cc <_printf_i+0xa8>
 8005956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800595a:	2b15      	cmp	r3, #21
 800595c:	d8f6      	bhi.n	800594c <_printf_i+0x28>
 800595e:	a101      	add	r1, pc, #4	@ (adr r1, 8005964 <_printf_i+0x40>)
 8005960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059d1 	.word	0x080059d1
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800594d 	.word	0x0800594d
 8005974:	0800594d 	.word	0x0800594d
 8005978:	0800594d 	.word	0x0800594d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800594d 	.word	0x0800594d
 8005984:	0800594d 	.word	0x0800594d
 8005988:	0800594d 	.word	0x0800594d
 800598c:	0800594d 	.word	0x0800594d
 8005990:	08005ad1 	.word	0x08005ad1
 8005994:	080059fb 	.word	0x080059fb
 8005998:	08005a8b 	.word	0x08005a8b
 800599c:	0800594d 	.word	0x0800594d
 80059a0:	0800594d 	.word	0x0800594d
 80059a4:	08005af3 	.word	0x08005af3
 80059a8:	0800594d 	.word	0x0800594d
 80059ac:	080059fb 	.word	0x080059fb
 80059b0:	0800594d 	.word	0x0800594d
 80059b4:	0800594d 	.word	0x0800594d
 80059b8:	08005a93 	.word	0x08005a93
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6032      	str	r2, [r6, #0]
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059cc:	2301      	movs	r3, #1
 80059ce:	e09d      	b.n	8005b0c <_printf_i+0x1e8>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	6031      	str	r1, [r6, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xbc>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e003      	b.n	80059e8 <_printf_i+0xc4>
 80059e0:	0645      	lsls	r5, r0, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xb8>
 80059e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	da03      	bge.n	80059f4 <_printf_i+0xd0>
 80059ec:	232d      	movs	r3, #45	@ 0x2d
 80059ee:	426d      	negs	r5, r5
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f4:	4859      	ldr	r0, [pc, #356]	@ (8005b5c <_printf_i+0x238>)
 80059f6:	230a      	movs	r3, #10
 80059f8:	e011      	b.n	8005a1e <_printf_i+0xfa>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	0608      	lsls	r0, r1, #24
 8005a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a04:	d402      	bmi.n	8005a0c <_printf_i+0xe8>
 8005a06:	0649      	lsls	r1, r1, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2ad      	uxthmi	r5, r5
 8005a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0e:	4853      	ldr	r0, [pc, #332]	@ (8005b5c <_printf_i+0x238>)
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	bf14      	ite	ne
 8005a14:	230a      	movne	r3, #10
 8005a16:	2308      	moveq	r3, #8
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1e:	6866      	ldr	r6, [r4, #4]
 8005a20:	60a6      	str	r6, [r4, #8]
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	bfa2      	ittt	ge
 8005a26:	6821      	ldrge	r1, [r4, #0]
 8005a28:	f021 0104 	bicge.w	r1, r1, #4
 8005a2c:	6021      	strge	r1, [r4, #0]
 8005a2e:	b90d      	cbnz	r5, 8005a34 <_printf_i+0x110>
 8005a30:	2e00      	cmp	r6, #0
 8005a32:	d04b      	beq.n	8005acc <_printf_i+0x1a8>
 8005a34:	4616      	mov	r6, r2
 8005a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a3e:	5dc7      	ldrb	r7, [r0, r7]
 8005a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a44:	462f      	mov	r7, r5
 8005a46:	42bb      	cmp	r3, r7
 8005a48:	460d      	mov	r5, r1
 8005a4a:	d9f4      	bls.n	8005a36 <_printf_i+0x112>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d10b      	bne.n	8005a68 <_printf_i+0x144>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	d508      	bpl.n	8005a68 <_printf_i+0x144>
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6861      	ldr	r1, [r4, #4]
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	bfde      	ittt	le
 8005a5e:	2330      	movle	r3, #48	@ 0x30
 8005a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a68:	1b92      	subs	r2, r2, r6
 8005a6a:	6122      	str	r2, [r4, #16]
 8005a6c:	f8cd a000 	str.w	sl, [sp]
 8005a70:	464b      	mov	r3, r9
 8005a72:	aa03      	add	r2, sp, #12
 8005a74:	4621      	mov	r1, r4
 8005a76:	4640      	mov	r0, r8
 8005a78:	f7ff fee6 	bl	8005848 <_printf_common>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d14a      	bne.n	8005b16 <_printf_i+0x1f2>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	b004      	add	sp, #16
 8005a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f043 0320 	orr.w	r3, r3, #32
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	4833      	ldr	r0, [pc, #204]	@ (8005b60 <_printf_i+0x23c>)
 8005a94:	2778      	movs	r7, #120	@ 0x78
 8005a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	6831      	ldr	r1, [r6, #0]
 8005a9e:	061f      	lsls	r7, r3, #24
 8005aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa4:	d402      	bmi.n	8005aac <_printf_i+0x188>
 8005aa6:	065f      	lsls	r7, r3, #25
 8005aa8:	bf48      	it	mi
 8005aaa:	b2ad      	uxthmi	r5, r5
 8005aac:	6031      	str	r1, [r6, #0]
 8005aae:	07d9      	lsls	r1, r3, #31
 8005ab0:	bf44      	itt	mi
 8005ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab6:	6023      	strmi	r3, [r4, #0]
 8005ab8:	b11d      	cbz	r5, 8005ac2 <_printf_i+0x19e>
 8005aba:	2310      	movs	r3, #16
 8005abc:	e7ac      	b.n	8005a18 <_printf_i+0xf4>
 8005abe:	4827      	ldr	r0, [pc, #156]	@ (8005b5c <_printf_i+0x238>)
 8005ac0:	e7e9      	b.n	8005a96 <_printf_i+0x172>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f023 0320 	bic.w	r3, r3, #32
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	e7f6      	b.n	8005aba <_printf_i+0x196>
 8005acc:	4616      	mov	r6, r2
 8005ace:	e7bd      	b.n	8005a4c <_printf_i+0x128>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	6825      	ldr	r5, [r4, #0]
 8005ad4:	6961      	ldr	r1, [r4, #20]
 8005ad6:	1d18      	adds	r0, r3, #4
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	062e      	lsls	r6, r5, #24
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	d501      	bpl.n	8005ae4 <_printf_i+0x1c0>
 8005ae0:	6019      	str	r1, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <_printf_i+0x1c6>
 8005ae4:	0668      	lsls	r0, r5, #25
 8005ae6:	d5fb      	bpl.n	8005ae0 <_printf_i+0x1bc>
 8005ae8:	8019      	strh	r1, [r3, #0]
 8005aea:	2300      	movs	r3, #0
 8005aec:	6123      	str	r3, [r4, #16]
 8005aee:	4616      	mov	r6, r2
 8005af0:	e7bc      	b.n	8005a6c <_printf_i+0x148>
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	6032      	str	r2, [r6, #0]
 8005af8:	681e      	ldr	r6, [r3, #0]
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	2100      	movs	r1, #0
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7fa fb6e 	bl	80001e0 <memchr>
 8005b04:	b108      	cbz	r0, 8005b0a <_printf_i+0x1e6>
 8005b06:	1b80      	subs	r0, r0, r6
 8005b08:	6060      	str	r0, [r4, #4]
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b14:	e7aa      	b.n	8005a6c <_printf_i+0x148>
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	4632      	mov	r2, r6
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	47d0      	blx	sl
 8005b20:	3001      	adds	r0, #1
 8005b22:	d0ad      	beq.n	8005a80 <_printf_i+0x15c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	079b      	lsls	r3, r3, #30
 8005b28:	d413      	bmi.n	8005b52 <_printf_i+0x22e>
 8005b2a:	68e0      	ldr	r0, [r4, #12]
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	4298      	cmp	r0, r3
 8005b30:	bfb8      	it	lt
 8005b32:	4618      	movlt	r0, r3
 8005b34:	e7a6      	b.n	8005a84 <_printf_i+0x160>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4632      	mov	r2, r6
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	47d0      	blx	sl
 8005b40:	3001      	adds	r0, #1
 8005b42:	d09d      	beq.n	8005a80 <_printf_i+0x15c>
 8005b44:	3501      	adds	r5, #1
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	9903      	ldr	r1, [sp, #12]
 8005b4a:	1a5b      	subs	r3, r3, r1
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dcf2      	bgt.n	8005b36 <_printf_i+0x212>
 8005b50:	e7eb      	b.n	8005b2a <_printf_i+0x206>
 8005b52:	2500      	movs	r5, #0
 8005b54:	f104 0619 	add.w	r6, r4, #25
 8005b58:	e7f5      	b.n	8005b46 <_printf_i+0x222>
 8005b5a:	bf00      	nop
 8005b5c:	08005d15 	.word	0x08005d15
 8005b60:	08005d26 	.word	0x08005d26

08005b64 <memmove>:
 8005b64:	4288      	cmp	r0, r1
 8005b66:	b510      	push	{r4, lr}
 8005b68:	eb01 0402 	add.w	r4, r1, r2
 8005b6c:	d902      	bls.n	8005b74 <memmove+0x10>
 8005b6e:	4284      	cmp	r4, r0
 8005b70:	4623      	mov	r3, r4
 8005b72:	d807      	bhi.n	8005b84 <memmove+0x20>
 8005b74:	1e43      	subs	r3, r0, #1
 8005b76:	42a1      	cmp	r1, r4
 8005b78:	d008      	beq.n	8005b8c <memmove+0x28>
 8005b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b82:	e7f8      	b.n	8005b76 <memmove+0x12>
 8005b84:	4402      	add	r2, r0
 8005b86:	4601      	mov	r1, r0
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	d100      	bne.n	8005b8e <memmove+0x2a>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b96:	e7f7      	b.n	8005b88 <memmove+0x24>

08005b98 <_sbrk_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	@ (8005bb4 <_sbrk_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fa ff52 	bl	8000a4c <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_sbrk_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_sbrk_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20004c34 	.word	0x20004c34

08005bb8 <_realloc_r>:
 8005bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	4615      	mov	r5, r2
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	b921      	cbnz	r1, 8005bce <_realloc_r+0x16>
 8005bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	4611      	mov	r1, r2
 8005bca:	f7ff bc59 	b.w	8005480 <_malloc_r>
 8005bce:	b92a      	cbnz	r2, 8005bdc <_realloc_r+0x24>
 8005bd0:	f7ff fbea 	bl	80053a8 <_free_r>
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	f000 f81a 	bl	8005c14 <_malloc_usable_size_r>
 8005be0:	4285      	cmp	r5, r0
 8005be2:	4606      	mov	r6, r0
 8005be4:	d802      	bhi.n	8005bec <_realloc_r+0x34>
 8005be6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005bea:	d8f4      	bhi.n	8005bd6 <_realloc_r+0x1e>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f7ff fc46 	bl	8005480 <_malloc_r>
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d0ec      	beq.n	8005bd4 <_realloc_r+0x1c>
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	4621      	mov	r1, r4
 8005c00:	bf28      	it	cs
 8005c02:	4632      	movcs	r2, r6
 8005c04:	f7ff fbc2 	bl	800538c <memcpy>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7ff fbcc 	bl	80053a8 <_free_r>
 8005c10:	463c      	mov	r4, r7
 8005c12:	e7e0      	b.n	8005bd6 <_realloc_r+0x1e>

08005c14 <_malloc_usable_size_r>:
 8005c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c18:	1f18      	subs	r0, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfbc      	itt	lt
 8005c1e:	580b      	ldrlt	r3, [r1, r0]
 8005c20:	18c0      	addlt	r0, r0, r3
 8005c22:	4770      	bx	lr

08005c24 <_init>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr

08005c30 <_fini>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr
