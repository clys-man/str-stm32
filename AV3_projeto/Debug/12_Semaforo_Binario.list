
12_Semaforo_Binario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b8  080062b8  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c0  080062c0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080062c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  2000006c  08006334  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  08006334  00008c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f62  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003661  00000000  00000000  0001fffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00023660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001008  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000476d  00000000  00000000  00025b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173d7  00000000  00000000  0002a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099cd3  00000000  00000000  00041664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  000db37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e106c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006108 	.word	0x08006108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006108 	.word	0x08006108

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	@ 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2d      	ldr	r3, [pc, #180]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a2c      	ldr	r2, [pc, #176]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f6:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a25      	ldr	r2, [pc, #148]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
 8000512:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a1e      	ldr	r2, [pc, #120]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <MX_GPIO_Init+0xd4>)
 800055c:	f000 fe36 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <MX_GPIO_Init+0xd8>)
 8000578:	f000 fc8c 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057c:	2320      	movs	r3, #32
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_GPIO_Init+0xd4>)
 8000594:	f000 fc7e 	bl	8000e94 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020800 	.word	0x40020800

080005ac <main>:

#define LED GPIO_PIN_5
int counter1, counter2;

int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8


  HAL_Init();
 80005b2:	f000 fb4b 	bl	8000c4c <HAL_Init>

  SystemClock_Config();
 80005b6:	f000 f8b5 	bl	8000724 <SystemClock_Config>

  MX_GPIO_Init();
 80005ba:	f7ff ff89 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 fa93 	bl	8000ae8 <MX_USART2_UART_Init>

  //MX_FREERTOS_Init();

  xBinarySemaphore = xSemaphoreCreateBinary();
 80005c2:	2203      	movs	r2, #3
 80005c4:	2100      	movs	r1, #0
 80005c6:	2001      	movs	r0, #1
 80005c8:	f002 fb43 	bl	8002c52 <xQueueGenericCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <main+0x78>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* Função que cria uma tarefa para controle do LED */
  xTaskCreate(StartNormalTask, "tarefa normal", 100, NULL, 2, NULL);
 80005d2:	2300      	movs	r3, #0
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2264      	movs	r2, #100	@ 0x64
 80005de:	4912      	ldr	r1, [pc, #72]	@ (8000628 <main+0x7c>)
 80005e0:	4812      	ldr	r0, [pc, #72]	@ (800062c <main+0x80>)
 80005e2:	f003 f90d 	bl	8003800 <xTaskCreate>

 /* Função que cria uma tarefa para controle da Serial */
  xTaskCreate(StartHighTask, "tarefa alta", 100, NULL, 3, NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2303      	movs	r3, #3
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2264      	movs	r2, #100	@ 0x64
 80005f2:	490f      	ldr	r1, [pc, #60]	@ (8000630 <main+0x84>)
 80005f4:	480f      	ldr	r0, [pc, #60]	@ (8000634 <main+0x88>)
 80005f6:	f003 f903 	bl	8003800 <xTaskCreate>

  xTaskCreate(StartLowTask, "tarefa low", 100, NULL, 1, NULL);
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2264      	movs	r2, #100	@ 0x64
 8000606:	490c      	ldr	r1, [pc, #48]	@ (8000638 <main+0x8c>)
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0x90>)
 800060a:	f003 f8f9 	bl	8003800 <xTaskCreate>


  xSemaphoreGive(xBinarySemaphore);
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <main+0x78>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	f002 fb7a 	bl	8002d10 <xQueueGenericSend>

  vTaskStartScheduler(); /* Inicia o escalonador de tarefas - Scheduler */
 800061c:	f003 fa84 	bl	8003b28 <vTaskStartScheduler>



  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x74>
 8000624:	20000088 	.word	0x20000088
 8000628:	08006120 	.word	0x08006120
 800062c:	08000641 	.word	0x08000641
 8000630:	08006130 	.word	0x08006130
 8000634:	08000669 	.word	0x08000669
 8000638:	0800613c 	.word	0x0800613c
 800063c:	080006bd 	.word	0x080006bd

08000640 <StartNormalTask>:



/* Tarefa de prioridade normal */
void StartNormalTask(void * pvParameters)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa n */
    while (1)
    {
        printf("Entrando na tarefa normal\n");
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <StartNormalTask+0x20>)
 800064a:	f005 f965 	bl	8005918 <puts>
        printf("Saindo da tarefa normal\n\n");
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <StartNormalTask+0x24>)
 8000650:	f005 f962 	bl	8005918 <puts>
        vTaskDelay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000658:	f003 fa30 	bl	8003abc <vTaskDelay>
        printf("Entrando na tarefa normal\n");
 800065c:	bf00      	nop
 800065e:	e7f3      	b.n	8000648 <StartNormalTask+0x8>
 8000660:	08006148 	.word	0x08006148
 8000664:	08006164 	.word	0x08006164

08000668 <StartHighTask>:
    }
}

/* Tarefa de prioridade alta */
void StartHighTask(void * pvParameters)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa alta */
    while (1)
    {
        printf("Entrando na tarefa alta e esperando Semaforo\n");
 8000670:	480e      	ldr	r0, [pc, #56]	@ (80006ac <StartHighTask+0x44>)
 8000672:	f005 f951 	bl	8005918 <puts>
        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <StartHighTask+0x48>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 31ff 	mov.w	r1, #4294967295
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fdc8 	bl	8003214 <xQueueSemaphoreTake>
        printf("Semaforo adquirido pela tarefa alta\n");
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <StartHighTask+0x4c>)
 8000686:	f005 f947 	bl	8005918 <puts>

        printf("Saindo da tarefa alta e liberando Semaforo\n\n");
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <StartHighTask+0x50>)
 800068c:	f005 f944 	bl	8005918 <puts>
        xSemaphoreGive(xBinarySemaphore);
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <StartHighTask+0x48>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	f002 fb39 	bl	8002d10 <xQueueGenericSend>
        vTaskDelay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a2:	f003 fa0b 	bl	8003abc <vTaskDelay>
        printf("Entrando na tarefa alta e esperando Semaforo\n");
 80006a6:	bf00      	nop
 80006a8:	e7e2      	b.n	8000670 <StartHighTask+0x8>
 80006aa:	bf00      	nop
 80006ac:	08006180 	.word	0x08006180
 80006b0:	20000088 	.word	0x20000088
 80006b4:	080061b0 	.word	0x080061b0
 80006b8:	080061d4 	.word	0x080061d4

080006bc <StartLowTask>:
    }
}

/* Tarefa de prioridade baixa */
void StartLowTask(void * pvParameters)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa baixa */
    while (1)
    {
        printf("**Entrando na tarefa baixa e esperando Semaforo\n");
 80006c4:	4812      	ldr	r0, [pc, #72]	@ (8000710 <StartLowTask+0x54>)
 80006c6:	f005 f927 	bl	8005918 <puts>
        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <StartLowTask+0x58>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f04f 31ff 	mov.w	r1, #4294967295
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fd9e 	bl	8003214 <xQueueSemaphoreTake>
        printf("Semaforo adquirido pela tarefa baixa\n");
 80006d8:	480f      	ldr	r0, [pc, #60]	@ (8000718 <StartLowTask+0x5c>)
 80006da:	f005 f91d 	bl	8005918 <puts>

        // Espera até o pino baixar
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80006de:	bf00      	nop
 80006e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <StartLowTask+0x60>)
 80006e6:	f000 fd59 	bl	800119c <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f7      	bne.n	80006e0 <StartLowTask+0x24>

        vTaskDelay(1000);
 80006f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f4:	f003 f9e2 	bl	8003abc <vTaskDelay>
        printf("**Saindo da tarefa baixa e liberando Semaforo\n\n");
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <StartLowTask+0x64>)
 80006fa:	f005 f90d 	bl	8005918 <puts>
        xSemaphoreGive(xBinarySemaphore);
 80006fe:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <StartLowTask+0x58>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	f002 fb02 	bl	8002d10 <xQueueGenericSend>
        printf("**Entrando na tarefa baixa e esperando Semaforo\n");
 800070c:	e7da      	b.n	80006c4 <StartLowTask+0x8>
 800070e:	bf00      	nop
 8000710:	08006200 	.word	0x08006200
 8000714:	20000088 	.word	0x20000088
 8000718:	08006230 	.word	0x08006230
 800071c:	40020800 	.word	0x40020800
 8000720:	08006258 	.word	0x08006258

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 f9d0 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000798:	2310      	movs	r3, #16
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fd26 	bl	8001200 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ba:	f000 f831 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff88 	bl	80016f0 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 f81b 	bl	8000820 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	@ 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080e:	f000 fa3f 	bl	8000c90 <HAL_IncTick>
  }

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010000 	.word	0x40010000

08000820 <Error_Handler>:


void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop

  __disable_irq();
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a11      	ldr	r2, [pc, #68]	@ (8000880 <HAL_MspInit+0x54>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <HAL_MspInit+0x54>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	210f      	movs	r1, #15
 800086e:	f06f 0001 	mvn.w	r0, #1
 8000872:	f000 fae5 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <HAL_InitTick+0xd0>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089c:	4a2d      	ldr	r2, [pc, #180]	@ (8000954 <HAL_InitTick+0xd0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <HAL_InitTick+0xd0>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b0:	f107 020c 	add.w	r2, r7, #12
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f938 	bl	8001b30 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c0:	f001 f922 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 80008c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c8:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <HAL_InitTick+0xd4>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <HAL_InitTick+0xd8>)
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <HAL_InitTick+0xdc>)
 80008d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <HAL_InitTick+0xd8>)
 80008dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <HAL_InitTick+0xd8>)
 80008e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <HAL_InitTick+0xd8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_InitTick+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <HAL_InitTick+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <HAL_InitTick+0xd8>)
 80008fc:	f001 f94a 	bl	8001b94 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11b      	bne.n	8000946 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800090e:	4813      	ldr	r0, [pc, #76]	@ (800095c <HAL_InitTick+0xd8>)
 8000910:	f001 f99a 	bl	8001c48 <HAL_TIM_Base_Start_IT>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d111      	bne.n	8000946 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000922:	2019      	movs	r0, #25
 8000924:	f000 faa8 	bl	8000e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d808      	bhi.n	8000940 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800092e:	2200      	movs	r2, #0
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	2019      	movs	r0, #25
 8000934:	f000 fa84 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_InitTick+0xe0>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e002      	b.n	8000946 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800094a:	4618      	mov	r0, r3
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	431bde83 	.word	0x431bde83
 800095c:	2000008c 	.word	0x2000008c
 8000960:	40010000 	.word	0x40010000
 8000964:	20000004 	.word	0x20000004

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009a6:	f001 f9b1 	bl	8001d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000008c 	.word	0x2000008c

080009b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e00a      	b.n	80009dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009c6:	f3af 8000 	nop.w
 80009ca:	4601      	mov	r1, r0
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf0      	blt.n	80009c6 <_read+0x12>
  }

  return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a16:	605a      	str	r2, [r3, #4]
  return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:

int _isatty(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f005 f8ca 	bl	8005c20 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20018000 	.word	0x20018000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	200000d4 	.word	0x200000d4
 8000ac0:	20004c58 	.word	0x20004c58

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f001 faac 	bl	800207c <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff fe79 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	40004400 	.word	0x40004400

08000b3c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <_write+0x28>)
 8000b54:	f001 fae2 	bl	800211c <HAL_UART_Transmit>
    return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000d8 	.word	0x200000d8

08000b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <HAL_UART_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000bde:	f000 f959 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bfc:	f7ff ff62 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f005 f801 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fcbf 	bl	80005ac <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c3c:	080062c8 	.word	0x080062c8
  ldr r2, =_sbss
 8000c40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c44:	20004c54 	.word	0x20004c54

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f8d8 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f7ff fe02 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fdd4 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000120 	.word	0x20000120

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000120 	.word	0x20000120

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	@ (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e159      	b.n	8001164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8148 	bne.w	800115e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a2 	beq.w	800115e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b57      	ldr	r3, [pc, #348]	@ (800117c <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a56      	ldr	r2, [pc, #344]	@ (800117c <HAL_GPIO_Init+0x2e8>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b54      	ldr	r3, [pc, #336]	@ (800117c <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a52      	ldr	r2, [pc, #328]	@ (8001180 <HAL_GPIO_Init+0x2ec>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <HAL_GPIO_Init+0x2f0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x202>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	@ (8001188 <HAL_GPIO_Init+0x2f4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1fe>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a47      	ldr	r2, [pc, #284]	@ (800118c <HAL_GPIO_Init+0x2f8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1fa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a46      	ldr	r2, [pc, #280]	@ (8001190 <HAL_GPIO_Init+0x2fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1f6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a45      	ldr	r2, [pc, #276]	@ (8001194 <HAL_GPIO_Init+0x300>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1f2>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001086:	2307      	movs	r3, #7
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	@ (8001180 <HAL_GPIO_Init+0x2ec>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <HAL_GPIO_Init+0x304>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a2f      	ldr	r2, [pc, #188]	@ (8001198 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <HAL_GPIO_Init+0x304>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <HAL_GPIO_Init+0x304>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1a      	ldr	r2, [pc, #104]	@ (8001198 <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_GPIO_Init+0x304>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f aea2 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e267      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800121e:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e242      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcfe 	bl	8000cb8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcfa 	bl	8000cb8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e207      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcea 	bl	8000cb8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fce6 	bl	8000cb8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1f3      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001316:	4b4a      	ldr	r3, [pc, #296]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc9f 	bl	8000cb8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc9b 	bl	8000cb8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a8      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc7e 	bl	8000cb8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc7a 	bl	8000cb8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e187      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc5e 	bl	8000cb8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc5a 	bl	8000cb8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e167      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc47 	bl	8000cb8 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc43 	bl	8000cb8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e150      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b7d      	ldr	r3, [pc, #500]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	@ (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	@ (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	@ (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc03 	bl	8000cb8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbff 	bl	8000cb8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e10c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	@ 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	@ 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fbc4 	bl	8000cb8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fbc0 	bl	8000cb8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fbae 	bl	8000cb8 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fbaa 	bl	8000cb8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b5      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a1 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159e:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d141      	bne.n	8001636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb7e 	bl	8000cb8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb7a 	bl	8000cb8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e087      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	491b      	ldr	r1, [pc, #108]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_RCC_OscConfig+0x478>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb53 	bl	8000cb8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb4f 	bl	8000cb8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e05c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x416>
 8001634:	e054      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb3c 	bl	8000cb8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb38 	bl	8000cb8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e038      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x4ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d028      	beq.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d121      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa6a 	bl	8000cb8 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa66 	bl	8000cb8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fff4 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	080062a0 	.word	0x080062a0
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b094      	sub	sp, #80	@ 0x50
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00d      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f200 80e1 	bhi.w	8001aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ee:	e0db      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b73      	ldr	r3, [pc, #460]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018f4:	e0db      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b73      	ldr	r3, [pc, #460]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018fa:	e0d8      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001904:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b6d      	ldr	r3, [pc, #436]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d063      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800191c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
 800192a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800192e:	4622      	mov	r2, r4
 8001930:	462b      	mov	r3, r5
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0159      	lsls	r1, r3, #5
 800193c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001940:	0150      	lsls	r0, r2, #5
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4621      	mov	r1, r4
 8001948:	1a51      	subs	r1, r2, r1
 800194a:	6139      	str	r1, [r7, #16]
 800194c:	4629      	mov	r1, r5
 800194e:	eb63 0301 	sbc.w	r3, r3, r1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001960:	4659      	mov	r1, fp
 8001962:	018b      	lsls	r3, r1, #6
 8001964:	4651      	mov	r1, sl
 8001966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196a:	4651      	mov	r1, sl
 800196c:	018a      	lsls	r2, r1, #6
 800196e:	4651      	mov	r1, sl
 8001970:	ebb2 0801 	subs.w	r8, r2, r1
 8001974:	4659      	mov	r1, fp
 8001976:	eb63 0901 	sbc.w	r9, r3, r1
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198e:	4690      	mov	r8, r2
 8001990:	4699      	mov	r9, r3
 8001992:	4623      	mov	r3, r4
 8001994:	eb18 0303 	adds.w	r3, r8, r3
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	462b      	mov	r3, r5
 800199c:	eb49 0303 	adc.w	r3, r9, r3
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ae:	4629      	mov	r1, r5
 80019b0:	024b      	lsls	r3, r1, #9
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019b8:	4621      	mov	r1, r4
 80019ba:	024a      	lsls	r2, r1, #9
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c2:	2200      	movs	r2, #0
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019cc:	f7fe fc08 	bl	80001e0 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019d8:	e058      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b38      	ldr	r3, [pc, #224]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	4611      	mov	r1, r2
 80019e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f4:	4642      	mov	r2, r8
 80019f6:	464b      	mov	r3, r9
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	0159      	lsls	r1, r3, #5
 8001a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a06:	0150      	lsls	r0, r2, #5
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a12:	4649      	mov	r1, r9
 8001a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a30:	eb63 050b 	sbc.w	r5, r3, fp
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	00eb      	lsls	r3, r5, #3
 8001a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a42:	00e2      	lsls	r2, r4, #3
 8001a44:	4614      	mov	r4, r2
 8001a46:	461d      	mov	r5, r3
 8001a48:	4643      	mov	r3, r8
 8001a4a:	18e3      	adds	r3, r4, r3
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	464b      	mov	r3, r9
 8001a50:	eb45 0303 	adc.w	r3, r5, r3
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a62:	4629      	mov	r1, r5
 8001a64:	028b      	lsls	r3, r1, #10
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	028a      	lsls	r2, r1, #10
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	61fa      	str	r2, [r7, #28]
 8001a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a80:	f7fe fbae 	bl	80001e0 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3750      	adds	r7, #80	@ 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	@ (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	080062b0 	.word	0x080062b0

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	080062b0 	.word	0x080062b0

08001b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_RCC_GetClockConfig+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0207 	and.w	r2, r3, #7
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e041      	b.n	8001c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f839 	bl	8001c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f9b2 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e044      	b.n	8001cea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d018      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	d013      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xb4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00e      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d111      	bne.n	8001cd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d010      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd6:	e007      	b.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40014000 	.word	0x40014000

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0202 	mvn.w	r2, #2
 8001d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8d2 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8c4 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8d5 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ac 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f89e 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8af 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0208 	mvn.w	r2, #8
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f886 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f878 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f889 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f860 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f852 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f863 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0201 	mvn.w	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fcc2 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8e6 	bl	8002068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f834 	bl	8001f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0220 	mvn.w	r2, #32
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8b8 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00f      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5a:	d00b      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a37      	ldr	r2, [pc, #220]	@ (800203c <TIM_Base_SetConfig+0x100>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a36      	ldr	r2, [pc, #216]	@ (8002040 <TIM_Base_SetConfig+0x104>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a35      	ldr	r2, [pc, #212]	@ (8002044 <TIM_Base_SetConfig+0x108>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	@ (800203c <TIM_Base_SetConfig+0x100>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <TIM_Base_SetConfig+0x104>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	@ (8002044 <TIM_Base_SetConfig+0x108>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <TIM_Base_SetConfig+0x10c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	@ (800204c <TIM_Base_SetConfig+0x110>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <TIM_Base_SetConfig+0x114>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  }
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e042      	b.n	8002114 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fd60 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	@ 0x24
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f973 	bl	80023ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	d175      	bne.n	8002228 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_UART_Transmit+0x2c>
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e06e      	b.n	800222a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2221      	movs	r2, #33	@ 0x21
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800215a:	f7fe fdad 	bl	8000cb8 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002174:	d108      	bne.n	8002188 <HAL_UART_Transmit+0x6c>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d104      	bne.n	8002188 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	e003      	b.n	8002190 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002190:	e02e      	b.n	80021f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f848 	bl	8002232 <UART_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e03a      	b.n	800222a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	3302      	adds	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e007      	b.n	80021e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1cb      	bne.n	8002192 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f814 	bl	8002232 <UART_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e006      	b.n	800222a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002242:	e03b      	b.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d037      	beq.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7fe fd34 	bl	8000cb8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	6a3a      	ldr	r2, [r7, #32]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <UART_WaitOnFlagUntilTimeout+0x30>
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e03a      	b.n	80022dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d023      	beq.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b80      	cmp	r3, #128	@ 0x80
 8002278:	d020      	beq.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b40      	cmp	r3, #64	@ 0x40
 800227e:	d01d      	beq.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	d116      	bne.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f81d 	bl	80022e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2208      	movs	r2, #8
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00f      	b.n	80022dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d0b4      	beq.n	8002244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b095      	sub	sp, #84	@ 0x54
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800230c:	643a      	str	r2, [r7, #64]	@ 0x40
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e5      	bne.n	80022ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3314      	adds	r3, #20
 800233e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002340:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002348:	e841 2300 	strex	r3, r2, [r1]
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e5      	bne.n	8002320 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	2b01      	cmp	r3, #1
 800235a:	d119      	bne.n	8002390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	330c      	adds	r3, #12
 8002362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	e853 3f00 	ldrex	r3, [r3]
 800236a:	60bb      	str	r3, [r7, #8]
   return(result);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f023 0310 	bic.w	r3, r3, #16
 8002372:	647b      	str	r3, [r7, #68]	@ 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800237c:	61ba      	str	r2, [r7, #24]
 800237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	e841 2300 	strex	r3, r2, [r1]
 8002388:	613b      	str	r3, [r7, #16]
   return(result);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e5      	bne.n	800235c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800239e:	bf00      	nop
 80023a0:	3754      	adds	r7, #84	@ 0x54
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b0c0      	sub	sp, #256	@ 0x100
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	68d9      	ldr	r1, [r3, #12]
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	ea40 0301 	orr.w	r3, r0, r1
 80023d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002404:	f021 010c 	bic.w	r1, r1, #12
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002412:	430b      	orrs	r3, r1
 8002414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002426:	6999      	ldr	r1, [r3, #24]
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	ea40 0301 	orr.w	r3, r0, r1
 8002432:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b8f      	ldr	r3, [pc, #572]	@ (8002678 <UART_SetConfig+0x2cc>)
 800243c:	429a      	cmp	r2, r3
 800243e:	d005      	beq.n	800244c <UART_SetConfig+0xa0>
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b8d      	ldr	r3, [pc, #564]	@ (800267c <UART_SetConfig+0x2d0>)
 8002448:	429a      	cmp	r2, r3
 800244a:	d104      	bne.n	8002456 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800244c:	f7ff fb5c 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002450:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002454:	e003      	b.n	800245e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002456:	f7ff fb43 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 800245a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002468:	f040 810c 	bne.w	8002684 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800246c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002476:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800247a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	1891      	adds	r1, r2, r2
 8002484:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002486:	415b      	adcs	r3, r3
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800248a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800248e:	4621      	mov	r1, r4
 8002490:	eb12 0801 	adds.w	r8, r2, r1
 8002494:	4629      	mov	r1, r5
 8002496:	eb43 0901 	adc.w	r9, r3, r1
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	eb18 0303 	adds.w	r3, r8, r3
 80024b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024bc:	462b      	mov	r3, r5
 80024be:	eb49 0303 	adc.w	r3, r9, r3
 80024c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024da:	460b      	mov	r3, r1
 80024dc:	18db      	adds	r3, r3, r3
 80024de:	653b      	str	r3, [r7, #80]	@ 0x50
 80024e0:	4613      	mov	r3, r2
 80024e2:	eb42 0303 	adc.w	r3, r2, r3
 80024e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80024e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024f0:	f7fd fe76 	bl	80001e0 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <UART_SetConfig+0x2d4>)
 80024fa:	fba3 2302 	umull	r2, r3, r3, r2
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	011c      	lsls	r4, r3, #4
 8002502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800250c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002510:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	1891      	adds	r1, r2, r2
 800251a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800251c:	415b      	adcs	r3, r3
 800251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002524:	4641      	mov	r1, r8
 8002526:	eb12 0a01 	adds.w	sl, r2, r1
 800252a:	4649      	mov	r1, r9
 800252c:	eb43 0b01 	adc.w	fp, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800253c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002544:	4692      	mov	sl, r2
 8002546:	469b      	mov	fp, r3
 8002548:	4643      	mov	r3, r8
 800254a:	eb1a 0303 	adds.w	r3, sl, r3
 800254e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002552:	464b      	mov	r3, r9
 8002554:	eb4b 0303 	adc.w	r3, fp, r3
 8002558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002568:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800256c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002570:	460b      	mov	r3, r1
 8002572:	18db      	adds	r3, r3, r3
 8002574:	643b      	str	r3, [r7, #64]	@ 0x40
 8002576:	4613      	mov	r3, r2
 8002578:	eb42 0303 	adc.w	r3, r2, r3
 800257c:	647b      	str	r3, [r7, #68]	@ 0x44
 800257e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002582:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002586:	f7fd fe2b 	bl	80001e0 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4611      	mov	r1, r2
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <UART_SetConfig+0x2d4>)
 8002592:	fba3 2301 	umull	r2, r3, r3, r1
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2264      	movs	r2, #100	@ 0x64
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	1acb      	subs	r3, r1, r3
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <UART_SetConfig+0x2d4>)
 80025a8:	fba3 2302 	umull	r2, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025b4:	441c      	add	r4, r3
 80025b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025d0:	415b      	adcs	r3, r3
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025d8:	4641      	mov	r1, r8
 80025da:	1851      	adds	r1, r2, r1
 80025dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80025de:	4649      	mov	r1, r9
 80025e0:	414b      	adcs	r3, r1
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025f0:	4659      	mov	r1, fp
 80025f2:	00cb      	lsls	r3, r1, #3
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fa:	4651      	mov	r1, sl
 80025fc:	00ca      	lsls	r2, r1, #3
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4603      	mov	r3, r0
 8002604:	4642      	mov	r2, r8
 8002606:	189b      	adds	r3, r3, r2
 8002608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800260c:	464b      	mov	r3, r9
 800260e:	460a      	mov	r2, r1
 8002610:	eb42 0303 	adc.w	r3, r2, r3
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002624:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800262c:	460b      	mov	r3, r1
 800262e:	18db      	adds	r3, r3, r3
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002632:	4613      	mov	r3, r2
 8002634:	eb42 0303 	adc.w	r3, r2, r3
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800263e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002642:	f7fd fdcd 	bl	80001e0 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <UART_SetConfig+0x2d4>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	2164      	movs	r1, #100	@ 0x64
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3332      	adds	r3, #50	@ 0x32
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <UART_SetConfig+0x2d4>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	f003 0207 	and.w	r2, r3, #7
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4422      	add	r2, r4
 8002672:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002674:	e106      	b.n	8002884 <UART_SetConfig+0x4d8>
 8002676:	bf00      	nop
 8002678:	40011000 	.word	0x40011000
 800267c:	40011400 	.word	0x40011400
 8002680:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800268e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002692:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002696:	4642      	mov	r2, r8
 8002698:	464b      	mov	r3, r9
 800269a:	1891      	adds	r1, r2, r2
 800269c:	6239      	str	r1, [r7, #32]
 800269e:	415b      	adcs	r3, r3
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a6:	4641      	mov	r1, r8
 80026a8:	1854      	adds	r4, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb43 0501 	adc.w	r5, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	00eb      	lsls	r3, r5, #3
 80026ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026be:	00e2      	lsls	r2, r4, #3
 80026c0:	4614      	mov	r4, r2
 80026c2:	461d      	mov	r5, r3
 80026c4:	4643      	mov	r3, r8
 80026c6:	18e3      	adds	r3, r4, r3
 80026c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026cc:	464b      	mov	r3, r9
 80026ce:	eb45 0303 	adc.w	r3, r5, r3
 80026d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026f2:	4629      	mov	r1, r5
 80026f4:	008b      	lsls	r3, r1, #2
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026fc:	4621      	mov	r1, r4
 80026fe:	008a      	lsls	r2, r1, #2
 8002700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002704:	f7fd fd6c 	bl	80001e0 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4b60      	ldr	r3, [pc, #384]	@ (8002890 <UART_SetConfig+0x4e4>)
 800270e:	fba3 2302 	umull	r2, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	011c      	lsls	r4, r3, #4
 8002716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002724:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	1891      	adds	r1, r2, r2
 800272e:	61b9      	str	r1, [r7, #24]
 8002730:	415b      	adcs	r3, r3
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	4641      	mov	r1, r8
 800273a:	1851      	adds	r1, r2, r1
 800273c:	6139      	str	r1, [r7, #16]
 800273e:	4649      	mov	r1, r9
 8002740:	414b      	adcs	r3, r1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002750:	4659      	mov	r1, fp
 8002752:	00cb      	lsls	r3, r1, #3
 8002754:	4651      	mov	r1, sl
 8002756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800275a:	4651      	mov	r1, sl
 800275c:	00ca      	lsls	r2, r1, #3
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	4603      	mov	r3, r0
 8002764:	4642      	mov	r2, r8
 8002766:	189b      	adds	r3, r3, r2
 8002768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800276c:	464b      	mov	r3, r9
 800276e:	460a      	mov	r2, r1
 8002770:	eb42 0303 	adc.w	r3, r2, r3
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002782:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002790:	4649      	mov	r1, r9
 8002792:	008b      	lsls	r3, r1, #2
 8002794:	4641      	mov	r1, r8
 8002796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800279a:	4641      	mov	r1, r8
 800279c:	008a      	lsls	r2, r1, #2
 800279e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027a2:	f7fd fd1d 	bl	80001e0 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <UART_SetConfig+0x4e4>)
 80027ae:	fba3 2301 	umull	r2, r3, r3, r1
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2264      	movs	r2, #100	@ 0x64
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	1acb      	subs	r3, r1, r3
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	3332      	adds	r3, #50	@ 0x32
 80027c0:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <UART_SetConfig+0x4e4>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027cc:	441c      	add	r4, r3
 80027ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d2:	2200      	movs	r2, #0
 80027d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80027d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	1891      	adds	r1, r2, r2
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	415b      	adcs	r3, r3
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ec:	4641      	mov	r1, r8
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	4649      	mov	r1, r9
 80027f4:	414b      	adcs	r3, r1
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002804:	4659      	mov	r1, fp
 8002806:	00cb      	lsls	r3, r1, #3
 8002808:	4651      	mov	r1, sl
 800280a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280e:	4651      	mov	r1, sl
 8002810:	00ca      	lsls	r2, r1, #3
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4603      	mov	r3, r0
 8002818:	4642      	mov	r2, r8
 800281a:	189b      	adds	r3, r3, r2
 800281c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800281e:	464b      	mov	r3, r9
 8002820:	460a      	mov	r2, r1
 8002822:	eb42 0303 	adc.w	r3, r2, r3
 8002826:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60
 8002832:	667a      	str	r2, [r7, #100]	@ 0x64
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002840:	4649      	mov	r1, r9
 8002842:	008b      	lsls	r3, r1, #2
 8002844:	4641      	mov	r1, r8
 8002846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284a:	4641      	mov	r1, r8
 800284c:	008a      	lsls	r2, r1, #2
 800284e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002852:	f7fd fcc5 	bl	80001e0 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <UART_SetConfig+0x4e4>)
 800285c:	fba3 1302 	umull	r1, r3, r3, r2
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	2164      	movs	r1, #100	@ 0x64
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	3332      	adds	r3, #50	@ 0x32
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <UART_SetConfig+0x4e4>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4422      	add	r2, r4
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002890:	51eb851f 	.word	0x51eb851f

08002894 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <SysTick_Handler+0x1c>)
 800289a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800289c:	f001 fda8 	bl	80043f0 <xTaskGetSchedulerState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028a6:	f002 fc9f 	bl	80051e8 <xPortSysTickHandler>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80028c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <vApplicationGetIdleTaskMemory+0x30>)
 80028ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2280      	movs	r2, #128	@ 0x80
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000124 	.word	0x20000124
 80028e4:	200001cc 	.word	0x200001cc

080028e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <vApplicationGetTimerTaskMemory+0x2c>)
 80028f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <vApplicationGetTimerTaskMemory+0x30>)
 80028fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	200003cc 	.word	0x200003cc
 8002918:	20000474 	.word	0x20000474

0800291c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f103 0208 	add.w	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f103 0208 	add.w	r2, r3, #8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f103 0208 	add.w	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d103      	bne.n	80029de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e00c      	b.n	80029f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3308      	adds	r3, #8
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e002      	b.n	80029ec <vListInsert+0x2e>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d2f6      	bcs.n	80029e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6892      	ldr	r2, [r2, #8]
 8002a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6852      	ldr	r2, [r2, #4]
 8002a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d103      	bne.n	8002a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ab0:	f002 fb0a 	bl	80050c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	68f9      	ldr	r1, [r7, #12]
 8002abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	441a      	add	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	441a      	add	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	22ff      	movs	r2, #255	@ 0xff
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	22ff      	movs	r2, #255	@ 0xff
 8002afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d114      	bne.n	8002b30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01a      	beq.n	8002b44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3310      	adds	r3, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 faa6 	bl	8004064 <xTaskRemoveFromEventList>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <xQueueGenericReset+0xd0>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	e009      	b.n	8002b44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3310      	adds	r3, #16
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fef1 	bl	800291c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3324      	adds	r3, #36	@ 0x24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff feec 	bl	800291c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b44:	f002 faf2 	bl	800512c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	@ 0x38
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <xQueueGenericCreateStatic+0x56>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <xQueueGenericCreateStatic+0x5a>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueGenericCreateStatic+0x5c>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <xQueueGenericCreateStatic+0x84>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <xQueueGenericCreateStatic+0x88>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <xQueueGenericCreateStatic+0x8a>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	61fb      	str	r3, [r7, #28]
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bfe:	2350      	movs	r3, #80	@ 0x50
 8002c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d00b      	beq.n	8002c20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	61bb      	str	r3, [r7, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f840 	bl	8002cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3730      	adds	r7, #48	@ 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08a      	sub	sp, #40	@ 0x28
 8002c56:	af02      	add	r7, sp, #8
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	613b      	str	r3, [r7, #16]
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	e7fd      	b.n	8002c7a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3350      	adds	r3, #80	@ 0x50
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fb3d 	bl	800530c <pvPortMalloc>
 8002c92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3350      	adds	r3, #80	@ 0x50
 8002ca2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f805 	bl	8002cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e002      	b.n	8002cea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	69b8      	ldr	r0, [r7, #24]
 8002cfa:	f7ff fec3 	bl	8002a84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <xQueueGenericSend+0x34>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <xQueueGenericSend+0x42>
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <xQueueGenericSend+0x46>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <xQueueGenericSend+0x48>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <xQueueGenericSend+0x64>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x72>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x76>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x78>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <xQueueGenericSend+0x94>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da4:	f001 fb24 	bl	80043f0 <xTaskGetSchedulerState>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <xQueueGenericSend+0xa4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <xQueueGenericSend+0xa8>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <xQueueGenericSend+0xaa>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	61fb      	str	r3, [r7, #28]
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd6:	f002 f977 	bl	80050c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <xQueueGenericSend+0xdc>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d129      	bne.n	8002e40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df2:	f000 fb37 	bl	8003464 <prvCopyDataToQueue>
 8002df6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	3324      	adds	r3, #36	@ 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 f92d 	bl	8004064 <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e10:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <xQueueGenericSend+0x200>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	e00a      	b.n	8002e38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b39      	ldr	r3, [pc, #228]	@ (8002f10 <xQueueGenericSend+0x200>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e38:	f002 f978 	bl	800512c <vPortExitCritical>
				return pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e063      	b.n	8002f08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e46:	f002 f971 	bl	800512c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e05c      	b.n	8002f08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f967 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e62:	f002 f963 	bl	800512c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e66:	f000 fecf 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6a:	f002 f92d 	bl	80050c8 <vPortEnterCritical>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueGenericSend+0x174>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x18a>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e9a:	f002 f947 	bl	800512c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9e:	1d3a      	adds	r2, r7, #4
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f956 	bl	8004158 <xTaskCheckForTimeOut>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d124      	bne.n	8002efc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eb4:	f000 fbce 	bl	8003654 <prvIsQueueFull>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f87a 	bl	8003fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ece:	f000 fb59 	bl	8003584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed2:	f000 fea7 	bl	8003c24 <xTaskResumeAll>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f af7c 	bne.w	8002dd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ede:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <xQueueGenericSend+0x200>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	e772      	b.n	8002dd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef2:	f000 fb47 	bl	8003584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef6:	f000 fe95 	bl	8003c24 <xTaskResumeAll>
 8002efa:	e76c      	b.n	8002dd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efe:	f000 fb41 	bl	8003584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f02:	f000 fe8f 	bl	8003c24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3738      	adds	r7, #56	@ 0x38
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b090      	sub	sp, #64	@ 0x40
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSendFromISR+0x3e>
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueGenericSendFromISR+0x42>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueGenericSendFromISR+0x44>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <xQueueGenericSendFromISR+0x6e>
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSendFromISR+0x72>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSendFromISR+0x74>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa4:	f002 f970 	bl	8005288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fa8:	f3ef 8211 	mrs	r2, BASEPRI
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fa      	str	r2, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <xQueueGenericSendFromISR+0xc2>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d12f      	bne.n	8003036 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002fec:	f000 fa3a 	bl	8003464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ff0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d112      	bne.n	8003020 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	3324      	adds	r3, #36	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f82c 	bl	8004064 <xTaskRemoveFromEventList>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e007      	b.n	8003030 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003020:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003024:	3301      	adds	r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	b25a      	sxtb	r2, r3
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003030:	2301      	movs	r3, #1
 8003032:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003034:	e001      	b.n	800303a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003036:	2300      	movs	r3, #0
 8003038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003044:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003048:	4618      	mov	r0, r3
 800304a:	3740      	adds	r7, #64	@ 0x40
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	@ 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <xQueueReceive+0x32>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	623b      	str	r3, [r7, #32]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0x40>
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <xQueueReceive+0x44>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <xQueueReceive+0x46>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <xQueueReceive+0x62>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	61fb      	str	r3, [r7, #28]
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	e7fd      	b.n	80030ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b2:	f001 f99d 	bl	80043f0 <xTaskGetSchedulerState>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <xQueueReceive+0x72>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueReceive+0x76>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueReceive+0x78>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <xQueueReceive+0x94>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61bb      	str	r3, [r7, #24]
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e4:	f001 fff0 	bl	80050c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01f      	beq.n	8003134 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030f8:	f000 fa1e 	bl	8003538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00f      	beq.n	800312c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	3310      	adds	r3, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ffa7 	bl	8004064 <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <xQueueReceive+0x1c0>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800312c:	f001 fffe 	bl	800512c <vPortExitCritical>
				return pdPASS;
 8003130:	2301      	movs	r3, #1
 8003132:	e069      	b.n	8003208 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800313a:	f001 fff7 	bl	800512c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800313e:	2300      	movs	r3, #0
 8003140:	e062      	b.n	8003208 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f000 ffed 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003152:	2301      	movs	r3, #1
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003156:	f001 ffe9 	bl	800512c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315a:	f000 fd55 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800315e:	f001 ffb3 	bl	80050c8 <vPortEnterCritical>
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003168:	b25b      	sxtb	r3, r3
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d103      	bne.n	8003178 <xQueueReceive+0x128>
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d103      	bne.n	800318e <xQueueReceive+0x13e>
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800318e:	f001 ffcd 	bl	800512c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003192:	1d3a      	adds	r2, r7, #4
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 ffdc 	bl	8004158 <xTaskCheckForTimeOut>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d123      	bne.n	80031ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031a8:	f000 fa3e 	bl	8003628 <prvIsQueueEmpty>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d017      	beq.n	80031e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	3324      	adds	r3, #36	@ 0x24
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff00 	bl	8003fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c2:	f000 f9df 	bl	8003584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031c6:	f000 fd2d 	bl	8003c24 <xTaskResumeAll>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d189      	bne.n	80030e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <xQueueReceive+0x1c0>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	e780      	b.n	80030e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e4:	f000 f9ce 	bl	8003584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031e8:	f000 fd1c 	bl	8003c24 <xTaskResumeAll>
 80031ec:	e77a      	b.n	80030e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	f000 f9c8 	bl	8003584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031f4:	f000 fd16 	bl	8003c24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fa:	f000 fa15 	bl	8003628 <prvIsQueueEmpty>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	f43f af6f 	beq.w	80030e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003206:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003208:	4618      	mov	r0, r3
 800320a:	3730      	adds	r7, #48	@ 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	e000ed04 	.word	0xe000ed04

08003214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	@ 0x38
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800322a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	623b      	str	r3, [r7, #32]
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61fb      	str	r3, [r7, #28]
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003268:	f001 f8c2 	bl	80043f0 <xTaskGetSchedulerState>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <xQueueSemaphoreTake+0x64>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <xQueueSemaphoreTake+0x68>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <xQueueSemaphoreTake+0x6a>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	61bb      	str	r3, [r7, #24]
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800329a:	f001 ff15 	bl	80050c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d024      	beq.n	80032f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032ba:	f001 fa13 	bl	80046e4 <pvTaskIncrementMutexHeldCount>
 80032be:	4602      	mov	r2, r0
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00f      	beq.n	80032ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	3310      	adds	r3, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fec7 	bl	8004064 <xTaskRemoveFromEventList>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032dc:	4b54      	ldr	r3, [pc, #336]	@ (8003430 <xQueueSemaphoreTake+0x21c>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032ec:	f001 ff1e 	bl	800512c <vPortExitCritical>
				return pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e098      	b.n	8003426 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d112      	bne.n	8003320 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	617b      	str	r3, [r7, #20]
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003318:	f001 ff08 	bl	800512c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800331c:	2300      	movs	r3, #0
 800331e:	e082      	b.n	8003426 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fefe 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003334:	f001 fefa 	bl	800512c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003338:	f000 fc66 	bl	8003c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800333c:	f001 fec4 	bl	80050c8 <vPortEnterCritical>
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003346:	b25b      	sxtb	r3, r3
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d103      	bne.n	8003356 <xQueueSemaphoreTake+0x142>
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d103      	bne.n	800336c <xQueueSemaphoreTake+0x158>
 8003364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800336c:	f001 fede 	bl	800512c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003370:	463a      	mov	r2, r7
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f000 feed 	bl	8004158 <xTaskCheckForTimeOut>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d132      	bne.n	80033ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003386:	f000 f94f 	bl	8003628 <prvIsQueueEmpty>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d026      	beq.n	80033de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003398:	f001 fe96 	bl	80050c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 f843 	bl	800442c <xTaskPriorityInherit>
 80033a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80033a8:	f001 fec0 	bl	800512c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ae:	3324      	adds	r3, #36	@ 0x24
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fe03 	bl	8003fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033bc:	f000 f8e2 	bl	8003584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033c0:	f000 fc30 	bl	8003c24 <xTaskResumeAll>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f af67 	bne.w	800329a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <xQueueSemaphoreTake+0x21c>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	e75d      	b.n	800329a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80033de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033e0:	f000 f8d0 	bl	8003584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033e4:	f000 fc1e 	bl	8003c24 <xTaskResumeAll>
 80033e8:	e757      	b.n	800329a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033ec:	f000 f8ca 	bl	8003584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033f0:	f000 fc18 	bl	8003c24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f6:	f000 f917 	bl	8003628 <prvIsQueueEmpty>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f43f af4c 	beq.w	800329a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003408:	f001 fe5e 	bl	80050c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800340c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800340e:	f000 f811 	bl	8003434 <prvGetDisinheritPriorityAfterTimeout>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f8de 	bl	80045dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003420:	f001 fe84 	bl	800512c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003426:	4618      	mov	r0, r3
 8003428:	3738      	adds	r7, #56	@ 0x38
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e001      	b.n	8003456 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003456:	68fb      	ldr	r3, [r7, #12]
	}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14d      	bne.n	8003526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f834 	bl	80044fc <xTaskPriorityDisinherit>
 8003494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	e043      	b.n	8003526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d119      	bne.n	80034d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6858      	ldr	r0, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	461a      	mov	r2, r3
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	f002 fbe3 	bl	8005c7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d32b      	bcc.n	8003526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e026      	b.n	8003526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68d8      	ldr	r0, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	461a      	mov	r2, r3
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	f002 fbc9 	bl	8005c7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	425b      	negs	r3, r3
 80034f2:	441a      	add	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d207      	bcs.n	8003514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	425b      	negs	r3, r3
 800350e:	441a      	add	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d105      	bne.n	8003526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3b01      	subs	r3, #1
 8003524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800352e:	697b      	ldr	r3, [r7, #20]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	441a      	add	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d303      	bcc.n	800356c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68d9      	ldr	r1, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	461a      	mov	r2, r3
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f002 fb7f 	bl	8005c7a <memcpy>
	}
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800358c:	f001 fd9c 	bl	80050c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003598:	e011      	b.n	80035be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd5c 	bl	8004064 <xTaskRemoveFromEventList>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035b2:	f000 fe35 	bl	8004220 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dce9      	bgt.n	800359a <prvUnlockQueue+0x16>
 80035c6:	e000      	b.n	80035ca <prvUnlockQueue+0x46>
					break;
 80035c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	22ff      	movs	r2, #255	@ 0xff
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035d2:	f001 fdab 	bl	800512c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035d6:	f001 fd77 	bl	80050c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035e2:	e011      	b.n	8003608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3310      	adds	r3, #16
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fd37 	bl	8004064 <xTaskRemoveFromEventList>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035fc:	f000 fe10 	bl	8004220 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003600:	7bbb      	ldrb	r3, [r7, #14]
 8003602:	3b01      	subs	r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800360c:	2b00      	cmp	r3, #0
 800360e:	dce9      	bgt.n	80035e4 <prvUnlockQueue+0x60>
 8003610:	e000      	b.n	8003614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	22ff      	movs	r2, #255	@ 0xff
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800361c:	f001 fd86 	bl	800512c <vPortExitCritical>
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003630:	f001 fd4a 	bl	80050c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e001      	b.n	8003646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003646:	f001 fd71 	bl	800512c <vPortExitCritical>

	return xReturn;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800365c:	f001 fd34 	bl	80050c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	429a      	cmp	r2, r3
 800366a:	d102      	bne.n	8003672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e001      	b.n	8003676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003676:	f001 fd59 	bl	800512c <vPortExitCritical>

	return xReturn;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e014      	b.n	80036be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003694:	4a0f      	ldr	r2, [pc, #60]	@ (80036d4 <vQueueAddToRegistry+0x50>)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036a0:	490c      	ldr	r1, [pc, #48]	@ (80036d4 <vQueueAddToRegistry+0x50>)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <vQueueAddToRegistry+0x50>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036b6:	e006      	b.n	80036c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	d9e7      	bls.n	8003694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000874 	.word	0x20000874

080036d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036e8:	f001 fcee 	bl	80050c8 <vPortEnterCritical>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d103      	bne.n	8003702 <vQueueWaitForMessageRestricted+0x2a>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003708:	b25b      	sxtb	r3, r3
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d103      	bne.n	8003718 <vQueueWaitForMessageRestricted+0x40>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003718:	f001 fd08 	bl	800512c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3324      	adds	r3, #36	@ 0x24
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fc6d 	bl	800400c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f7ff ff26 	bl	8003584 <prvUnlockQueue>
	}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	@ 0x38
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	623b      	str	r3, [r7, #32]
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	61fb      	str	r3, [r7, #28]
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800378a:	23a8      	movs	r3, #168	@ 0xa8
 800378c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2ba8      	cmp	r3, #168	@ 0xa8
 8003792:	d00b      	beq.n	80037ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	61bb      	str	r3, [r7, #24]
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01e      	beq.n	80037f2 <xTaskCreateStatic+0xb2>
 80037b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01b      	beq.n	80037f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037cc:	2300      	movs	r3, #0
 80037ce:	9303      	str	r3, [sp, #12]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	9302      	str	r3, [sp, #8]
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f851 	bl	800388c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037ec:	f000 f8f6 	bl	80039dc <prvAddNewTaskToReadyList>
 80037f0:	e001      	b.n	80037f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037f6:	697b      	ldr	r3, [r7, #20]
	}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3728      	adds	r7, #40	@ 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af04      	add	r7, sp, #16
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fd79 	bl	800530c <pvPortMalloc>
 800381a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003822:	20a8      	movs	r0, #168	@ 0xa8
 8003824:	f001 fd72 	bl	800530c <pvPortMalloc>
 8003828:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
 8003836:	e005      	b.n	8003844 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f001 fe35 	bl	80054a8 <vPortFree>
 800383e:	e001      	b.n	8003844 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	2300      	movs	r3, #0
 8003856:	9303      	str	r3, [sp, #12]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	9302      	str	r3, [sp, #8]
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f80f 	bl	800388c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800386e:	69f8      	ldr	r0, [r7, #28]
 8003870:	f000 f8b4 	bl	80039dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003874:	2301      	movs	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e002      	b.n	8003880 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003880:	69bb      	ldr	r3, [r7, #24]
	}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	461a      	mov	r2, r3
 80038a4:	21a5      	movs	r1, #165	@ 0xa5
 80038a6:	f002 f917 	bl	8005ad8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038b4:	3b01      	subs	r3, #1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	617b      	str	r3, [r7, #20]
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01f      	beq.n	800392c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e012      	b.n	8003918 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	7819      	ldrb	r1, [r3, #0]
 80038fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	3334      	adds	r3, #52	@ 0x34
 8003902:	460a      	mov	r2, r1
 8003904:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d006      	beq.n	8003920 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d9e9      	bls.n	80038f2 <prvInitialiseNewTask+0x66>
 800391e:	e000      	b.n	8003922 <prvInitialiseNewTask+0x96>
			{
				break;
 8003920:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800392a:	e003      	b.n	8003934 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	2b37      	cmp	r3, #55	@ 0x37
 8003938:	d901      	bls.n	800393e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800393a:	2337      	movs	r3, #55	@ 0x37
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003948:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	2200      	movs	r2, #0
 800394e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff f801 	bl	800295c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	3318      	adds	r3, #24
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fffc 	bl	800295c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003968:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	2200      	movs	r2, #0
 8003986:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	3354      	adds	r3, #84	@ 0x54
 800398e:	224c      	movs	r2, #76	@ 0x4c
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f002 f8a0 	bl	8005ad8 <memset>
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	4a0d      	ldr	r2, [pc, #52]	@ (80039d0 <prvInitialiseNewTask+0x144>)
 800399c:	659a      	str	r2, [r3, #88]	@ 0x58
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	4a0c      	ldr	r2, [pc, #48]	@ (80039d4 <prvInitialiseNewTask+0x148>)
 80039a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <prvInitialiseNewTask+0x14c>)
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	69b8      	ldr	r0, [r7, #24]
 80039b0:	f001 fa5a 	bl	8004e68 <pxPortInitialiseStack>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20004b08 	.word	0x20004b08
 80039d4:	20004b70 	.word	0x20004b70
 80039d8:	20004bd8 	.word	0x20004bd8

080039dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039e4:	f001 fb70 	bl	80050c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 80039f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039f2:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039fa:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d110      	bne.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a08:	f000 fc2e 	bl	8004268 <prvInitialiseTaskLists>
 8003a0c:	e00d      	b.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a0e:	4b26      	ldr	r3, [pc, #152]	@ (8003aa8 <prvAddNewTaskToReadyList+0xcc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a16:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d802      	bhi.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a2a:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <prvAddNewTaskToReadyList+0xd4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d903      	bls.n	8003a50 <prvAddNewTaskToReadyList+0x74>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <prvAddNewTaskToReadyList+0xd4>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a15      	ldr	r2, [pc, #84]	@ (8003ab4 <prvAddNewTaskToReadyList+0xd8>)
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fe ff85 	bl	8002976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a6c:	f001 fb5e 	bl	800512c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a70:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <prvAddNewTaskToReadyList+0xcc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d207      	bcs.n	8003a96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a86:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <prvAddNewTaskToReadyList+0xdc>)
 8003a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000d88 	.word	0x20000d88
 8003aa4:	200008b4 	.word	0x200008b4
 8003aa8:	20000d94 	.word	0x20000d94
 8003aac:	20000da4 	.word	0x20000da4
 8003ab0:	20000d90 	.word	0x20000d90
 8003ab4:	200008b8 	.word	0x200008b8
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <vTaskDelay+0x64>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <vTaskDelay+0x32>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60bb      	str	r3, [r7, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aee:	f000 f88b 	bl	8003c08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fe09 	bl	800470c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003afa:	f000 f893 	bl	8003c24 <xTaskResumeAll>
 8003afe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <vTaskDelay+0x68>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000db0 	.word	0x20000db0
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b36:	463a      	mov	r2, r7
 8003b38:	1d39      	adds	r1, r7, #4
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe feb8 	bl	80028b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	9202      	str	r2, [sp, #8]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	460a      	mov	r2, r1
 8003b56:	4924      	ldr	r1, [pc, #144]	@ (8003be8 <vTaskStartScheduler+0xc0>)
 8003b58:	4824      	ldr	r0, [pc, #144]	@ (8003bec <vTaskStartScheduler+0xc4>)
 8003b5a:	f7ff fdf1 	bl	8003740 <xTaskCreateStatic>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4a23      	ldr	r2, [pc, #140]	@ (8003bf0 <vTaskStartScheduler+0xc8>)
 8003b62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b64:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <vTaskStartScheduler+0xc8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e001      	b.n	8003b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b7c:	f000 fe1a 	bl	80047b4 <xTimerCreateTimerTask>
 8003b80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d11b      	bne.n	8003bc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	613b      	str	r3, [r7, #16]
}
 8003b9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b9c:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <vTaskStartScheduler+0xcc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3354      	adds	r3, #84	@ 0x54
 8003ba2:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <vTaskStartScheduler+0xd0>)
 8003ba4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <vTaskStartScheduler+0xd4>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bae:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <vTaskStartScheduler+0xd8>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <vTaskStartScheduler+0xdc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bba:	f001 f9e1 	bl	8004f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bbe:	e00f      	b.n	8003be0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d10b      	bne.n	8003be0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60fb      	str	r3, [r7, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <vTaskStartScheduler+0xb4>
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	08006288 	.word	0x08006288
 8003bec:	08004239 	.word	0x08004239
 8003bf0:	20000dac 	.word	0x20000dac
 8003bf4:	200008b4 	.word	0x200008b4
 8003bf8:	2000001c 	.word	0x2000001c
 8003bfc:	20000da8 	.word	0x20000da8
 8003c00:	20000d94 	.word	0x20000d94
 8003c04:	20000d8c 	.word	0x20000d8c

08003c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <vTaskSuspendAll+0x18>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a03      	ldr	r2, [pc, #12]	@ (8003c20 <vTaskSuspendAll+0x18>)
 8003c14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000db0 	.word	0x20000db0

08003c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c32:	4b42      	ldr	r3, [pc, #264]	@ (8003d3c <xTaskResumeAll+0x118>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	603b      	str	r3, [r7, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	e7fd      	b.n	8003c4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c52:	f001 fa39 	bl	80050c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c56:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <xTaskResumeAll+0x118>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	4a37      	ldr	r2, [pc, #220]	@ (8003d3c <xTaskResumeAll+0x118>)
 8003c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c60:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <xTaskResumeAll+0x118>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d162      	bne.n	8003d2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c68:	4b35      	ldr	r3, [pc, #212]	@ (8003d40 <xTaskResumeAll+0x11c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d05e      	beq.n	8003d2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c70:	e02f      	b.n	8003cd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b34      	ldr	r3, [pc, #208]	@ (8003d44 <xTaskResumeAll+0x120>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fed6 	bl	8002a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fed1 	bl	8002a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c92:	4b2d      	ldr	r3, [pc, #180]	@ (8003d48 <xTaskResumeAll+0x124>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <xTaskResumeAll+0x7e>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <xTaskResumeAll+0x124>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <xTaskResumeAll+0x128>)
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe fe5c 	bl	8002976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc2:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <xTaskResumeAll+0x12c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ccc:	4b21      	ldr	r3, [pc, #132]	@ (8003d54 <xTaskResumeAll+0x130>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <xTaskResumeAll+0x120>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cb      	bne.n	8003c72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ce0:	f000 fb66 	bl	80043b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <xTaskResumeAll+0x134>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cf0:	f000 f846 	bl	8003d80 <xTaskIncrementTick>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <xTaskResumeAll+0x130>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f1      	bne.n	8003cf0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <xTaskResumeAll+0x134>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <xTaskResumeAll+0x130>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d5c <xTaskResumeAll+0x138>)
 8003d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 f9fd 	bl	800512c <vPortExitCritical>

	return xAlreadyYielded;
 8003d32:	68bb      	ldr	r3, [r7, #8]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000db0 	.word	0x20000db0
 8003d40:	20000d88 	.word	0x20000d88
 8003d44:	20000d48 	.word	0x20000d48
 8003d48:	20000d90 	.word	0x20000d90
 8003d4c:	200008b8 	.word	0x200008b8
 8003d50:	200008b4 	.word	0x200008b4
 8003d54:	20000d9c 	.word	0x20000d9c
 8003d58:	20000d98 	.word	0x20000d98
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <xTaskGetTickCount+0x1c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d6c:	687b      	ldr	r3, [r7, #4]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000d8c 	.word	0x20000d8c

08003d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec8 <xTaskIncrementTick+0x148>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 8090 	bne.w	8003eb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <xTaskIncrementTick+0x14c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003ecc <xTaskIncrementTick+0x14c>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d121      	bne.n	8003dec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003da8:	4b49      	ldr	r3, [pc, #292]	@ (8003ed0 <xTaskIncrementTick+0x150>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <xTaskIncrementTick+0x4a>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	603b      	str	r3, [r7, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xTaskIncrementTick+0x46>
 8003dca:	4b41      	ldr	r3, [pc, #260]	@ (8003ed0 <xTaskIncrementTick+0x150>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	4b40      	ldr	r3, [pc, #256]	@ (8003ed4 <xTaskIncrementTick+0x154>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed0 <xTaskIncrementTick+0x150>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed4 <xTaskIncrementTick+0x154>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <xTaskIncrementTick+0x158>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed8 <xTaskIncrementTick+0x158>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	f000 fae2 	bl	80043b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dec:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <xTaskIncrementTick+0x15c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d349      	bcc.n	8003e8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df6:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <xTaskIncrementTick+0x150>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <xTaskIncrementTick+0x15c>)
 8003e02:	f04f 32ff 	mov.w	r2, #4294967295
 8003e06:	601a      	str	r2, [r3, #0]
					break;
 8003e08:	e03f      	b.n	8003e8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <xTaskIncrementTick+0x150>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d203      	bcs.n	8003e2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <xTaskIncrementTick+0x15c>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e28:	e02f      	b.n	8003e8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fdfe 	bl	8002a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fdf5 	bl	8002a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <xTaskIncrementTick+0x160>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d903      	bls.n	8003e5a <xTaskIncrementTick+0xda>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <xTaskIncrementTick+0x160>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <xTaskIncrementTick+0x164>)
 8003e68:	441a      	add	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7fe fd80 	bl	8002976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <xTaskIncrementTick+0x168>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3b8      	bcc.n	8003df6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e88:	e7b5      	b.n	8003df6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <xTaskIncrementTick+0x168>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e90:	4914      	ldr	r1, [pc, #80]	@ (8003ee4 <xTaskIncrementTick+0x164>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d901      	bls.n	8003ea6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ea6:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <xTaskIncrementTick+0x16c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e004      	b.n	8003ebe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <xTaskIncrementTick+0x170>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef0 <xTaskIncrementTick+0x170>)
 8003ebc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000db0 	.word	0x20000db0
 8003ecc:	20000d8c 	.word	0x20000d8c
 8003ed0:	20000d40 	.word	0x20000d40
 8003ed4:	20000d44 	.word	0x20000d44
 8003ed8:	20000da0 	.word	0x20000da0
 8003edc:	20000da8 	.word	0x20000da8
 8003ee0:	20000d90 	.word	0x20000d90
 8003ee4:	200008b8 	.word	0x200008b8
 8003ee8:	200008b4 	.word	0x200008b4
 8003eec:	20000d9c 	.word	0x20000d9c
 8003ef0:	20000d98 	.word	0x20000d98

08003ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003efa:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <vTaskSwitchContext+0xb4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f02:	4b2a      	ldr	r3, [pc, #168]	@ (8003fac <vTaskSwitchContext+0xb8>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f08:	e047      	b.n	8003f9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <vTaskSwitchContext+0xb8>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f10:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <vTaskSwitchContext+0xbc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e011      	b.n	8003f3c <vTaskSwitchContext+0x48>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <vTaskSwitchContext+0x42>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	607b      	str	r3, [r7, #4]
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	e7fd      	b.n	8003f32 <vTaskSwitchContext+0x3e>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	491d      	ldr	r1, [pc, #116]	@ (8003fb4 <vTaskSwitchContext+0xc0>)
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0e3      	beq.n	8003f18 <vTaskSwitchContext+0x24>
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <vTaskSwitchContext+0xc0>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3308      	adds	r3, #8
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d104      	bne.n	8003f80 <vTaskSwitchContext+0x8c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <vTaskSwitchContext+0xc4>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <vTaskSwitchContext+0xbc>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f90:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <vTaskSwitchContext+0xc4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3354      	adds	r3, #84	@ 0x54
 8003f96:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <vTaskSwitchContext+0xc8>)
 8003f98:	6013      	str	r3, [r2, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000db0 	.word	0x20000db0
 8003fac:	20000d9c 	.word	0x20000d9c
 8003fb0:	20000d90 	.word	0x20000d90
 8003fb4:	200008b8 	.word	0x200008b8
 8003fb8:	200008b4 	.word	0x200008b4
 8003fbc:	2000001c 	.word	0x2000001c

08003fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fe8:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <vTaskPlaceOnEventList+0x48>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3318      	adds	r3, #24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fce4 	bl	80029be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	6838      	ldr	r0, [r7, #0]
 8003ffa:	f000 fb87 	bl	800470c <prvAddCurrentTaskToDelayedList>
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200008b4 	.word	0x200008b4

0800400c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	617b      	str	r3, [r7, #20]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <vTaskPlaceOnEventListRestricted+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3318      	adds	r3, #24
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7fe fc99 	bl	8002976 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f000 fb5a 	bl	800470c <prvAddCurrentTaskToDelayedList>
	}
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200008b4 	.word	0x200008b4

08004064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3318      	adds	r3, #24
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fcca 	bl	8002a30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <xTaskRemoveFromEventList+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fcc1 	bl	8002a30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <xTaskRemoveFromEventList+0x5e>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <xTaskRemoveFromEventList+0xb8>)
 80040d0:	441a      	add	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe fc4c 	bl	8002976 <vListInsertEnd>
 80040de:	e005      	b.n	80040ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4619      	mov	r1, r3
 80040e6:	480e      	ldr	r0, [pc, #56]	@ (8004120 <xTaskRemoveFromEventList+0xbc>)
 80040e8:	f7fe fc45 	bl	8002976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <xTaskRemoveFromEventList+0xc0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d905      	bls.n	8004106 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <xTaskRemoveFromEventList+0xc4>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e001      	b.n	800410a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800410a:	697b      	ldr	r3, [r7, #20]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000db0 	.word	0x20000db0
 8004118:	20000d90 	.word	0x20000d90
 800411c:	200008b8 	.word	0x200008b8
 8004120:	20000d48 	.word	0x20000d48
 8004124:	200008b4 	.word	0x200008b4
 8004128:	20000d9c 	.word	0x20000d9c

0800412c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <vTaskInternalSetTimeOutState+0x24>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <vTaskInternalSetTimeOutState+0x28>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000da0 	.word	0x20000da0
 8004154:	20000d8c 	.word	0x20000d8c

08004158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	613b      	str	r3, [r7, #16]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800419e:	f000 ff93 	bl	80050c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <xTaskCheckForTimeOut+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d102      	bne.n	80041c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e023      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b15      	ldr	r3, [pc, #84]	@ (800421c <xTaskCheckForTimeOut+0xc4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d007      	beq.n	80041de <xTaskCheckForTimeOut+0x86>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e015      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d20b      	bcs.n	8004200 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff99 	bl	800412c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e004      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800420a:	f000 ff8f 	bl	800512c <vPortExitCritical>

	return xReturn;
 800420e:	69fb      	ldr	r3, [r7, #28]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000d8c 	.word	0x20000d8c
 800421c:	20000da0 	.word	0x20000da0

08004220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <vTaskMissedYield+0x14>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000d9c 	.word	0x20000d9c

08004238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004240:	f000 f852 	bl	80042e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <prvIdleTask+0x28>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d9f9      	bls.n	8004240 <prvIdleTask+0x8>
			{
				taskYIELD();
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <prvIdleTask+0x2c>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800425c:	e7f0      	b.n	8004240 <prvIdleTask+0x8>
 800425e:	bf00      	nop
 8004260:	200008b8 	.word	0x200008b8
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	e00c      	b.n	800428e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <prvInitialiseTaskLists+0x60>)
 8004280:	4413      	add	r3, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fb4a 	bl	800291c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b37      	cmp	r3, #55	@ 0x37
 8004292:	d9ef      	bls.n	8004274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004294:	480d      	ldr	r0, [pc, #52]	@ (80042cc <prvInitialiseTaskLists+0x64>)
 8004296:	f7fe fb41 	bl	800291c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800429a:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <prvInitialiseTaskLists+0x68>)
 800429c:	f7fe fb3e 	bl	800291c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042a0:	480c      	ldr	r0, [pc, #48]	@ (80042d4 <prvInitialiseTaskLists+0x6c>)
 80042a2:	f7fe fb3b 	bl	800291c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042a6:	480c      	ldr	r0, [pc, #48]	@ (80042d8 <prvInitialiseTaskLists+0x70>)
 80042a8:	f7fe fb38 	bl	800291c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042ac:	480b      	ldr	r0, [pc, #44]	@ (80042dc <prvInitialiseTaskLists+0x74>)
 80042ae:	f7fe fb35 	bl	800291c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <prvInitialiseTaskLists+0x78>)
 80042b4:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <prvInitialiseTaskLists+0x64>)
 80042b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <prvInitialiseTaskLists+0x7c>)
 80042ba:	4a05      	ldr	r2, [pc, #20]	@ (80042d0 <prvInitialiseTaskLists+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200008b8 	.word	0x200008b8
 80042cc:	20000d18 	.word	0x20000d18
 80042d0:	20000d2c 	.word	0x20000d2c
 80042d4:	20000d48 	.word	0x20000d48
 80042d8:	20000d5c 	.word	0x20000d5c
 80042dc:	20000d74 	.word	0x20000d74
 80042e0:	20000d40 	.word	0x20000d40
 80042e4:	20000d44 	.word	0x20000d44

080042e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ee:	e019      	b.n	8004324 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042f0:	f000 feea 	bl	80050c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f4:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <prvCheckTasksWaitingTermination+0x50>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fb95 	bl	8002a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <prvCheckTasksWaitingTermination+0x54>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <prvCheckTasksWaitingTermination+0x54>)
 800430e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004318:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800431a:	f000 ff07 	bl	800512c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f810 	bl	8004344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e1      	bne.n	80042f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000d5c 	.word	0x20000d5c
 800433c:	20000d88 	.word	0x20000d88
 8004340:	20000d70 	.word	0x20000d70

08004344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3354      	adds	r3, #84	@ 0x54
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fbd9 	bl	8005b08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	4618      	mov	r0, r3
 8004366:	f001 f89f 	bl	80054a8 <vPortFree>
				vPortFree( pxTCB );
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f89c 	bl	80054a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004370:	e019      	b.n	80043a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004378:	2b01      	cmp	r3, #1
 800437a:	d103      	bne.n	8004384 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f893 	bl	80054a8 <vPortFree>
	}
 8004382:	e010      	b.n	80043a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800438a:	2b02      	cmp	r3, #2
 800438c:	d00b      	beq.n	80043a6 <prvDeleteTCB+0x62>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60fb      	str	r3, [r7, #12]
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	e7fd      	b.n	80043a2 <prvDeleteTCB+0x5e>
	}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b6:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <prvResetNextTaskUnblockTime+0x38>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <prvResetNextTaskUnblockTime+0x3c>)
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043c8:	e008      	b.n	80043dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <prvResetNextTaskUnblockTime+0x38>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <prvResetNextTaskUnblockTime+0x3c>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	20000d40 	.word	0x20000d40
 80043ec:	20000da8 	.word	0x20000da8

080043f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <xTaskGetSchedulerState+0x34>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043fe:	2301      	movs	r3, #1
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	e008      	b.n	8004416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <xTaskGetSchedulerState+0x38>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800440c:	2302      	movs	r3, #2
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e001      	b.n	8004416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004416:	687b      	ldr	r3, [r7, #4]
	}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000d94 	.word	0x20000d94
 8004428:	20000db0 	.word	0x20000db0

0800442c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d051      	beq.n	80044e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004446:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <xTaskPriorityInherit+0xc4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	429a      	cmp	r2, r3
 800444e:	d241      	bcs.n	80044d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db06      	blt.n	8004466 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004458:	4b25      	ldr	r3, [pc, #148]	@ (80044f0 <xTaskPriorityInherit+0xc4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6959      	ldr	r1, [r3, #20]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <xTaskPriorityInherit+0xc8>)
 8004478:	4413      	add	r3, r2
 800447a:	4299      	cmp	r1, r3
 800447c:	d122      	bne.n	80044c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fad4 	bl	8002a30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004488:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <xTaskPriorityInherit+0xc4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	4b18      	ldr	r3, [pc, #96]	@ (80044f8 <xTaskPriorityInherit+0xcc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d903      	bls.n	80044a6 <xTaskPriorityInherit+0x7a>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	4a15      	ldr	r2, [pc, #84]	@ (80044f8 <xTaskPriorityInherit+0xcc>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4a10      	ldr	r2, [pc, #64]	@ (80044f4 <xTaskPriorityInherit+0xc8>)
 80044b4:	441a      	add	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fe fa5a 	bl	8002976 <vListInsertEnd>
 80044c2:	e004      	b.n	80044ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <xTaskPriorityInherit+0xc4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e008      	b.n	80044e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <xTaskPriorityInherit+0xc4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d201      	bcs.n	80044e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044e6:	68fb      	ldr	r3, [r7, #12]
	}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	200008b4 	.word	0x200008b4
 80044f4:	200008b8 	.word	0x200008b8
 80044f8:	20000d90 	.word	0x20000d90

080044fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d058      	beq.n	80045c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004512:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <xTaskPriorityDisinherit+0xd4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	429a      	cmp	r2, r3
 800451a:	d00b      	beq.n	8004534 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60bb      	str	r3, [r7, #8]
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	429a      	cmp	r2, r3
 8004568:	d02c      	beq.n	80045c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	2b00      	cmp	r3, #0
 8004570:	d128      	bne.n	80045c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fa5a 	bl	8002a30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004594:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <xTaskPriorityDisinherit+0xd8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d903      	bls.n	80045a4 <xTaskPriorityDisinherit+0xa8>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	4a0c      	ldr	r2, [pc, #48]	@ (80045d4 <xTaskPriorityDisinherit+0xd8>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <xTaskPriorityDisinherit+0xdc>)
 80045b2:	441a      	add	r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe f9db 	bl	8002976 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c4:	697b      	ldr	r3, [r7, #20]
	}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200008b4 	.word	0x200008b4
 80045d4:	20000d90 	.word	0x20000d90
 80045d8:	200008b8 	.word	0x200008b8

080045dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d06c      	beq.n	80046ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60fb      	str	r3, [r7, #12]
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d902      	bls.n	8004624 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	e002      	b.n	800462a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	429a      	cmp	r2, r3
 8004632:	d04c      	beq.n	80046ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	429a      	cmp	r2, r3
 800463c:	d147      	bne.n	80046ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800463e:	4b26      	ldr	r3, [pc, #152]	@ (80046d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d10b      	bne.n	8004660 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60bb      	str	r3, [r7, #8]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db04      	blt.n	800467e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	6959      	ldr	r1, [r3, #20]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4a13      	ldr	r2, [pc, #76]	@ (80046dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800468e:	4413      	add	r3, r2
 8004690:	4299      	cmp	r1, r3
 8004692:	d11c      	bne.n	80046ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe f9c9 	bl	8002a30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a2:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	4a0c      	ldr	r2, [pc, #48]	@ (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4a07      	ldr	r2, [pc, #28]	@ (80046dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80046c0:	441a      	add	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe f954 	bl	8002976 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ce:	bf00      	nop
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	200008b4 	.word	0x200008b4
 80046dc:	200008b8 	.word	0x200008b8
 80046e0:	20000d90 	.word	0x20000d90

080046e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046e8:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046f6:	3201      	adds	r2, #1
 80046f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80046fa:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	200008b4 	.word	0x200008b4

0800470c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004716:	4b21      	ldr	r3, [pc, #132]	@ (800479c <prvAddCurrentTaskToDelayedList+0x90>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471c:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f984 	bl	8002a30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d10a      	bne.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4819      	ldr	r0, [pc, #100]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004740:	f7fe f919 	bl	8002976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004744:	e026      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800474e:	4b14      	ldr	r3, [pc, #80]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d209      	bcs.n	8004772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475e:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe f927 	bl	80029be <vListInsert>
}
 8004770:	e010      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe f91d 	bl	80029be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d202      	bcs.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800478e:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000d8c 	.word	0x20000d8c
 80047a0:	200008b4 	.word	0x200008b4
 80047a4:	20000d74 	.word	0x20000d74
 80047a8:	20000d44 	.word	0x20000d44
 80047ac:	20000d40 	.word	0x20000d40
 80047b0:	20000da8 	.word	0x20000da8

080047b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	@ 0x28
 80047b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047be:	f000 fb13 	bl	8004de8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <xTimerCreateTimerTask+0x84>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047d2:	1d3a      	adds	r2, r7, #4
 80047d4:	f107 0108 	add.w	r1, r7, #8
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe f883 	bl	80028e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	9202      	str	r2, [sp, #8]
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	2302      	movs	r3, #2
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	460a      	mov	r2, r1
 80047f4:	4911      	ldr	r1, [pc, #68]	@ (800483c <xTimerCreateTimerTask+0x88>)
 80047f6:	4812      	ldr	r0, [pc, #72]	@ (8004840 <xTimerCreateTimerTask+0x8c>)
 80047f8:	f7fe ffa2 	bl	8003740 <xTaskCreateStatic>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4a11      	ldr	r2, [pc, #68]	@ (8004844 <xTimerCreateTimerTask+0x90>)
 8004800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <xTimerCreateTimerTask+0x90>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800482c:	697b      	ldr	r3, [r7, #20]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000de4 	.word	0x20000de4
 800483c:	08006290 	.word	0x08006290
 8004840:	08004981 	.word	0x08004981
 8004844:	20000de8 	.word	0x20000de8

08004848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <xTimerGenericCommand+0x30>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02a      	beq.n	80048d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	dc18      	bgt.n	80048c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004892:	f7ff fdad 	bl	80043f0 <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b02      	cmp	r3, #2
 800489a:	d109      	bne.n	80048b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800489c:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	f107 0110 	add.w	r1, r7, #16
 80048a4:	2300      	movs	r3, #0
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	f7fe fa32 	bl	8002d10 <xQueueGenericSend>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80048ae:	e012      	b.n	80048d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	f107 0110 	add.w	r1, r7, #16
 80048b8:	2300      	movs	r3, #0
 80048ba:	2200      	movs	r2, #0
 80048bc:	f7fe fa28 	bl	8002d10 <xQueueGenericSend>
 80048c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80048c2:	e008      	b.n	80048d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	f107 0110 	add.w	r1, r7, #16
 80048cc:	2300      	movs	r3, #0
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	f7fe fb20 	bl	8002f14 <xQueueGenericSendFromISR>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000de4 	.word	0x20000de4

080048e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ee:	4b23      	ldr	r3, [pc, #140]	@ (800497c <prvProcessExpiredTimer+0x98>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe f897 	bl	8002a30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f000 f8d5 	bl	8004acc <prvInsertTimerInActiveList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff88 	bl	8004848 <xTimerGenericCommand>
 8004938:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	6978      	ldr	r0, [r7, #20]
 8004970:	4798      	blx	r3
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000ddc 	.word	0x20000ddc

08004980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f859 	bl	8004a44 <prvGetNextExpireTime>
 8004992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4619      	mov	r1, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f805 	bl	80049a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800499e:	f000 f8d7 	bl	8004b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a2:	bf00      	nop
 80049a4:	e7f0      	b.n	8004988 <prvTimerTask+0x8>
	...

080049a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049b2:	f7ff f929 	bl	8003c08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f866 	bl	8004a8c <prvSampleTimeNow>
 80049c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d130      	bne.n	8004a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d806      	bhi.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049d6:	f7ff f925 	bl	8003c24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff81 	bl	80048e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049e2:	e024      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ea:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <prvProcessTimerOrBlockTask+0x90>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <prvProcessTimerOrBlockTask+0x50>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <prvProcessTimerOrBlockTask+0x52>
 80049f8:	2300      	movs	r3, #0
 80049fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049fc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <prvProcessTimerOrBlockTask+0x94>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fe fe65 	bl	80036d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a0e:	f7ff f909 	bl	8003c24 <xTaskResumeAll>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <prvProcessTimerOrBlockTask+0x98>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
}
 8004a28:	e001      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a2a:	f7ff f8fb 	bl	8003c24 <xTaskResumeAll>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000de0 	.word	0x20000de0
 8004a3c:	20000de4 	.word	0x20000de4
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <prvGetNextExpireTime+0x16>
 8004a56:	2201      	movs	r2, #1
 8004a58:	e000      	b.n	8004a5c <prvGetNextExpireTime+0x18>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e001      	b.n	8004a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000ddc 	.word	0x20000ddc

08004a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a94:	f7ff f964 	bl	8003d60 <xTaskGetTickCount>
 8004a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d205      	bcs.n	8004ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004aa4:	f000 f93a 	bl	8004d1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000dec 	.word	0x20000dec

08004acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d812      	bhi.n	8004b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e01b      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b06:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <prvInsertTimerInActiveList+0x7c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fd ff54 	bl	80029be <vListInsert>
 8004b16:	e012      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d206      	bcs.n	8004b2e <prvInsertTimerInActiveList+0x62>
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e007      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <prvInsertTimerInActiveList+0x80>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fd ff40 	bl	80029be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b3e:	697b      	ldr	r3, [r7, #20]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000de0 	.word	0x20000de0
 8004b4c:	20000ddc 	.word	0x20000ddc

08004b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	@ 0x38
 8004b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b56:	e0ce      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da19      	bge.n	8004b92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	3304      	adds	r3, #4
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	61fb      	str	r3, [r7, #28]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b88:	6850      	ldr	r0, [r2, #4]
 8004b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b8c:	6892      	ldr	r2, [r2, #8]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f2c0 80ae 	blt.w	8004cf6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd ff40 	bl	8002a30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff6a 	bl	8004a8c <prvSampleTimeNow>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	f200 8097 	bhi.w	8004cf0 <prvProcessReceivedCommands+0x1a0>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <prvProcessReceivedCommands+0x78>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004c67 	.word	0x08004c67
 8004bd8:	08004c7b 	.word	0x08004c7b
 8004bdc:	08004cc7 	.word	0x08004cc7
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bf1 	.word	0x08004bf1
 8004be8:	08004c67 	.word	0x08004c67
 8004bec:	08004c7b 	.word	0x08004c7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	18d1      	adds	r1, r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c10:	f7ff ff5c 	bl	8004acc <prvInsertTimerInActiveList>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06c      	beq.n	8004cf4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d061      	beq.n	8004cf4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	441a      	add	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c42:	f7ff fe01 	bl	8004848 <xTimerGenericCommand>
 8004c46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d152      	bne.n	8004cf4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61bb      	str	r3, [r7, #24]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c78:	e03d      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	617b      	str	r3, [r7, #20]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	18d1      	adds	r1, r2, r3
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc0:	f7ff ff04 	bl	8004acc <prvInsertTimerInActiveList>
					break;
 8004cc4:	e017      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d103      	bne.n	8004cdc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd6:	f000 fbe7 	bl	80054a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cda:	e00c      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cee:	e002      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004cf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cf6:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <prvProcessReceivedCommands+0x1c8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1d39      	adds	r1, r7, #4
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe f9a6 	bl	8003050 <xQueueReceive>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f47f af26 	bne.w	8004b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3730      	adds	r7, #48	@ 0x30
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000de4 	.word	0x20000de4

08004d1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d22:	e049      	b.n	8004db8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d24:	4b2e      	ldr	r3, [pc, #184]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fd fe77 	bl	8002a30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d90e      	bls.n	8004d88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d76:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7fd fe1c 	bl	80029be <vListInsert>
 8004d86:	e017      	b.n	8004db8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	2100      	movs	r1, #0
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fd58 	bl	8004848 <xTimerGenericCommand>
 8004d98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	603b      	str	r3, [r7, #0]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004db8:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1b0      	bne.n	8004d24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dc2:	4b07      	ldr	r3, [pc, #28]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <prvSwitchTimerLists+0xc8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <prvSwitchTimerLists+0xc4>)
 8004dce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dd0:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <prvSwitchTimerLists+0xc8>)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6013      	str	r3, [r2, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000ddc 	.word	0x20000ddc
 8004de4:	20000de0 	.word	0x20000de0

08004de8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dee:	f000 f96b 	bl	80050c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004df2:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <prvCheckForValidListAndQueue+0x60>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d120      	bne.n	8004e3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dfa:	4814      	ldr	r0, [pc, #80]	@ (8004e4c <prvCheckForValidListAndQueue+0x64>)
 8004dfc:	f7fd fd8e 	bl	800291c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e00:	4813      	ldr	r0, [pc, #76]	@ (8004e50 <prvCheckForValidListAndQueue+0x68>)
 8004e02:	f7fd fd8b 	bl	800291c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e06:	4b13      	ldr	r3, [pc, #76]	@ (8004e54 <prvCheckForValidListAndQueue+0x6c>)
 8004e08:	4a10      	ldr	r2, [pc, #64]	@ (8004e4c <prvCheckForValidListAndQueue+0x64>)
 8004e0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e0c:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <prvCheckForValidListAndQueue+0x70>)
 8004e0e:	4a10      	ldr	r2, [pc, #64]	@ (8004e50 <prvCheckForValidListAndQueue+0x68>)
 8004e10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <prvCheckForValidListAndQueue+0x74>)
 8004e18:	4a11      	ldr	r2, [pc, #68]	@ (8004e60 <prvCheckForValidListAndQueue+0x78>)
 8004e1a:	2110      	movs	r1, #16
 8004e1c:	200a      	movs	r0, #10
 8004e1e:	f7fd fe9b 	bl	8002b58 <xQueueGenericCreateStatic>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <prvCheckForValidListAndQueue+0x60>)
 8004e26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <prvCheckForValidListAndQueue+0x60>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e30:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <prvCheckForValidListAndQueue+0x60>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	490b      	ldr	r1, [pc, #44]	@ (8004e64 <prvCheckForValidListAndQueue+0x7c>)
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fc24 	bl	8003684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e3c:	f000 f976 	bl	800512c <vPortExitCritical>
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000de4 	.word	0x20000de4
 8004e4c:	20000db4 	.word	0x20000db4
 8004e50:	20000dc8 	.word	0x20000dc8
 8004e54:	20000ddc 	.word	0x20000ddc
 8004e58:	20000de0 	.word	0x20000de0
 8004e5c:	20000e90 	.word	0x20000e90
 8004e60:	20000df0 	.word	0x20000df0
 8004e64:	08006298 	.word	0x08006298

08004e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b04      	subs	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f023 0201 	bic.w	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e98:	4a0c      	ldr	r2, [pc, #48]	@ (8004ecc <pxPortInitialiseStack+0x64>)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b14      	subs	r3, #20
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b04      	subs	r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f06f 0202 	mvn.w	r2, #2
 8004eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b20      	subs	r3, #32
 8004ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	08004ed1 	.word	0x08004ed1

08004ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eda:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <prvTaskExitError+0x58>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d00b      	beq.n	8004efc <prvTaskExitError+0x2c>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <prvTaskExitError+0x28>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60bb      	str	r3, [r7, #8]
}
 8004f0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f10:	bf00      	nop
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0fc      	beq.n	8004f12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	2000000c 	.word	0x2000000c
 8004f2c:	00000000 	.word	0x00000000

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <pxCurrentTCBConst2>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	f380 8809 	msr	PSP, r0
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	4770      	bx	lr
 8004f4c:	f3af 8000 	nop.w

08004f50 <pxCurrentTCBConst2>:
 8004f50:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f58:	4808      	ldr	r0, [pc, #32]	@ (8004f7c <prvPortStartFirstTask+0x24>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f380 8808 	msr	MSP, r0
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8814 	msr	CONTROL, r0
 8004f6a:	b662      	cpsie	i
 8004f6c:	b661      	cpsie	f
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	df00      	svc	0
 8004f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed08 	.word	0xe000ed08

08004f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f86:	4b47      	ldr	r3, [pc, #284]	@ (80050a4 <xPortStartScheduler+0x124>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a47      	ldr	r2, [pc, #284]	@ (80050a8 <xPortStartScheduler+0x128>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10b      	bne.n	8004fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	613b      	str	r3, [r7, #16]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80050a4 <xPortStartScheduler+0x124>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3f      	ldr	r2, [pc, #252]	@ (80050ac <xPortStartScheduler+0x12c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10b      	bne.n	8004fca <xPortStartScheduler+0x4a>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fca:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <xPortStartScheduler+0x130>)
 8004fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	22ff      	movs	r2, #255	@ 0xff
 8004fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b31      	ldr	r3, [pc, #196]	@ (80050b4 <xPortStartScheduler+0x134>)
 8004ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ff2:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <xPortStartScheduler+0x138>)
 8004ff4:	2207      	movs	r2, #7
 8004ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ff8:	e009      	b.n	800500e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80050b8 <xPortStartScheduler+0x138>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	4a2d      	ldr	r2, [pc, #180]	@ (80050b8 <xPortStartScheduler+0x138>)
 8005002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d0ef      	beq.n	8004ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800501a:	4b27      	ldr	r3, [pc, #156]	@ (80050b8 <xPortStartScheduler+0x138>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1c3 0307 	rsb	r3, r3, #7
 8005022:	2b04      	cmp	r3, #4
 8005024:	d00b      	beq.n	800503e <xPortStartScheduler+0xbe>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60bb      	str	r3, [r7, #8]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800503e:	4b1e      	ldr	r3, [pc, #120]	@ (80050b8 <xPortStartScheduler+0x138>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	4a1c      	ldr	r2, [pc, #112]	@ (80050b8 <xPortStartScheduler+0x138>)
 8005046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005048:	4b1b      	ldr	r3, [pc, #108]	@ (80050b8 <xPortStartScheduler+0x138>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005050:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <xPortStartScheduler+0x138>)
 8005052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <xPortStartScheduler+0x13c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <xPortStartScheduler+0x13c>)
 8005062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <xPortStartScheduler+0x13c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a13      	ldr	r2, [pc, #76]	@ (80050bc <xPortStartScheduler+0x13c>)
 800506e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005074:	f000 f8da 	bl	800522c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005078:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <xPortStartScheduler+0x140>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800507e:	f000 f8f9 	bl	8005274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005082:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <xPortStartScheduler+0x144>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a0f      	ldr	r2, [pc, #60]	@ (80050c4 <xPortStartScheduler+0x144>)
 8005088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800508c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800508e:	f7ff ff63 	bl	8004f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005092:	f7fe ff2f 	bl	8003ef4 <vTaskSwitchContext>
	prvTaskExitError();
 8005096:	f7ff ff1b 	bl	8004ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed00 	.word	0xe000ed00
 80050a8:	410fc271 	.word	0x410fc271
 80050ac:	410fc270 	.word	0x410fc270
 80050b0:	e000e400 	.word	0xe000e400
 80050b4:	20000ee0 	.word	0x20000ee0
 80050b8:	20000ee4 	.word	0x20000ee4
 80050bc:	e000ed20 	.word	0xe000ed20
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	e000ef34 	.word	0xe000ef34

080050c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
}
 80050e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <vPortEnterCritical+0x5c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <vPortEnterCritical+0x5c>)
 80050ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <vPortEnterCritical+0x5c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d110      	bne.n	8005116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <vPortEnterCritical+0x60>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <vPortEnterCritical+0x4e>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	603b      	str	r3, [r7, #0]
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	e7fd      	b.n	8005112 <vPortEnterCritical+0x4a>
	}
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005132:	4b12      	ldr	r3, [pc, #72]	@ (800517c <vPortExitCritical+0x50>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <vPortExitCritical+0x26>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	e7fd      	b.n	800514e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <vPortExitCritical+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	4a08      	ldr	r2, [pc, #32]	@ (800517c <vPortExitCritical+0x50>)
 800515a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800515c:	4b07      	ldr	r3, [pc, #28]	@ (800517c <vPortExitCritical+0x50>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <vPortExitCritical+0x44>
 8005164:	2300      	movs	r3, #0
 8005166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f383 8811 	msr	BASEPRI, r3
}
 800516e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	2000000c 	.word	0x2000000c

08005180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005180:	f3ef 8009 	mrs	r0, PSP
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	4b15      	ldr	r3, [pc, #84]	@ (80051e0 <pxCurrentTCBConst>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	f01e 0f10 	tst.w	lr, #16
 8005190:	bf08      	it	eq
 8005192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051a4:	f380 8811 	msr	BASEPRI, r0
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f7fe fea0 	bl	8003ef4 <vTaskSwitchContext>
 80051b4:	f04f 0000 	mov.w	r0, #0
 80051b8:	f380 8811 	msr	BASEPRI, r0
 80051bc:	bc09      	pop	{r0, r3}
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	6808      	ldr	r0, [r1, #0]
 80051c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c6:	f01e 0f10 	tst.w	lr, #16
 80051ca:	bf08      	it	eq
 80051cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051d0:	f380 8809 	msr	PSP, r0
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	f3af 8000 	nop.w

080051e0 <pxCurrentTCBConst>:
 80051e0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
}
 8005200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005202:	f7fe fdbd 	bl	8003d80 <xTaskIncrementTick>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <xPortSysTickHandler+0x40>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
}
 800521e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <vPortSetupTimerInterrupt+0x38>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800523c:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <vPortSetupTimerInterrupt+0x3c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0a      	ldr	r2, [pc, #40]	@ (800526c <vPortSetupTimerInterrupt+0x40>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <vPortSetupTimerInterrupt+0x44>)
 800524a:	3b01      	subs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800524e:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005250:	2207      	movs	r2, #7
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000e010 	.word	0xe000e010
 8005264:	e000e018 	.word	0xe000e018
 8005268:	20000000 	.word	0x20000000
 800526c:	10624dd3 	.word	0x10624dd3
 8005270:	e000e014 	.word	0xe000e014

08005274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005284 <vPortEnableVFP+0x10>
 8005278:	6801      	ldr	r1, [r0, #0]
 800527a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800527e:	6001      	str	r1, [r0, #0]
 8005280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005282:	bf00      	nop
 8005284:	e000ed88 	.word	0xe000ed88

08005288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800528e:	f3ef 8305 	mrs	r3, IPSR
 8005292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	d915      	bls.n	80052c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800529a:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <vPortValidateInterruptPriority+0x74>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052a4:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <vPortValidateInterruptPriority+0x78>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	7afa      	ldrb	r2, [r7, #11]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d20b      	bcs.n	80052c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <vPortValidateInterruptPriority+0x7c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <vPortValidateInterruptPriority+0x80>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d90b      	bls.n	80052ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	603b      	str	r3, [r7, #0]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <vPortValidateInterruptPriority+0x62>
	}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	e000e3f0 	.word	0xe000e3f0
 8005300:	20000ee0 	.word	0x20000ee0
 8005304:	e000ed0c 	.word	0xe000ed0c
 8005308:	20000ee4 	.word	0x20000ee4

0800530c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	@ 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005318:	f7fe fc76 	bl	8003c08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800531c:	4b5c      	ldr	r3, [pc, #368]	@ (8005490 <pvPortMalloc+0x184>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005324:	f000 f924 	bl	8005570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005328:	4b5a      	ldr	r3, [pc, #360]	@ (8005494 <pvPortMalloc+0x188>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 8095 	bne.w	8005460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800533c:	2208      	movs	r2, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f023 0307 	bic.w	r3, r3, #7
 8005354:	3308      	adds	r3, #8
 8005356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <pvPortMalloc+0x6e>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d06f      	beq.n	8005460 <pvPortMalloc+0x154>
 8005380:	4b45      	ldr	r3, [pc, #276]	@ (8005498 <pvPortMalloc+0x18c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d86a      	bhi.n	8005460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800538a:	4b44      	ldr	r3, [pc, #272]	@ (800549c <pvPortMalloc+0x190>)
 800538c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800538e:	4b43      	ldr	r3, [pc, #268]	@ (800549c <pvPortMalloc+0x190>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005394:	e004      	b.n	80053a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d903      	bls.n	80053b2 <pvPortMalloc+0xa6>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f1      	bne.n	8005396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053b2:	4b37      	ldr	r3, [pc, #220]	@ (8005490 <pvPortMalloc+0x184>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d051      	beq.n	8005460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2208      	movs	r2, #8
 80053c2:	4413      	add	r3, r2
 80053c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	1ad2      	subs	r2, r2, r3
 80053d6:	2308      	movs	r3, #8
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	429a      	cmp	r2, r3
 80053dc:	d920      	bls.n	8005420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4413      	add	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <pvPortMalloc+0xfc>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	613b      	str	r3, [r7, #16]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800541a:	69b8      	ldr	r0, [r7, #24]
 800541c:	f000 f90a 	bl	8005634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005420:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <pvPortMalloc+0x18c>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <pvPortMalloc+0x18c>)
 800542c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800542e:	4b1a      	ldr	r3, [pc, #104]	@ (8005498 <pvPortMalloc+0x18c>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <pvPortMalloc+0x194>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d203      	bcs.n	8005442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800543a:	4b17      	ldr	r3, [pc, #92]	@ (8005498 <pvPortMalloc+0x18c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a18      	ldr	r2, [pc, #96]	@ (80054a0 <pvPortMalloc+0x194>)
 8005440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <pvPortMalloc+0x188>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	431a      	orrs	r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005456:	4b13      	ldr	r3, [pc, #76]	@ (80054a4 <pvPortMalloc+0x198>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a11      	ldr	r2, [pc, #68]	@ (80054a4 <pvPortMalloc+0x198>)
 800545e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005460:	f7fe fbe0 	bl	8003c24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <pvPortMalloc+0x17a>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <pvPortMalloc+0x176>
	return pvReturn;
 8005486:	69fb      	ldr	r3, [r7, #28]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	@ 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20004af0 	.word	0x20004af0
 8005494:	20004b04 	.word	0x20004b04
 8005498:	20004af4 	.word	0x20004af4
 800549c:	20004ae8 	.word	0x20004ae8
 80054a0:	20004af8 	.word	0x20004af8
 80054a4:	20004afc 	.word	0x20004afc

080054a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d04f      	beq.n	800555a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054ba:	2308      	movs	r3, #8
 80054bc:	425b      	negs	r3, r3
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <vPortFree+0xbc>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <vPortFree+0x46>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60fb      	str	r3, [r7, #12]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <vPortFree+0x66>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <vPortFree+0xbc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01e      	beq.n	800555a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11a      	bne.n	800555a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <vPortFree+0xbc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	43db      	mvns	r3, r3
 800552e:	401a      	ands	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005534:	f7fe fb68 	bl	8003c08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <vPortFree+0xc0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4413      	add	r3, r2
 8005542:	4a09      	ldr	r2, [pc, #36]	@ (8005568 <vPortFree+0xc0>)
 8005544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f000 f874 	bl	8005634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800554c:	4b07      	ldr	r3, [pc, #28]	@ (800556c <vPortFree+0xc4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3301      	adds	r3, #1
 8005552:	4a06      	ldr	r2, [pc, #24]	@ (800556c <vPortFree+0xc4>)
 8005554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005556:	f7fe fb65 	bl	8003c24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800555a:	bf00      	nop
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20004b04 	.word	0x20004b04
 8005568:	20004af4 	.word	0x20004af4
 800556c:	20004b00 	.word	0x20004b00

08005570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800557a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800557c:	4b27      	ldr	r3, [pc, #156]	@ (800561c <prvHeapInit+0xac>)
 800557e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3307      	adds	r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <prvHeapInit+0xac>)
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005620 <prvHeapInit+0xb0>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <prvHeapInit+0xb0>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4413      	add	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055bc:	2208      	movs	r2, #8
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0307 	bic.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <prvHeapInit+0xb4>)
 80055d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d2:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <prvHeapInit+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055da:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <prvHeapInit+0xb4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <prvHeapInit+0xb4>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <prvHeapInit+0xb8>)
 80055fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4a09      	ldr	r2, [pc, #36]	@ (800562c <prvHeapInit+0xbc>)
 8005606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <prvHeapInit+0xc0>)
 800560a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800560e:	601a      	str	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000ee8 	.word	0x20000ee8
 8005620:	20004ae8 	.word	0x20004ae8
 8005624:	20004af0 	.word	0x20004af0
 8005628:	20004af8 	.word	0x20004af8
 800562c:	20004af4 	.word	0x20004af4
 8005630:	20004b04 	.word	0x20004b04

08005634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800563c:	4b28      	ldr	r3, [pc, #160]	@ (80056e0 <prvInsertBlockIntoFreeList+0xac>)
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e002      	b.n	8005648 <prvInsertBlockIntoFreeList+0x14>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d8f7      	bhi.n	8005642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d108      	bne.n	8005676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	441a      	add	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d118      	bne.n	80056bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d00d      	beq.n	80056b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	441a      	add	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e008      	b.n	80056c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b2:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <prvInsertBlockIntoFreeList+0xb0>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e003      	b.n	80056c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d002      	beq.n	80056d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20004ae8 	.word	0x20004ae8
 80056e4:	20004af0 	.word	0x20004af0

080056e8 <std>:
 80056e8:	2300      	movs	r3, #0
 80056ea:	b510      	push	{r4, lr}
 80056ec:	4604      	mov	r4, r0
 80056ee:	e9c0 3300 	strd	r3, r3, [r0]
 80056f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056f6:	6083      	str	r3, [r0, #8]
 80056f8:	8181      	strh	r1, [r0, #12]
 80056fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80056fc:	81c2      	strh	r2, [r0, #14]
 80056fe:	6183      	str	r3, [r0, #24]
 8005700:	4619      	mov	r1, r3
 8005702:	2208      	movs	r2, #8
 8005704:	305c      	adds	r0, #92	@ 0x5c
 8005706:	f000 f9e7 	bl	8005ad8 <memset>
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <std+0x58>)
 800570c:	6263      	str	r3, [r4, #36]	@ 0x24
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <std+0x5c>)
 8005710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005712:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <std+0x60>)
 8005714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005716:	4b0d      	ldr	r3, [pc, #52]	@ (800574c <std+0x64>)
 8005718:	6323      	str	r3, [r4, #48]	@ 0x30
 800571a:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <std+0x68>)
 800571c:	6224      	str	r4, [r4, #32]
 800571e:	429c      	cmp	r4, r3
 8005720:	d006      	beq.n	8005730 <std+0x48>
 8005722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005726:	4294      	cmp	r4, r2
 8005728:	d002      	beq.n	8005730 <std+0x48>
 800572a:	33d0      	adds	r3, #208	@ 0xd0
 800572c:	429c      	cmp	r4, r3
 800572e:	d105      	bne.n	800573c <std+0x54>
 8005730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005738:	f000 ba9c 	b.w	8005c74 <__retarget_lock_init_recursive>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	bf00      	nop
 8005740:	08005929 	.word	0x08005929
 8005744:	0800594b 	.word	0x0800594b
 8005748:	08005983 	.word	0x08005983
 800574c:	080059a7 	.word	0x080059a7
 8005750:	20004b08 	.word	0x20004b08

08005754 <stdio_exit_handler>:
 8005754:	4a02      	ldr	r2, [pc, #8]	@ (8005760 <stdio_exit_handler+0xc>)
 8005756:	4903      	ldr	r1, [pc, #12]	@ (8005764 <stdio_exit_handler+0x10>)
 8005758:	4803      	ldr	r0, [pc, #12]	@ (8005768 <stdio_exit_handler+0x14>)
 800575a:	f000 b869 	b.w	8005830 <_fwalk_sglue>
 800575e:	bf00      	nop
 8005760:	20000010 	.word	0x20000010
 8005764:	08005f91 	.word	0x08005f91
 8005768:	20000020 	.word	0x20000020

0800576c <cleanup_stdio>:
 800576c:	6841      	ldr	r1, [r0, #4]
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <cleanup_stdio+0x34>)
 8005770:	4299      	cmp	r1, r3
 8005772:	b510      	push	{r4, lr}
 8005774:	4604      	mov	r4, r0
 8005776:	d001      	beq.n	800577c <cleanup_stdio+0x10>
 8005778:	f000 fc0a 	bl	8005f90 <_fflush_r>
 800577c:	68a1      	ldr	r1, [r4, #8]
 800577e:	4b09      	ldr	r3, [pc, #36]	@ (80057a4 <cleanup_stdio+0x38>)
 8005780:	4299      	cmp	r1, r3
 8005782:	d002      	beq.n	800578a <cleanup_stdio+0x1e>
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fc03 	bl	8005f90 <_fflush_r>
 800578a:	68e1      	ldr	r1, [r4, #12]
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <cleanup_stdio+0x3c>)
 800578e:	4299      	cmp	r1, r3
 8005790:	d004      	beq.n	800579c <cleanup_stdio+0x30>
 8005792:	4620      	mov	r0, r4
 8005794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005798:	f000 bbfa 	b.w	8005f90 <_fflush_r>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	bf00      	nop
 80057a0:	20004b08 	.word	0x20004b08
 80057a4:	20004b70 	.word	0x20004b70
 80057a8:	20004bd8 	.word	0x20004bd8

080057ac <global_stdio_init.part.0>:
 80057ac:	b510      	push	{r4, lr}
 80057ae:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <global_stdio_init.part.0+0x30>)
 80057b0:	4c0b      	ldr	r4, [pc, #44]	@ (80057e0 <global_stdio_init.part.0+0x34>)
 80057b2:	4a0c      	ldr	r2, [pc, #48]	@ (80057e4 <global_stdio_init.part.0+0x38>)
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	4620      	mov	r0, r4
 80057b8:	2200      	movs	r2, #0
 80057ba:	2104      	movs	r1, #4
 80057bc:	f7ff ff94 	bl	80056e8 <std>
 80057c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057c4:	2201      	movs	r2, #1
 80057c6:	2109      	movs	r1, #9
 80057c8:	f7ff ff8e 	bl	80056e8 <std>
 80057cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057d0:	2202      	movs	r2, #2
 80057d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d6:	2112      	movs	r1, #18
 80057d8:	f7ff bf86 	b.w	80056e8 <std>
 80057dc:	20004c40 	.word	0x20004c40
 80057e0:	20004b08 	.word	0x20004b08
 80057e4:	08005755 	.word	0x08005755

080057e8 <__sfp_lock_acquire>:
 80057e8:	4801      	ldr	r0, [pc, #4]	@ (80057f0 <__sfp_lock_acquire+0x8>)
 80057ea:	f000 ba44 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	20004c49 	.word	0x20004c49

080057f4 <__sfp_lock_release>:
 80057f4:	4801      	ldr	r0, [pc, #4]	@ (80057fc <__sfp_lock_release+0x8>)
 80057f6:	f000 ba3f 	b.w	8005c78 <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	20004c49 	.word	0x20004c49

08005800 <__sinit>:
 8005800:	b510      	push	{r4, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	f7ff fff0 	bl	80057e8 <__sfp_lock_acquire>
 8005808:	6a23      	ldr	r3, [r4, #32]
 800580a:	b11b      	cbz	r3, 8005814 <__sinit+0x14>
 800580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005810:	f7ff bff0 	b.w	80057f4 <__sfp_lock_release>
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <__sinit+0x28>)
 8005816:	6223      	str	r3, [r4, #32]
 8005818:	4b04      	ldr	r3, [pc, #16]	@ (800582c <__sinit+0x2c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f5      	bne.n	800580c <__sinit+0xc>
 8005820:	f7ff ffc4 	bl	80057ac <global_stdio_init.part.0>
 8005824:	e7f2      	b.n	800580c <__sinit+0xc>
 8005826:	bf00      	nop
 8005828:	0800576d 	.word	0x0800576d
 800582c:	20004c40 	.word	0x20004c40

08005830 <_fwalk_sglue>:
 8005830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005834:	4607      	mov	r7, r0
 8005836:	4688      	mov	r8, r1
 8005838:	4614      	mov	r4, r2
 800583a:	2600      	movs	r6, #0
 800583c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005840:	f1b9 0901 	subs.w	r9, r9, #1
 8005844:	d505      	bpl.n	8005852 <_fwalk_sglue+0x22>
 8005846:	6824      	ldr	r4, [r4, #0]
 8005848:	2c00      	cmp	r4, #0
 800584a:	d1f7      	bne.n	800583c <_fwalk_sglue+0xc>
 800584c:	4630      	mov	r0, r6
 800584e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d907      	bls.n	8005868 <_fwalk_sglue+0x38>
 8005858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800585c:	3301      	adds	r3, #1
 800585e:	d003      	beq.n	8005868 <_fwalk_sglue+0x38>
 8005860:	4629      	mov	r1, r5
 8005862:	4638      	mov	r0, r7
 8005864:	47c0      	blx	r8
 8005866:	4306      	orrs	r6, r0
 8005868:	3568      	adds	r5, #104	@ 0x68
 800586a:	e7e9      	b.n	8005840 <_fwalk_sglue+0x10>

0800586c <_puts_r>:
 800586c:	6a03      	ldr	r3, [r0, #32]
 800586e:	b570      	push	{r4, r5, r6, lr}
 8005870:	6884      	ldr	r4, [r0, #8]
 8005872:	4605      	mov	r5, r0
 8005874:	460e      	mov	r6, r1
 8005876:	b90b      	cbnz	r3, 800587c <_puts_r+0x10>
 8005878:	f7ff ffc2 	bl	8005800 <__sinit>
 800587c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800587e:	07db      	lsls	r3, r3, #31
 8005880:	d405      	bmi.n	800588e <_puts_r+0x22>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	0598      	lsls	r0, r3, #22
 8005886:	d402      	bmi.n	800588e <_puts_r+0x22>
 8005888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588a:	f000 f9f4 	bl	8005c76 <__retarget_lock_acquire_recursive>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	0719      	lsls	r1, r3, #28
 8005892:	d502      	bpl.n	800589a <_puts_r+0x2e>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d135      	bne.n	8005906 <_puts_r+0x9a>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 f8c5 	bl	8005a2c <__swsetup_r>
 80058a2:	b380      	cbz	r0, 8005906 <_puts_r+0x9a>
 80058a4:	f04f 35ff 	mov.w	r5, #4294967295
 80058a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058aa:	07da      	lsls	r2, r3, #31
 80058ac:	d405      	bmi.n	80058ba <_puts_r+0x4e>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	059b      	lsls	r3, r3, #22
 80058b2:	d402      	bmi.n	80058ba <_puts_r+0x4e>
 80058b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058b6:	f000 f9df 	bl	8005c78 <__retarget_lock_release_recursive>
 80058ba:	4628      	mov	r0, r5
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da04      	bge.n	80058cc <_puts_r+0x60>
 80058c2:	69a2      	ldr	r2, [r4, #24]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	dc17      	bgt.n	80058f8 <_puts_r+0x8c>
 80058c8:	290a      	cmp	r1, #10
 80058ca:	d015      	beq.n	80058f8 <_puts_r+0x8c>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	6022      	str	r2, [r4, #0]
 80058d2:	7019      	strb	r1, [r3, #0]
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058da:	3b01      	subs	r3, #1
 80058dc:	60a3      	str	r3, [r4, #8]
 80058de:	2900      	cmp	r1, #0
 80058e0:	d1ed      	bne.n	80058be <_puts_r+0x52>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da11      	bge.n	800590a <_puts_r+0x9e>
 80058e6:	4622      	mov	r2, r4
 80058e8:	210a      	movs	r1, #10
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f85f 	bl	80059ae <__swbuf_r>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d0d7      	beq.n	80058a4 <_puts_r+0x38>
 80058f4:	250a      	movs	r5, #10
 80058f6:	e7d7      	b.n	80058a8 <_puts_r+0x3c>
 80058f8:	4622      	mov	r2, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 f857 	bl	80059ae <__swbuf_r>
 8005900:	3001      	adds	r0, #1
 8005902:	d1e7      	bne.n	80058d4 <_puts_r+0x68>
 8005904:	e7ce      	b.n	80058a4 <_puts_r+0x38>
 8005906:	3e01      	subs	r6, #1
 8005908:	e7e4      	b.n	80058d4 <_puts_r+0x68>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	220a      	movs	r2, #10
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e7ee      	b.n	80058f4 <_puts_r+0x88>
	...

08005918 <puts>:
 8005918:	4b02      	ldr	r3, [pc, #8]	@ (8005924 <puts+0xc>)
 800591a:	4601      	mov	r1, r0
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	f7ff bfa5 	b.w	800586c <_puts_r>
 8005922:	bf00      	nop
 8005924:	2000001c 	.word	0x2000001c

08005928 <__sread>:
 8005928:	b510      	push	{r4, lr}
 800592a:	460c      	mov	r4, r1
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	f000 f952 	bl	8005bd8 <_read_r>
 8005934:	2800      	cmp	r0, #0
 8005936:	bfab      	itete	ge
 8005938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800593a:	89a3      	ldrhlt	r3, [r4, #12]
 800593c:	181b      	addge	r3, r3, r0
 800593e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005942:	bfac      	ite	ge
 8005944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005946:	81a3      	strhlt	r3, [r4, #12]
 8005948:	bd10      	pop	{r4, pc}

0800594a <__swrite>:
 800594a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	461f      	mov	r7, r3
 8005950:	898b      	ldrh	r3, [r1, #12]
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4616      	mov	r6, r2
 800595a:	d505      	bpl.n	8005968 <__swrite+0x1e>
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	2302      	movs	r3, #2
 8005962:	2200      	movs	r2, #0
 8005964:	f000 f926 	bl	8005bb4 <_lseek_r>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	4632      	mov	r2, r6
 8005976:	463b      	mov	r3, r7
 8005978:	4628      	mov	r0, r5
 800597a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	f000 b93d 	b.w	8005bfc <_write_r>

08005982 <__sseek>:
 8005982:	b510      	push	{r4, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 f913 	bl	8005bb4 <_lseek_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	bf15      	itete	ne
 8005994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800599a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800599e:	81a3      	strheq	r3, [r4, #12]
 80059a0:	bf18      	it	ne
 80059a2:	81a3      	strhne	r3, [r4, #12]
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <__sclose>:
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 b89d 	b.w	8005ae8 <_close_r>

080059ae <__swbuf_r>:
 80059ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b0:	460e      	mov	r6, r1
 80059b2:	4614      	mov	r4, r2
 80059b4:	4605      	mov	r5, r0
 80059b6:	b118      	cbz	r0, 80059c0 <__swbuf_r+0x12>
 80059b8:	6a03      	ldr	r3, [r0, #32]
 80059ba:	b90b      	cbnz	r3, 80059c0 <__swbuf_r+0x12>
 80059bc:	f7ff ff20 	bl	8005800 <__sinit>
 80059c0:	69a3      	ldr	r3, [r4, #24]
 80059c2:	60a3      	str	r3, [r4, #8]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	071a      	lsls	r2, r3, #28
 80059c8:	d501      	bpl.n	80059ce <__swbuf_r+0x20>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	b943      	cbnz	r3, 80059e0 <__swbuf_r+0x32>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f82b 	bl	8005a2c <__swsetup_r>
 80059d6:	b118      	cbz	r0, 80059e0 <__swbuf_r+0x32>
 80059d8:	f04f 37ff 	mov.w	r7, #4294967295
 80059dc:	4638      	mov	r0, r7
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	6922      	ldr	r2, [r4, #16]
 80059e4:	1a98      	subs	r0, r3, r2
 80059e6:	6963      	ldr	r3, [r4, #20]
 80059e8:	b2f6      	uxtb	r6, r6
 80059ea:	4283      	cmp	r3, r0
 80059ec:	4637      	mov	r7, r6
 80059ee:	dc05      	bgt.n	80059fc <__swbuf_r+0x4e>
 80059f0:	4621      	mov	r1, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 facc 	bl	8005f90 <_fflush_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d1ed      	bne.n	80059d8 <__swbuf_r+0x2a>
 80059fc:	68a3      	ldr	r3, [r4, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	60a3      	str	r3, [r4, #8]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	6022      	str	r2, [r4, #0]
 8005a08:	701e      	strb	r6, [r3, #0]
 8005a0a:	6962      	ldr	r2, [r4, #20]
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d004      	beq.n	8005a1c <__swbuf_r+0x6e>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	07db      	lsls	r3, r3, #31
 8005a16:	d5e1      	bpl.n	80059dc <__swbuf_r+0x2e>
 8005a18:	2e0a      	cmp	r6, #10
 8005a1a:	d1df      	bne.n	80059dc <__swbuf_r+0x2e>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 fab6 	bl	8005f90 <_fflush_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0d9      	beq.n	80059dc <__swbuf_r+0x2e>
 8005a28:	e7d6      	b.n	80059d8 <__swbuf_r+0x2a>
	...

08005a2c <__swsetup_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <__swsetup_r+0xa8>)
 8005a30:	4605      	mov	r5, r0
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	460c      	mov	r4, r1
 8005a36:	b118      	cbz	r0, 8005a40 <__swsetup_r+0x14>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <__swsetup_r+0x14>
 8005a3c:	f7ff fee0 	bl	8005800 <__sinit>
 8005a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a44:	0719      	lsls	r1, r3, #28
 8005a46:	d422      	bmi.n	8005a8e <__swsetup_r+0x62>
 8005a48:	06da      	lsls	r2, r3, #27
 8005a4a:	d407      	bmi.n	8005a5c <__swsetup_r+0x30>
 8005a4c:	2209      	movs	r2, #9
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	e033      	b.n	8005ac4 <__swsetup_r+0x98>
 8005a5c:	0758      	lsls	r0, r3, #29
 8005a5e:	d512      	bpl.n	8005a86 <__swsetup_r+0x5a>
 8005a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a62:	b141      	cbz	r1, 8005a76 <__swsetup_r+0x4a>
 8005a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	d002      	beq.n	8005a72 <__swsetup_r+0x46>
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 f913 	bl	8005c98 <_free_r>
 8005a72:	2300      	movs	r3, #0
 8005a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	b94b      	cbnz	r3, 8005aa6 <__swsetup_r+0x7a>
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9c:	d003      	beq.n	8005aa6 <__swsetup_r+0x7a>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 fac3 	bl	800602c <__smakebuf_r>
 8005aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aaa:	f013 0201 	ands.w	r2, r3, #1
 8005aae:	d00a      	beq.n	8005ac6 <__swsetup_r+0x9a>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	60a2      	str	r2, [r4, #8]
 8005ab4:	6962      	ldr	r2, [r4, #20]
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	61a2      	str	r2, [r4, #24]
 8005aba:	6922      	ldr	r2, [r4, #16]
 8005abc:	b942      	cbnz	r2, 8005ad0 <__swsetup_r+0xa4>
 8005abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ac2:	d1c5      	bne.n	8005a50 <__swsetup_r+0x24>
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	0799      	lsls	r1, r3, #30
 8005ac8:	bf58      	it	pl
 8005aca:	6962      	ldrpl	r2, [r4, #20]
 8005acc:	60a2      	str	r2, [r4, #8]
 8005ace:	e7f4      	b.n	8005aba <__swsetup_r+0x8e>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7f7      	b.n	8005ac4 <__swsetup_r+0x98>
 8005ad4:	2000001c 	.word	0x2000001c

08005ad8 <memset>:
 8005ad8:	4402      	add	r2, r0
 8005ada:	4603      	mov	r3, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <_close_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d06      	ldr	r5, [pc, #24]	@ (8005b04 <_close_r+0x1c>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fa ff7b 	bl	80009ee <_close>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_close_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_close_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20004c44 	.word	0x20004c44

08005b08 <_reclaim_reent>:
 8005b08:	4b29      	ldr	r3, [pc, #164]	@ (8005bb0 <_reclaim_reent+0xa8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4283      	cmp	r3, r0
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	d04b      	beq.n	8005bac <_reclaim_reent+0xa4>
 8005b14:	69c3      	ldr	r3, [r0, #28]
 8005b16:	b1ab      	cbz	r3, 8005b44 <_reclaim_reent+0x3c>
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	b16b      	cbz	r3, 8005b38 <_reclaim_reent+0x30>
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	69e3      	ldr	r3, [r4, #28]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	5959      	ldr	r1, [r3, r5]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d13b      	bne.n	8005ba0 <_reclaim_reent+0x98>
 8005b28:	3504      	adds	r5, #4
 8005b2a:	2d80      	cmp	r5, #128	@ 0x80
 8005b2c:	d1f7      	bne.n	8005b1e <_reclaim_reent+0x16>
 8005b2e:	69e3      	ldr	r3, [r4, #28]
 8005b30:	4620      	mov	r0, r4
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	f000 f8b0 	bl	8005c98 <_free_r>
 8005b38:	69e3      	ldr	r3, [r4, #28]
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	b111      	cbz	r1, 8005b44 <_reclaim_reent+0x3c>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f8aa 	bl	8005c98 <_free_r>
 8005b44:	6961      	ldr	r1, [r4, #20]
 8005b46:	b111      	cbz	r1, 8005b4e <_reclaim_reent+0x46>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f8a5 	bl	8005c98 <_free_r>
 8005b4e:	69e1      	ldr	r1, [r4, #28]
 8005b50:	b111      	cbz	r1, 8005b58 <_reclaim_reent+0x50>
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 f8a0 	bl	8005c98 <_free_r>
 8005b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b5a:	b111      	cbz	r1, 8005b62 <_reclaim_reent+0x5a>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 f89b 	bl	8005c98 <_free_r>
 8005b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b64:	b111      	cbz	r1, 8005b6c <_reclaim_reent+0x64>
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 f896 	bl	8005c98 <_free_r>
 8005b6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b6e:	b111      	cbz	r1, 8005b76 <_reclaim_reent+0x6e>
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 f891 	bl	8005c98 <_free_r>
 8005b76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b78:	b111      	cbz	r1, 8005b80 <_reclaim_reent+0x78>
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 f88c 	bl	8005c98 <_free_r>
 8005b80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b82:	b111      	cbz	r1, 8005b8a <_reclaim_reent+0x82>
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 f887 	bl	8005c98 <_free_r>
 8005b8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b8c:	b111      	cbz	r1, 8005b94 <_reclaim_reent+0x8c>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f882 	bl	8005c98 <_free_r>
 8005b94:	6a23      	ldr	r3, [r4, #32]
 8005b96:	b14b      	cbz	r3, 8005bac <_reclaim_reent+0xa4>
 8005b98:	4620      	mov	r0, r4
 8005b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b9e:	4718      	bx	r3
 8005ba0:	680e      	ldr	r6, [r1, #0]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 f878 	bl	8005c98 <_free_r>
 8005ba8:	4631      	mov	r1, r6
 8005baa:	e7bb      	b.n	8005b24 <_reclaim_reent+0x1c>
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	bf00      	nop
 8005bb0:	2000001c 	.word	0x2000001c

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	@ (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fa ff3a 	bl	8000a3c <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20004c44 	.word	0x20004c44

08005bd8 <_read_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_read_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fa fee4 	bl	80009b4 <_read>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_read_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_read_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20004c44 	.word	0x20004c44

08005bfc <_write_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_write_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fa ff96 	bl	8000b3c <_write>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_write_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_write_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20004c44 	.word	0x20004c44

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2000001c 	.word	0x2000001c

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 fa62 	bl	8006108 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	080062c0 	.word	0x080062c0
 8005c68:	080062c0 	.word	0x080062c0
 8005c6c:	080062c0 	.word	0x080062c0
 8005c70:	080062c4 	.word	0x080062c4

08005c74 <__retarget_lock_init_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_acquire_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_release_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <memcpy>:
 8005c7a:	440a      	add	r2, r1
 8005c7c:	4291      	cmp	r1, r2
 8005c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c82:	d100      	bne.n	8005c86 <memcpy+0xc>
 8005c84:	4770      	bx	lr
 8005c86:	b510      	push	{r4, lr}
 8005c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c90:	4291      	cmp	r1, r2
 8005c92:	d1f9      	bne.n	8005c88 <memcpy+0xe>
 8005c94:	bd10      	pop	{r4, pc}
	...

08005c98 <_free_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d041      	beq.n	8005d24 <_free_r+0x8c>
 8005ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca4:	1f0c      	subs	r4, r1, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	18e4      	addlt	r4, r4, r3
 8005cac:	f000 f8e0 	bl	8005e70 <__malloc_lock>
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <_free_r+0x90>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	b933      	cbnz	r3, 8005cc4 <_free_r+0x2c>
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc0:	f000 b8dc 	b.w	8005e7c <__malloc_unlock>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf01      	itttt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	1809      	addeq	r1, r1, r0
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	e7ed      	b.n	8005cb6 <_free_r+0x1e>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x4c>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x42>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x6c>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	4401      	add	r1, r0
 8005cf0:	1850      	adds	r0, r2, r1
 8005cf2:	4283      	cmp	r3, r0
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1e0      	bne.n	8005cba <_free_r+0x22>
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	4408      	add	r0, r1
 8005d00:	6010      	str	r0, [r2, #0]
 8005d02:	e7da      	b.n	8005cba <_free_r+0x22>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x74>
 8005d06:	230c      	movs	r3, #12
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	e7d6      	b.n	8005cba <_free_r+0x22>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf04      	itt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	bf04      	itt	eq
 8005d1c:	1809      	addeq	r1, r1, r0
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	6054      	str	r4, [r2, #4]
 8005d22:	e7ca      	b.n	8005cba <_free_r+0x22>
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	20004c50 	.word	0x20004c50

08005d2c <sbrk_aligned>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d6c <sbrk_aligned+0x40>)
 8005d30:	460c      	mov	r4, r1
 8005d32:	6831      	ldr	r1, [r6, #0]
 8005d34:	4605      	mov	r5, r0
 8005d36:	b911      	cbnz	r1, 8005d3e <sbrk_aligned+0x12>
 8005d38:	f000 f9d6 	bl	80060e8 <_sbrk_r>
 8005d3c:	6030      	str	r0, [r6, #0]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 f9d1 	bl	80060e8 <_sbrk_r>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	d103      	bne.n	8005d52 <sbrk_aligned+0x26>
 8005d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d4e:	4620      	mov	r0, r4
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	1cc4      	adds	r4, r0, #3
 8005d54:	f024 0403 	bic.w	r4, r4, #3
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d0f8      	beq.n	8005d4e <sbrk_aligned+0x22>
 8005d5c:	1a21      	subs	r1, r4, r0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 f9c2 	bl	80060e8 <_sbrk_r>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d1f2      	bne.n	8005d4e <sbrk_aligned+0x22>
 8005d68:	e7ef      	b.n	8005d4a <sbrk_aligned+0x1e>
 8005d6a:	bf00      	nop
 8005d6c:	20004c4c 	.word	0x20004c4c

08005d70 <_malloc_r>:
 8005d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d74:	1ccd      	adds	r5, r1, #3
 8005d76:	f025 0503 	bic.w	r5, r5, #3
 8005d7a:	3508      	adds	r5, #8
 8005d7c:	2d0c      	cmp	r5, #12
 8005d7e:	bf38      	it	cc
 8005d80:	250c      	movcc	r5, #12
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	4606      	mov	r6, r0
 8005d86:	db01      	blt.n	8005d8c <_malloc_r+0x1c>
 8005d88:	42a9      	cmp	r1, r5
 8005d8a:	d904      	bls.n	8005d96 <_malloc_r+0x26>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	2000      	movs	r0, #0
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e6c <_malloc_r+0xfc>
 8005d9a:	f000 f869 	bl	8005e70 <__malloc_lock>
 8005d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005da2:	461c      	mov	r4, r3
 8005da4:	bb44      	cbnz	r4, 8005df8 <_malloc_r+0x88>
 8005da6:	4629      	mov	r1, r5
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff ffbf 	bl	8005d2c <sbrk_aligned>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	4604      	mov	r4, r0
 8005db2:	d158      	bne.n	8005e66 <_malloc_r+0xf6>
 8005db4:	f8d8 4000 	ldr.w	r4, [r8]
 8005db8:	4627      	mov	r7, r4
 8005dba:	2f00      	cmp	r7, #0
 8005dbc:	d143      	bne.n	8005e46 <_malloc_r+0xd6>
 8005dbe:	2c00      	cmp	r4, #0
 8005dc0:	d04b      	beq.n	8005e5a <_malloc_r+0xea>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	eb04 0903 	add.w	r9, r4, r3
 8005dcc:	f000 f98c 	bl	80060e8 <_sbrk_r>
 8005dd0:	4581      	cmp	r9, r0
 8005dd2:	d142      	bne.n	8005e5a <_malloc_r+0xea>
 8005dd4:	6821      	ldr	r1, [r4, #0]
 8005dd6:	1a6d      	subs	r5, r5, r1
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ffa6 	bl	8005d2c <sbrk_aligned>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d03a      	beq.n	8005e5a <_malloc_r+0xea>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	442b      	add	r3, r5
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	f8d8 3000 	ldr.w	r3, [r8]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	bb62      	cbnz	r2, 8005e4c <_malloc_r+0xdc>
 8005df2:	f8c8 7000 	str.w	r7, [r8]
 8005df6:	e00f      	b.n	8005e18 <_malloc_r+0xa8>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	1b52      	subs	r2, r2, r5
 8005dfc:	d420      	bmi.n	8005e40 <_malloc_r+0xd0>
 8005dfe:	2a0b      	cmp	r2, #11
 8005e00:	d917      	bls.n	8005e32 <_malloc_r+0xc2>
 8005e02:	1961      	adds	r1, r4, r5
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	6025      	str	r5, [r4, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	6059      	strne	r1, [r3, #4]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	bf08      	it	eq
 8005e10:	f8c8 1000 	streq.w	r1, [r8]
 8005e14:	5162      	str	r2, [r4, r5]
 8005e16:	604b      	str	r3, [r1, #4]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f82f 	bl	8005e7c <__malloc_unlock>
 8005e1e:	f104 000b 	add.w	r0, r4, #11
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	f020 0007 	bic.w	r0, r0, #7
 8005e28:	1ac2      	subs	r2, r0, r3
 8005e2a:	bf1c      	itt	ne
 8005e2c:	1a1b      	subne	r3, r3, r0
 8005e2e:	50a3      	strne	r3, [r4, r2]
 8005e30:	e7af      	b.n	8005d92 <_malloc_r+0x22>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	bf0c      	ite	eq
 8005e38:	f8c8 2000 	streq.w	r2, [r8]
 8005e3c:	605a      	strne	r2, [r3, #4]
 8005e3e:	e7eb      	b.n	8005e18 <_malloc_r+0xa8>
 8005e40:	4623      	mov	r3, r4
 8005e42:	6864      	ldr	r4, [r4, #4]
 8005e44:	e7ae      	b.n	8005da4 <_malloc_r+0x34>
 8005e46:	463c      	mov	r4, r7
 8005e48:	687f      	ldr	r7, [r7, #4]
 8005e4a:	e7b6      	b.n	8005dba <_malloc_r+0x4a>
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d1fb      	bne.n	8005e4c <_malloc_r+0xdc>
 8005e54:	2300      	movs	r3, #0
 8005e56:	6053      	str	r3, [r2, #4]
 8005e58:	e7de      	b.n	8005e18 <_malloc_r+0xa8>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f000 f80c 	bl	8005e7c <__malloc_unlock>
 8005e64:	e794      	b.n	8005d90 <_malloc_r+0x20>
 8005e66:	6005      	str	r5, [r0, #0]
 8005e68:	e7d6      	b.n	8005e18 <_malloc_r+0xa8>
 8005e6a:	bf00      	nop
 8005e6c:	20004c50 	.word	0x20004c50

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff bf00 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20004c48 	.word	0x20004c48

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	@ (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff befb 	b.w	8005c78 <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20004c48 	.word	0x20004c48

08005e88 <__sflush_r>:
 8005e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	0716      	lsls	r6, r2, #28
 8005e92:	4605      	mov	r5, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	d454      	bmi.n	8005f42 <__sflush_r+0xba>
 8005e98:	684b      	ldr	r3, [r1, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dc02      	bgt.n	8005ea4 <__sflush_r+0x1c>
 8005e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dd48      	ble.n	8005f36 <__sflush_r+0xae>
 8005ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d045      	beq.n	8005f36 <__sflush_r+0xae>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005eb0:	682f      	ldr	r7, [r5, #0]
 8005eb2:	6a21      	ldr	r1, [r4, #32]
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	d030      	beq.n	8005f1a <__sflush_r+0x92>
 8005eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	0759      	lsls	r1, r3, #29
 8005ebe:	d505      	bpl.n	8005ecc <__sflush_r+0x44>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ec6:	b10b      	cbz	r3, 8005ecc <__sflush_r+0x44>
 8005ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ed0:	6a21      	ldr	r1, [r4, #32]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b0      	blx	r6
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	d106      	bne.n	8005eea <__sflush_r+0x62>
 8005edc:	6829      	ldr	r1, [r5, #0]
 8005ede:	291d      	cmp	r1, #29
 8005ee0:	d82b      	bhi.n	8005f3a <__sflush_r+0xb2>
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <__sflush_r+0x104>)
 8005ee4:	410a      	asrs	r2, r1
 8005ee6:	07d6      	lsls	r6, r2, #31
 8005ee8:	d427      	bmi.n	8005f3a <__sflush_r+0xb2>
 8005eea:	2200      	movs	r2, #0
 8005eec:	6062      	str	r2, [r4, #4]
 8005eee:	04d9      	lsls	r1, r3, #19
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	d504      	bpl.n	8005f00 <__sflush_r+0x78>
 8005ef6:	1c42      	adds	r2, r0, #1
 8005ef8:	d101      	bne.n	8005efe <__sflush_r+0x76>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	b903      	cbnz	r3, 8005f00 <__sflush_r+0x78>
 8005efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f02:	602f      	str	r7, [r5, #0]
 8005f04:	b1b9      	cbz	r1, 8005f36 <__sflush_r+0xae>
 8005f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	d002      	beq.n	8005f14 <__sflush_r+0x8c>
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f7ff fec2 	bl	8005c98 <_free_r>
 8005f14:	2300      	movs	r3, #0
 8005f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f18:	e00d      	b.n	8005f36 <__sflush_r+0xae>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b0      	blx	r6
 8005f20:	4602      	mov	r2, r0
 8005f22:	1c50      	adds	r0, r2, #1
 8005f24:	d1c9      	bne.n	8005eba <__sflush_r+0x32>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0c6      	beq.n	8005eba <__sflush_r+0x32>
 8005f2c:	2b1d      	cmp	r3, #29
 8005f2e:	d001      	beq.n	8005f34 <__sflush_r+0xac>
 8005f30:	2b16      	cmp	r3, #22
 8005f32:	d11e      	bne.n	8005f72 <__sflush_r+0xea>
 8005f34:	602f      	str	r7, [r5, #0]
 8005f36:	2000      	movs	r0, #0
 8005f38:	e022      	b.n	8005f80 <__sflush_r+0xf8>
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	e01b      	b.n	8005f7a <__sflush_r+0xf2>
 8005f42:	690f      	ldr	r7, [r1, #16]
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	d0f6      	beq.n	8005f36 <__sflush_r+0xae>
 8005f48:	0793      	lsls	r3, r2, #30
 8005f4a:	680e      	ldr	r6, [r1, #0]
 8005f4c:	bf08      	it	eq
 8005f4e:	694b      	ldreq	r3, [r1, #20]
 8005f50:	600f      	str	r7, [r1, #0]
 8005f52:	bf18      	it	ne
 8005f54:	2300      	movne	r3, #0
 8005f56:	eba6 0807 	sub.w	r8, r6, r7
 8005f5a:	608b      	str	r3, [r1, #8]
 8005f5c:	f1b8 0f00 	cmp.w	r8, #0
 8005f60:	dde9      	ble.n	8005f36 <__sflush_r+0xae>
 8005f62:	6a21      	ldr	r1, [r4, #32]
 8005f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f66:	4643      	mov	r3, r8
 8005f68:	463a      	mov	r2, r7
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b0      	blx	r6
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	dc08      	bgt.n	8005f84 <__sflush_r+0xfc>
 8005f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f84:	4407      	add	r7, r0
 8005f86:	eba8 0800 	sub.w	r8, r8, r0
 8005f8a:	e7e7      	b.n	8005f5c <__sflush_r+0xd4>
 8005f8c:	dfbffffe 	.word	0xdfbffffe

08005f90 <_fflush_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b913      	cbnz	r3, 8005fa0 <_fflush_r+0x10>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	b118      	cbz	r0, 8005faa <_fflush_r+0x1a>
 8005fa2:	6a03      	ldr	r3, [r0, #32]
 8005fa4:	b90b      	cbnz	r3, 8005faa <_fflush_r+0x1a>
 8005fa6:	f7ff fc2b 	bl	8005800 <__sinit>
 8005faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f3      	beq.n	8005f9a <_fflush_r+0xa>
 8005fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d404      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fb8:	0599      	lsls	r1, r3, #22
 8005fba:	d402      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fbe:	f7ff fe5a 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f7ff ff5f 	bl	8005e88 <__sflush_r>
 8005fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fcc:	07da      	lsls	r2, r3, #31
 8005fce:	4605      	mov	r5, r0
 8005fd0:	d4e4      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	059b      	lsls	r3, r3, #22
 8005fd6:	d4e1      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fda:	f7ff fe4d 	bl	8005c78 <__retarget_lock_release_recursive>
 8005fde:	e7dd      	b.n	8005f9c <_fflush_r+0xc>

08005fe0 <__swhatbuf_r>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	b096      	sub	sp, #88	@ 0x58
 8005fec:	4615      	mov	r5, r2
 8005fee:	461e      	mov	r6, r3
 8005ff0:	da0d      	bge.n	800600e <__swhatbuf_r+0x2e>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	bf14      	ite	ne
 8005ffe:	2340      	movne	r3, #64	@ 0x40
 8006000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006004:	2000      	movs	r0, #0
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	b016      	add	sp, #88	@ 0x58
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	466a      	mov	r2, sp
 8006010:	f000 f848 	bl	80060a4 <_fstat_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	dbec      	blt.n	8005ff2 <__swhatbuf_r+0x12>
 8006018:	9901      	ldr	r1, [sp, #4]
 800601a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800601e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006022:	4259      	negs	r1, r3
 8006024:	4159      	adcs	r1, r3
 8006026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800602a:	e7eb      	b.n	8006004 <__swhatbuf_r+0x24>

0800602c <__smakebuf_r>:
 800602c:	898b      	ldrh	r3, [r1, #12]
 800602e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006030:	079d      	lsls	r5, r3, #30
 8006032:	4606      	mov	r6, r0
 8006034:	460c      	mov	r4, r1
 8006036:	d507      	bpl.n	8006048 <__smakebuf_r+0x1c>
 8006038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2301      	movs	r3, #1
 8006042:	6163      	str	r3, [r4, #20]
 8006044:	b003      	add	sp, #12
 8006046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006048:	ab01      	add	r3, sp, #4
 800604a:	466a      	mov	r2, sp
 800604c:	f7ff ffc8 	bl	8005fe0 <__swhatbuf_r>
 8006050:	9f00      	ldr	r7, [sp, #0]
 8006052:	4605      	mov	r5, r0
 8006054:	4639      	mov	r1, r7
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff fe8a 	bl	8005d70 <_malloc_r>
 800605c:	b948      	cbnz	r0, 8006072 <__smakebuf_r+0x46>
 800605e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006062:	059a      	lsls	r2, r3, #22
 8006064:	d4ee      	bmi.n	8006044 <__smakebuf_r+0x18>
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	e7e2      	b.n	8006038 <__smakebuf_r+0xc>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	6020      	str	r0, [r4, #0]
 8006076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	9b01      	ldr	r3, [sp, #4]
 800607e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006082:	b15b      	cbz	r3, 800609c <__smakebuf_r+0x70>
 8006084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f81d 	bl	80060c8 <_isatty_r>
 800608e:	b128      	cbz	r0, 800609c <__smakebuf_r+0x70>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	431d      	orrs	r5, r3
 80060a0:	81a5      	strh	r5, [r4, #12]
 80060a2:	e7cf      	b.n	8006044 <__smakebuf_r+0x18>

080060a4 <_fstat_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	@ (80060c4 <_fstat_r+0x20>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f7fa fca8 	bl	8000a06 <_fstat>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d102      	bne.n	80060c0 <_fstat_r+0x1c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	b103      	cbz	r3, 80060c0 <_fstat_r+0x1c>
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop
 80060c4:	20004c44 	.word	0x20004c44

080060c8 <_isatty_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	@ (80060e4 <_isatty_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fa fca7 	bl	8000a26 <_isatty>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_isatty_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_isatty_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20004c44 	.word	0x20004c44

080060e8 <_sbrk_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d06      	ldr	r5, [pc, #24]	@ (8006104 <_sbrk_r+0x1c>)
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	f7fa fcb0 	bl	8000a58 <_sbrk>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_sbrk_r+0x1a>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_sbrk_r+0x1a>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20004c44 	.word	0x20004c44

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
