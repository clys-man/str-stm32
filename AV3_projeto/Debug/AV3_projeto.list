
AV3_projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007a90  08007a90  00008a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f00  08007f00  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f04  08007f04  00008f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  200001d4  080080dc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dbc  080080dc  00009dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e82  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d0  00000000  00000000  00021086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00024658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa5  00000000  00000000  00025a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b5c  00000000  00000000  00026a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bb0  00000000  00000000  00040591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bcd  00000000  00000000  00058141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006398  00000000  00000000  000f1d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f80ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a74 	.word	0x08007a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007a74 	.word	0x08007a74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <GPIO_init>:
#include "tim.h"
#include "uart.h"


void GPIO_init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    // Habilita clock para GPIOA, GPIOB, GPIOC
    RCC->AHB1ENR |= (1U<<0) | (1U<<1) | (1U<<2);
 8000eac:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <GPIO_init+0xc4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f6c <GPIO_init+0xc4>)
 8000eb2:	f043 0307 	orr.w	r3, r3, #7
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (1U<<18);   // Pino 9 como saída - RS
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <GPIO_init+0xc8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8000f70 <GPIO_init+0xc8>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<19);
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <GPIO_init+0xc8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a29      	ldr	r2, [pc, #164]	@ (8000f70 <GPIO_init+0xc8>)
 8000eca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000ece:	6013      	str	r3, [r2, #0]

    GPIOC->MODER |= (1U<<14);   // Pino 7 como saída - EN
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <GPIO_init+0xcc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a27      	ldr	r2, [pc, #156]	@ (8000f74 <GPIO_init+0xcc>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1U<<15);
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <GPIO_init+0xcc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <GPIO_init+0xcc>)
 8000ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ee6:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<10);   // Pino 5 como saída - D4
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <GPIO_init+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <GPIO_init+0xd0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<11);
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <GPIO_init+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <GPIO_init+0xd0>)
 8000efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000efe:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<8);    // Pino 4 como saída - D5
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <GPIO_init+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <GPIO_init+0xd0>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<9);
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <GPIO_init+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <GPIO_init+0xd0>)
 8000f12:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<20);   // Pino 10 como saída - D6
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <GPIO_init+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <GPIO_init+0xd0>)
 8000f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f22:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<21);
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <GPIO_init+0xd0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <GPIO_init+0xd0>)
 8000f2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<16);   // Pino 8 como saída - D7
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <GPIO_init+0xc8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <GPIO_init+0xc8>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<17);
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <GPIO_init+0xc8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <GPIO_init+0xc8>)
 8000f42:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f46:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<10);   // LED
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <GPIO_init+0xc8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <GPIO_init+0xc8>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f52:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<11);
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <GPIO_init+0xc8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <GPIO_init+0xc8>)
 8000f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020400 	.word	0x40020400

08000f7c <send_to_lcd>:

void send_to_lcd(int data, int rs)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    // rs = 1 para dados, rs=0 para comando
    if (rs == 1) {
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d106      	bne.n	8000f9a <send_to_lcd+0x1e>
        GPIOA->ODR |= (1U<<9);
 8000f8c:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <send_to_lcd+0xec>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a35      	ldr	r2, [pc, #212]	@ (8001068 <send_to_lcd+0xec>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f96:	6153      	str	r3, [r2, #20]
 8000f98:	e008      	b.n	8000fac <send_to_lcd+0x30>
    } else if (rs == 0) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <send_to_lcd+0x30>
        GPIOA->ODR &= ~(1U<<9);
 8000fa0:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <send_to_lcd+0xec>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	4a30      	ldr	r2, [pc, #192]	@ (8001068 <send_to_lcd+0xec>)
 8000fa6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000faa:	6153      	str	r3, [r2, #20]
    }

    if (((data>>3)&0x01) == 1) {   // D7 pin
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <send_to_lcd+0x48>
        GPIOA->ODR |= (1U<<8);
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <send_to_lcd+0xec>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a2b      	ldr	r2, [pc, #172]	@ (8001068 <send_to_lcd+0xec>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	e005      	b.n	8000fd0 <send_to_lcd+0x54>
    } else {
        GPIOA->ODR &= ~(1U<<8);
 8000fc4:	4b28      	ldr	r3, [pc, #160]	@ (8001068 <send_to_lcd+0xec>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <send_to_lcd+0xec>)
 8000fca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fce:	6153      	str	r3, [r2, #20]
    }

    if (((data>>2)&0x01) == 1) {   // D6 pin
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <send_to_lcd+0x6c>
        GPIOB->ODR |= (1U<<10);
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <send_to_lcd+0xf0>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <send_to_lcd+0xf0>)
 8000fe0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	e005      	b.n	8000ff4 <send_to_lcd+0x78>
    } else {
        GPIOB->ODR &= ~(1U<<10);
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <send_to_lcd+0xf0>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <send_to_lcd+0xf0>)
 8000fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ff2:	6153      	str	r3, [r2, #20]
    }

    if (((data>>1)&0x01) == 1) {   // D5 pin
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <send_to_lcd+0x90>
        GPIOB->ODR |= (1U<<4);
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <send_to_lcd+0xf0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a1a      	ldr	r2, [pc, #104]	@ (800106c <send_to_lcd+0xf0>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	e005      	b.n	8001018 <send_to_lcd+0x9c>
    } else {
        GPIOB->ODR &= ~(1U<<4);
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <send_to_lcd+0xf0>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	4a16      	ldr	r2, [pc, #88]	@ (800106c <send_to_lcd+0xf0>)
 8001012:	f023 0310 	bic.w	r3, r3, #16
 8001016:	6153      	str	r3, [r2, #20]
    }

    if (((data>>0)&0x01) == 1) {   // D4 pin
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <send_to_lcd+0xb4>
        GPIOB->ODR |= (1U<<5);
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <send_to_lcd+0xf0>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a11      	ldr	r2, [pc, #68]	@ (800106c <send_to_lcd+0xf0>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	e005      	b.n	800103c <send_to_lcd+0xc0>
    } else {
        GPIOB->ODR &= ~(1U<<5);
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <send_to_lcd+0xf0>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <send_to_lcd+0xf0>)
 8001036:	f023 0320 	bic.w	r3, r3, #32
 800103a:	6153      	str	r3, [r2, #20]
    }

    // Habilita o enable do LCD
    GPIOC->ODR |= (1U<<7);
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <send_to_lcd+0xf4>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <send_to_lcd+0xf4>)
 8001042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001046:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 8001048:	2064      	movs	r0, #100	@ 0x64
 800104a:	f000 faef 	bl	800162c <delayLCD>

    // Desabilita o enable do LCD
    GPIOC->ODR &= ~(1U<<7);
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <send_to_lcd+0xf4>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <send_to_lcd+0xf4>)
 8001054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001058:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 800105a:	2064      	movs	r0, #100	@ 0x64
 800105c:	f000 fae6 	bl	800162c <delayLCD>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800

08001074 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((cmd>>4)&0x0F);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);  // RS deve ser 0 enquanto enviando um comando
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff77 	bl	8000f7c <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((cmd)&0x0F);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff6e 	bl	8000f7c <send_to_lcd>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <lcd_init>:

void lcd_init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    // Inicialização no modo 4 bits
    delay_ms(50);     // Espera > 40ms
 80010ac:	2032      	movs	r0, #50	@ 0x32
 80010ae:	f000 faa4 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x30);
 80010b2:	2030      	movs	r0, #48	@ 0x30
 80010b4:	f7ff ffde 	bl	8001074 <lcd_send_cmd>
    delay_ms(5);      // Espera por > 4.1ms
 80010b8:	2005      	movs	r0, #5
 80010ba:	f000 fa9e 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x30);
 80010be:	2030      	movs	r0, #48	@ 0x30
 80010c0:	f7ff ffd8 	bl	8001074 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fa98 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x30);
 80010ca:	2030      	movs	r0, #48	@ 0x30
 80010cc:	f7ff ffd2 	bl	8001074 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fa92 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x20);  // Inicialização no modo de 4 bits
 80010d6:	2020      	movs	r0, #32
 80010d8:	f7ff ffcc 	bl	8001074 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fa8c 	bl	80015fa <delay_ms>

    // Inicialização do display
    lcd_send_cmd(0x28); // Função set --- DL=0 (modo 4 bits), N=1 (2 linhas), F=0 (Fonte 5x8)
 80010e2:	2028      	movs	r0, #40	@ 0x28
 80010e4:	f7ff ffc6 	bl	8001074 <lcd_send_cmd>
    delay_ms(50);
 80010e8:	2032      	movs	r0, #50	@ 0x32
 80010ea:	f000 fa86 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x08); // Controle on/off do display --- D=0, C=0, B=0 --- display off
 80010ee:	2008      	movs	r0, #8
 80010f0:	f7ff ffc0 	bl	8001074 <lcd_send_cmd>
    delay_ms(50);
 80010f4:	2032      	movs	r0, #50	@ 0x32
 80010f6:	f000 fa80 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x01); // Limpa display
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff ffba 	bl	8001074 <lcd_send_cmd>
    delay_ms(50);
 8001100:	2032      	movs	r0, #50	@ 0x32
 8001102:	f000 fa7a 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x06); // Entry mode set --- I/D=1 (incrementa cursor), S=0 (sem shift)
 8001106:	2006      	movs	r0, #6
 8001108:	f7ff ffb4 	bl	8001074 <lcd_send_cmd>
    delay_ms(50);
 800110c:	2032      	movs	r0, #50	@ 0x32
 800110e:	f000 fa74 	bl	80015fa <delay_ms>
    lcd_send_cmd(0x0C); // Display on/off control --- D=1, C=0, B=0 (cursor e blink desativados)
 8001112:	200c      	movs	r0, #12
 8001114:	f7ff ffae 	bl	8001074 <lcd_send_cmd>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <lcd_send_data>:

void lcd_send_data (char data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((data>>4)&0x0F);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);  // RS deve ser 1 enquanto enviando um dado
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2101      	movs	r1, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff23 	bl	8000f7c <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((data)&0x0F);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff1a 	bl	8000f7c <send_to_lcd>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <lcd_clear>:

void lcd_clear (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    // comando 01 - Limpa LCD
    lcd_send_cmd(0x01);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff8d 	bl	8001074 <lcd_send_cmd>
    delay_ms(100);
 800115a:	2064      	movs	r0, #100	@ 0x64
 800115c:	f000 fa4d 	bl	80015fa <delay_ms>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    switch (row)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <lcd_put_cur+0x18>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <lcd_put_cur+0x22>
 800117a:	e009      	b.n	8001190 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;  // 0x80 = Endereço da col. na linha 1
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001182:	603b      	str	r3, [r7, #0]
            break;
 8001184:	e004      	b.n	8001190 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;  // 0xC0 = Endereço da 2a col. na linha 1
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800118c:	603b      	str	r3, [r7, #0]
            break;
 800118e:	bf00      	nop
    }

    lcd_send_cmd(col);  // Posiciona o cursor no endereço a ser escrito no LCD
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff6d 	bl	8001074 <lcd_send_cmd>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 80011aa:	e006      	b.n	80011ba <lcd_send_string+0x18>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffb1 	bl	800111c <lcd_send_data>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f4      	bne.n	80011ac <lcd_send_string+0xa>
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <MX_FREERTOS_Init+0x18>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_FREERTOS_Init+0x1c>)
 80011d6:	f001 fa11 	bl	80025fc <osThreadNew>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a03      	ldr	r2, [pc, #12]	@ (80011ec <MX_FREERTOS_Init+0x20>)
 80011de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	08007b5c 	.word	0x08007b5c
 80011e8:	080011f1 	.word	0x080011f1
 80011ec:	200001f0 	.word	0x200001f0

080011f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f001 fa91 	bl	8002720 <osDelay>
 80011fe:	e7fb      	b.n	80011f8 <StartDefaultTask+0x8>

08001200 <keypad_init>:
#include "stm32f4xx.h"
#include "keypad.h"

uint16_t keypad_init()
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);  // Habilita clock para GPIOA
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <keypad_init+0x54>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <keypad_init+0x54>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1<<8);  // Habilita clock para ADC1
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <keypad_init+0x54>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <keypad_init+0x54>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121a:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= 0x03;    // Configura PA0 como entrada analógica
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <keypad_init+0x58>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <keypad_init+0x58>)
 8001222:	f043 0303 	orr.w	r3, r3, #3
 8001226:	6013      	str	r3, [r2, #0]

    ADC1->CR2 = 0;           // Dispara aquisição por software
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <keypad_init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;          // Seleciona o canal
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <keypad_init+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1 = 4;         // Tamanho da sequência de conversão 1
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <keypad_init+0x5c>)
 8001236:	2204      	movs	r2, #4
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->CR2 |= 1;          // Habilita ADC1
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <keypad_init+0x5c>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4a07      	ldr	r2, [pc, #28]	@ (800125c <keypad_init+0x5c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6093      	str	r3, [r2, #8]

    return 0;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40012000 	.word	0x40012000

08001260 <main>:


int cont = 0;

int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
	//HAL_Init();

	MX_USART2_UART_Init();
 8001266:	f000 f9f7 	bl	8001658 <MX_USART2_UART_Init>


	MX_FREERTOS_Init();
 800126a:	f7ff ffaf 	bl	80011cc <MX_FREERTOS_Init>


	GPIO_init();
 800126e:	f7ff fe1b 	bl	8000ea8 <GPIO_init>
	tim2_init();
 8001272:	f000 f965 	bl	8001540 <tim2_init>

	keypad_init();
 8001276:	f7ff ffc3 	bl	8001200 <keypad_init>

	lcd_init();
 800127a:	f7ff ff15 	bl	80010a8 <lcd_init>



	lcd_put_cur(0, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff6f 	bl	8001164 <lcd_put_cur>
	lcd_send_string("SIST. TEMPO REAL");
 8001286:	481d      	ldr	r0, [pc, #116]	@ (80012fc <main+0x9c>)
 8001288:	f7ff ff8b 	bl	80011a2 <lcd_send_string>

	lcd_put_cur(1, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ff68 	bl	8001164 <lcd_put_cur>
	lcd_send_string("* U N I F O R *");
 8001294:	481a      	ldr	r0, [pc, #104]	@ (8001300 <main+0xa0>)
 8001296:	f7ff ff84 	bl	80011a2 <lcd_send_string>
	delay(3000);
 800129a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800129e:	f000 f973 	bl	8001588 <delay>

    lcd_clear();
 80012a2:	f7ff ff55 	bl	8001150 <lcd_clear>

	lcd_put_cur(0, 0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ff5b 	bl	8001164 <lcd_put_cur>
	lcd_send_string("TENSAO=");
 80012ae:	4815      	ldr	r0, [pc, #84]	@ (8001304 <main+0xa4>)
 80012b0:	f7ff ff77 	bl	80011a2 <lcd_send_string>
	lcd_put_cur(0, 10);
 80012b4:	210a      	movs	r1, #10
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ff54 	bl	8001164 <lcd_put_cur>
	lcd_send_string("v");
 80012bc:	4812      	ldr	r0, [pc, #72]	@ (8001308 <main+0xa8>)
 80012be:	f7ff ff70 	bl	80011a2 <lcd_send_string>

	lcd_put_cur(1, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff ff4d 	bl	8001164 <lcd_put_cur>
	lcd_send_string("CONT=");
 80012ca:	4810      	ldr	r0, [pc, #64]	@ (800130c <main+0xac>)
 80012cc:	f7ff ff69 	bl	80011a2 <lcd_send_string>

	lcd_put_cur(1, 10);
 80012d0:	210a      	movs	r1, #10
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ff46 	bl	8001164 <lcd_put_cur>
	lcd_send_string("UNIFOR");
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <main+0xb0>)
 80012da:	f7ff ff62 	bl	80011a2 <lcd_send_string>

  //yearQueue = xQueueCreate(5,sizeof(int32_t));

  //xTaskCreate(keypad,"Ler_teclas",128,NULL,osPriorityNormal,NULL);
 // xTaskCreate(conta,"contar_up",128,NULL,osPriorityNormal,NULL);
  xTaskCreate(toggleLedTask, "Toggle LED", 128, NULL, 1, NULL);
 80012de:	2300      	movs	r3, #0
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	490a      	ldr	r1, [pc, #40]	@ (8001314 <main+0xb4>)
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <main+0xb8>)
 80012ee:	f002 f875 	bl	80033dc <xTaskCreate>

  //xTaskCreate(UART,"uart",128,NULL,osPriorityNormal,NULL);



  vTaskStartScheduler();
 80012f2:	f002 fa07 	bl	8003704 <vTaskStartScheduler>


  while (1)
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <main+0x96>
 80012fa:	bf00      	nop
 80012fc:	08007a9c 	.word	0x08007a9c
 8001300:	08007ab0 	.word	0x08007ab0
 8001304:	08007ac0 	.word	0x08007ac0
 8001308:	08007ac8 	.word	0x08007ac8
 800130c:	08007acc 	.word	0x08007acc
 8001310:	08007ad4 	.word	0x08007ad4
 8001314:	08007adc 	.word	0x08007adc
 8001318:	0800131d 	.word	0x0800131d

0800131c <toggleLedTask>:
  }
  return 0;
}

void toggleLedTask(void *pvParameters)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	GPIOA-> BSRR = (1U<<21);
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <toggleLedTask+0x2c>)
 8001326:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800132a:	619a      	str	r2, [r3, #24]
        delay(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001330:	f000 f92a 	bl	8001588 <delay>
        GPIOA-> BSRR = LED;
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <toggleLedTask+0x2c>)
 8001336:	2220      	movs	r2, #32
 8001338:	619a      	str	r2, [r3, #24]
        delay(500);
 800133a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800133e:	f000 f923 	bl	8001588 <delay>
    	GPIOA-> BSRR = (1U<<21);
 8001342:	bf00      	nop
 8001344:	e7ee      	b.n	8001324 <toggleLedTask+0x8>
 8001346:	bf00      	nop
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f000 fa2d 	bl	80017bc <HAL_IncTick>
  }

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40010000 	.word	0x40010000

08001370 <Error_Handler>:


void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop

  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <NMI_Handler+0x4>

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <MemManage_Handler+0x4>

08001394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013ba:	f000 fbd7 	bl	8001b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001f4 	.word	0x200001f4

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_kill>:

int _kill(int pid, int sig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e2:	f004 fc77 	bl	8005cd4 <__errno>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2216      	movs	r2, #22
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_exit>:

void _exit (int status)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffe7 	bl	80013d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800140a:	bf00      	nop
 800140c:	e7fd      	b.n	800140a <_exit+0x12>

0800140e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00a      	b.n	8001436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001420:	f3af 8000 	nop.w
 8001424:	4601      	mov	r1, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbf0      	blt.n	8001420 <_read+0x12>
  }

  return len;
 800143e:	687b      	ldr	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001470:	605a      	str	r2, [r3, #4]
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_isatty>:

int _isatty(int file)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	@ (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f004 fbf8 	bl	8005cd4 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20018000 	.word	0x20018000
 8001510:	00000400 	.word	0x00000400
 8001514:	2000023c 	.word	0x2000023c
 8001518:	20004dc0 	.word	0x20004dc0

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <tim2_init>:
#define TIM2EN (1U<<0)
#define CR1_CEN (1U<<0)
#define SR_UIF (1U<<0)

void tim2_init(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    /* Habilita o clock para acesso ao timer2 */
    RCC->APB1ENR |= TIM2EN;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <tim2_init+0x44>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	4a0e      	ldr	r2, [pc, #56]	@ (8001584 <tim2_init+0x44>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Configura o valor do prescaler */
    TIM2->PSC = 16;  // 16.000.000 / 16 = 1.000.000
 8001550:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001554:	2210      	movs	r2, #16
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Configura o valor de recarga automática (auto-reload) */
    TIM2->ARR = 1000;  // 1.000.000 / 1000 = 1000
 8001558:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800155c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Limpa o contador */
    TIM2->CNT = 0;
 8001562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Desabilita o timer */
    TIM2->CR1 &= ~CR1_CEN;
 800156a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6013      	str	r3, [r2, #0]
    /* Habilita a interrupção do TIM2 */
    // TIM2->DIER = DIER_UIE;

    /* Habilita a interrupção do controlador para o TIM2 */
    // NVIC_EnableIRQ(TIM2_IRQn);
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800

08001588 <delay>:

void delay(uint16_t ms)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
    /* Habilita o timer */
    TIM2->CR1 |= CR1_CEN;
 8001592:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24

    for (int i = 0; i < ms; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e012      	b.n	80015d6 <delay+0x4e>
        /* Espera pelo flag UIF - Estouro do timer */
        while (!(TIM2->SR & SR_UIF)) {}
 80015b0:	bf00      	nop
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f8      	beq.n	80015b2 <delay+0x2a>

        /* Limpa o flag UIF */
        TIM2->SR &= ~SR_UIF;
 80015c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6113      	str	r3, [r2, #16]
    for (int i = 0; i < ms; i++) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe8      	blt.n	80015b0 <delay+0x28>
    }

    TIM2->CR1 &= ~CR1_CEN;
 80015de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <delay_ms>:

// Delay de aprox. 1ms
void delay_ms(uint16_t us)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 50 * us; i++) {}
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e002      	b.n	8001610 <delay_ms+0x16>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	2232      	movs	r2, #50	@ 0x32
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbf5      	blt.n	800160a <delay_ms+0x10>
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <delayLCD>:

// Delay de aprox. 20us
void delayLCD(uint16_t us)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < us; i++) {}
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e002      	b.n	8001642 <delayLCD+0x16>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbf8      	blt.n	800163c <delayLCD+0x10>
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <MX_USART2_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001690:	f000 fb98 	bl	8001dc4 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f7ff fe69 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000240 	.word	0x20000240
 80016a8:	40004400 	.word	0x40004400

080016ac <_write>:

int _write(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <_write+0x28>)
 80016c4:	f000 fbce 	bl	8001e64 <HAL_UART_Transmit>
    return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000240 	.word	0x20000240

080016d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_UART_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <HAL_UART_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_UART_MspInit+0x88>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_UART_MspInit+0x88>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_UART_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <HAL_UART_MspInit+0x88>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_UART_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001732:	230c      	movs	r3, #12
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001742:	2307      	movs	r3, #7
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <HAL_UART_MspInit+0x8c>)
 800174e:	f000 f855 	bl	80017fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40004400 	.word	0x40004400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800176c:	f7ff fed6 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001796:	f004 faa3 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179a:	f7ff fd61 	bl	8001260 <main>
  bx  lr    
 800179e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017ac:	08007f08 	.word	0x08007f08
  ldr r2, =_sbss
 80017b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017b4:	20004dbc 	.word	0x20004dbc

080017b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC_IRQHandler>
	...

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000288 	.word	0x20000288

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000288 	.word	0x20000288

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e159      	b.n	8001acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8148 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a2 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b57      	ldr	r3, [pc, #348]	@ (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	4a56      	ldr	r2, [pc, #344]	@ (8001ae4 <HAL_GPIO_Init+0x2e8>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6453      	str	r3, [r2, #68]	@ 0x44
 8001992:	4b54      	ldr	r3, [pc, #336]	@ (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a52      	ldr	r2, [pc, #328]	@ (8001ae8 <HAL_GPIO_Init+0x2ec>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a49      	ldr	r2, [pc, #292]	@ (8001aec <HAL_GPIO_Init+0x2f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x202>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <HAL_GPIO_Init+0x2f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x1fe>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x1fa>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a46      	ldr	r2, [pc, #280]	@ (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x1f6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	@ (8001afc <HAL_GPIO_Init+0x300>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x1f2>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	@ (8001ae8 <HAL_GPIO_Init+0x2ec>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a2f      	ldr	r2, [pc, #188]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1a      	ldr	r2, [pc, #104]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f aea2 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40013c00 	.word	0x40013c00

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08007b80 	.word	0x08007b80

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08007b80 	.word	0x08007b80

08001b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d020      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01b      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0202 	mvn.w	r2, #2
 8001ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8d2 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001bbc:	e005      	b.n	8001bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8c4 	bl	8001d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8d5 	bl	8001d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d020      	beq.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0204 	mvn.w	r2, #4
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ac 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f89e 	bl	8001d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8af 	bl	8001d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d020      	beq.n	8001c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0208 	mvn.w	r2, #8
 8001c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f886 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001c54:	e005      	b.n	8001c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f878 	bl	8001d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f889 	bl	8001d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0210 	mvn.w	r2, #16
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f860 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f852 	bl	8001d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f863 	bl	8001d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0201 	mvn.w	r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fb3a 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f85a 	bl	8001db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f834 	bl	8001d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0220 	mvn.w	r2, #32
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f82c 	bl	8001d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e042      	b.n	8001e5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fc74 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	@ 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f973 	bl	80020f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d175      	bne.n	8001f70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Transmit+0x2c>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e06e      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2221      	movs	r2, #33	@ 0x21
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea2:	f7ff fc9f 	bl	80017e4 <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	88fa      	ldrh	r2, [r7, #6]
 8001eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ebc:	d108      	bne.n	8001ed0 <HAL_UART_Transmit+0x6c>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e003      	b.n	8001ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ed8:	e02e      	b.n	8001f38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f848 	bl	8001f7a <UART_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e03a      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10b      	bne.n	8001f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	3302      	adds	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e007      	b.n	8001f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1cb      	bne.n	8001eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2140      	movs	r1, #64	@ 0x40
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f814 	bl	8001f7a <UART_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e006      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f8a:	e03b      	b.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	d037      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f94:	f7ff fc26 	bl	80017e4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d302      	bcc.n	8001faa <UART_WaitOnFlagUntilTimeout+0x30>
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e03a      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b80      	cmp	r3, #128	@ 0x80
 8001fc0:	d020      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d01d      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d116      	bne.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f81d 	bl	800202c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00f      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4013      	ands	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	429a      	cmp	r2, r3
 8002020:	d0b4      	beq.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800202c:	b480      	push	{r7}
 800202e:	b095      	sub	sp, #84	@ 0x54
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	330c      	adds	r3, #12
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	e853 3f00 	ldrex	r3, [r3]
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	330c      	adds	r3, #12
 8002052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002054:	643a      	str	r2, [r7, #64]	@ 0x40
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800205a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e5      	bne.n	8002034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3314      	adds	r3, #20
 800206e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	e853 3f00 	ldrex	r3, [r3]
 8002076:	61fb      	str	r3, [r7, #28]
   return(result);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3314      	adds	r3, #20
 8002086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002090:	e841 2300 	strex	r3, r2, [r1]
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e5      	bne.n	8002068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d119      	bne.n	80020d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	330c      	adds	r3, #12
 80020aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e853 3f00 	ldrex	r3, [r3]
 80020b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0310 	bic.w	r3, r3, #16
 80020ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	330c      	adds	r3, #12
 80020c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020c4:	61ba      	str	r2, [r7, #24]
 80020c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	613b      	str	r3, [r7, #16]
   return(result);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e5      	bne.n	80020a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020e6:	bf00      	nop
 80020e8:	3754      	adds	r7, #84	@ 0x54
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b0c0      	sub	sp, #256	@ 0x100
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	68d9      	ldr	r1, [r3, #12]
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	ea40 0301 	orr.w	r3, r0, r1
 800211c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	431a      	orrs	r2, r3
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	431a      	orrs	r2, r3
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800214c:	f021 010c 	bic.w	r1, r1, #12
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216e:	6999      	ldr	r1, [r3, #24]
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	ea40 0301 	orr.w	r3, r0, r1
 800217a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b8f      	ldr	r3, [pc, #572]	@ (80023c0 <UART_SetConfig+0x2cc>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d005      	beq.n	8002194 <UART_SetConfig+0xa0>
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b8d      	ldr	r3, [pc, #564]	@ (80023c4 <UART_SetConfig+0x2d0>)
 8002190:	429a      	cmp	r2, r3
 8002192:	d104      	bne.n	800219e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002194:	f7ff fcd6 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002198:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800219c:	e003      	b.n	80021a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800219e:	f7ff fcbd 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80021a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b0:	f040 810c 	bne.w	80023cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021c6:	4622      	mov	r2, r4
 80021c8:	462b      	mov	r3, r5
 80021ca:	1891      	adds	r1, r2, r2
 80021cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021ce:	415b      	adcs	r3, r3
 80021d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021d6:	4621      	mov	r1, r4
 80021d8:	eb12 0801 	adds.w	r8, r2, r1
 80021dc:	4629      	mov	r1, r5
 80021de:	eb43 0901 	adc.w	r9, r3, r1
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f6:	4690      	mov	r8, r2
 80021f8:	4699      	mov	r9, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	eb18 0303 	adds.w	r3, r8, r3
 8002200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002204:	462b      	mov	r3, r5
 8002206:	eb49 0303 	adc.w	r3, r9, r3
 800220a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800221a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800221e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002222:	460b      	mov	r3, r1
 8002224:	18db      	adds	r3, r3, r3
 8002226:	653b      	str	r3, [r7, #80]	@ 0x50
 8002228:	4613      	mov	r3, r2
 800222a:	eb42 0303 	adc.w	r3, r2, r3
 800222e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002238:	f7fe fcbe 	bl	8000bb8 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4b61      	ldr	r3, [pc, #388]	@ (80023c8 <UART_SetConfig+0x2d4>)
 8002242:	fba3 2302 	umull	r2, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	011c      	lsls	r4, r3, #4
 800224a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002254:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800225c:	4642      	mov	r2, r8
 800225e:	464b      	mov	r3, r9
 8002260:	1891      	adds	r1, r2, r2
 8002262:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002264:	415b      	adcs	r3, r3
 8002266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800226c:	4641      	mov	r1, r8
 800226e:	eb12 0a01 	adds.w	sl, r2, r1
 8002272:	4649      	mov	r1, r9
 8002274:	eb43 0b01 	adc.w	fp, r3, r1
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228c:	4692      	mov	sl, r2
 800228e:	469b      	mov	fp, r3
 8002290:	4643      	mov	r3, r8
 8002292:	eb1a 0303 	adds.w	r3, sl, r3
 8002296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800229a:	464b      	mov	r3, r9
 800229c:	eb4b 0303 	adc.w	r3, fp, r3
 80022a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022b8:	460b      	mov	r3, r1
 80022ba:	18db      	adds	r3, r3, r3
 80022bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80022be:	4613      	mov	r3, r2
 80022c0:	eb42 0303 	adc.w	r3, r2, r3
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022ce:	f7fe fc73 	bl	8000bb8 <__aeabi_uldivmod>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <UART_SetConfig+0x2d4>)
 80022da:	fba3 2301 	umull	r2, r3, r3, r1
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2264      	movs	r2, #100	@ 0x64
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	1acb      	subs	r3, r1, r3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022ee:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <UART_SetConfig+0x2d4>)
 80022f0:	fba3 2302 	umull	r2, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022fc:	441c      	add	r4, r3
 80022fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002302:	2200      	movs	r2, #0
 8002304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002308:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800230c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002310:	4642      	mov	r2, r8
 8002312:	464b      	mov	r3, r9
 8002314:	1891      	adds	r1, r2, r2
 8002316:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002318:	415b      	adcs	r3, r3
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002320:	4641      	mov	r1, r8
 8002322:	1851      	adds	r1, r2, r1
 8002324:	6339      	str	r1, [r7, #48]	@ 0x30
 8002326:	4649      	mov	r1, r9
 8002328:	414b      	adcs	r3, r1
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002338:	4659      	mov	r1, fp
 800233a:	00cb      	lsls	r3, r1, #3
 800233c:	4651      	mov	r1, sl
 800233e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002342:	4651      	mov	r1, sl
 8002344:	00ca      	lsls	r2, r1, #3
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	4603      	mov	r3, r0
 800234c:	4642      	mov	r2, r8
 800234e:	189b      	adds	r3, r3, r2
 8002350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002354:	464b      	mov	r3, r9
 8002356:	460a      	mov	r2, r1
 8002358:	eb42 0303 	adc.w	r3, r2, r3
 800235c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800236c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002374:	460b      	mov	r3, r1
 8002376:	18db      	adds	r3, r3, r3
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800237a:	4613      	mov	r3, r2
 800237c:	eb42 0303 	adc.w	r3, r2, r3
 8002380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800238a:	f7fe fc15 	bl	8000bb8 <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <UART_SetConfig+0x2d4>)
 8002394:	fba3 1302 	umull	r1, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	2164      	movs	r1, #100	@ 0x64
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	3332      	adds	r3, #50	@ 0x32
 80023a6:	4a08      	ldr	r2, [pc, #32]	@ (80023c8 <UART_SetConfig+0x2d4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	f003 0207 	and.w	r2, r3, #7
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4422      	add	r2, r4
 80023ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023bc:	e106      	b.n	80025cc <UART_SetConfig+0x4d8>
 80023be:	bf00      	nop
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40011400 	.word	0x40011400
 80023c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023de:	4642      	mov	r2, r8
 80023e0:	464b      	mov	r3, r9
 80023e2:	1891      	adds	r1, r2, r2
 80023e4:	6239      	str	r1, [r7, #32]
 80023e6:	415b      	adcs	r3, r3
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ee:	4641      	mov	r1, r8
 80023f0:	1854      	adds	r4, r2, r1
 80023f2:	4649      	mov	r1, r9
 80023f4:	eb43 0501 	adc.w	r5, r3, r1
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	00eb      	lsls	r3, r5, #3
 8002402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002406:	00e2      	lsls	r2, r4, #3
 8002408:	4614      	mov	r4, r2
 800240a:	461d      	mov	r5, r3
 800240c:	4643      	mov	r3, r8
 800240e:	18e3      	adds	r3, r4, r3
 8002410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002414:	464b      	mov	r3, r9
 8002416:	eb45 0303 	adc.w	r3, r5, r3
 800241a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800242a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800243a:	4629      	mov	r1, r5
 800243c:	008b      	lsls	r3, r1, #2
 800243e:	4621      	mov	r1, r4
 8002440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002444:	4621      	mov	r1, r4
 8002446:	008a      	lsls	r2, r1, #2
 8002448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800244c:	f7fe fbb4 	bl	8000bb8 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4b60      	ldr	r3, [pc, #384]	@ (80025d8 <UART_SetConfig+0x4e4>)
 8002456:	fba3 2302 	umull	r2, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	011c      	lsls	r4, r3, #4
 800245e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002468:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800246c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	1891      	adds	r1, r2, r2
 8002476:	61b9      	str	r1, [r7, #24]
 8002478:	415b      	adcs	r3, r3
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002480:	4641      	mov	r1, r8
 8002482:	1851      	adds	r1, r2, r1
 8002484:	6139      	str	r1, [r7, #16]
 8002486:	4649      	mov	r1, r9
 8002488:	414b      	adcs	r3, r1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002498:	4659      	mov	r1, fp
 800249a:	00cb      	lsls	r3, r1, #3
 800249c:	4651      	mov	r1, sl
 800249e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024a2:	4651      	mov	r1, sl
 80024a4:	00ca      	lsls	r2, r1, #3
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	4642      	mov	r2, r8
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024b4:	464b      	mov	r3, r9
 80024b6:	460a      	mov	r2, r1
 80024b8:	eb42 0303 	adc.w	r3, r2, r3
 80024bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024d8:	4649      	mov	r1, r9
 80024da:	008b      	lsls	r3, r1, #2
 80024dc:	4641      	mov	r1, r8
 80024de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e2:	4641      	mov	r1, r8
 80024e4:	008a      	lsls	r2, r1, #2
 80024e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024ea:	f7fe fb65 	bl	8000bb8 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	4b38      	ldr	r3, [pc, #224]	@ (80025d8 <UART_SetConfig+0x4e4>)
 80024f6:	fba3 2301 	umull	r2, r3, r3, r1
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2264      	movs	r2, #100	@ 0x64
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	1acb      	subs	r3, r1, r3
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	3332      	adds	r3, #50	@ 0x32
 8002508:	4a33      	ldr	r2, [pc, #204]	@ (80025d8 <UART_SetConfig+0x4e4>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002514:	441c      	add	r4, r3
 8002516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800251a:	2200      	movs	r2, #0
 800251c:	673b      	str	r3, [r7, #112]	@ 0x70
 800251e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002520:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	415b      	adcs	r3, r3
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002534:	4641      	mov	r1, r8
 8002536:	1851      	adds	r1, r2, r1
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	4649      	mov	r1, r9
 800253c:	414b      	adcs	r3, r1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800254c:	4659      	mov	r1, fp
 800254e:	00cb      	lsls	r3, r1, #3
 8002550:	4651      	mov	r1, sl
 8002552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002556:	4651      	mov	r1, sl
 8002558:	00ca      	lsls	r2, r1, #3
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	4603      	mov	r3, r0
 8002560:	4642      	mov	r2, r8
 8002562:	189b      	adds	r3, r3, r2
 8002564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002566:	464b      	mov	r3, r9
 8002568:	460a      	mov	r2, r1
 800256a:	eb42 0303 	adc.w	r3, r2, r3
 800256e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	663b      	str	r3, [r7, #96]	@ 0x60
 800257a:	667a      	str	r2, [r7, #100]	@ 0x64
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002588:	4649      	mov	r1, r9
 800258a:	008b      	lsls	r3, r1, #2
 800258c:	4641      	mov	r1, r8
 800258e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002592:	4641      	mov	r1, r8
 8002594:	008a      	lsls	r2, r1, #2
 8002596:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800259a:	f7fe fb0d 	bl	8000bb8 <__aeabi_uldivmod>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <UART_SetConfig+0x4e4>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	2164      	movs	r1, #100	@ 0x64
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	3332      	adds	r3, #50	@ 0x32
 80025b6:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <UART_SetConfig+0x4e4>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4422      	add	r2, r4
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025d2:	46bd      	mov	sp, r7
 80025d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d8:	51eb851f 	.word	0x51eb851f

080025dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <SysTick_Handler+0x1c>)
 80025e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025e4:	f001 fcf2 	bl	8003fcc <xTaskGetSchedulerState>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025ee:	f002 faeb 	bl	8004bc8 <xPortSysTickHandler>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	@ 0x38
 8002600:	af04      	add	r7, sp, #16
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260c:	f3ef 8305 	mrs	r3, IPSR
 8002610:	617b      	str	r3, [r7, #20]
  return(result);
 8002612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	d17e      	bne.n	8002716 <osThreadNew+0x11a>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07b      	beq.n	8002716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002622:	2318      	movs	r3, #24
 8002624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d045      	beq.n	80026c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <osThreadNew+0x48>
        name = attr->name;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <osThreadNew+0x6e>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b38      	cmp	r3, #56	@ 0x38
 800265c:	d805      	bhi.n	800266a <osThreadNew+0x6e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <osThreadNew+0x72>
        return (NULL);
 800266a:	2300      	movs	r3, #0
 800266c:	e054      	b.n	8002718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00e      	beq.n	80026a4 <osThreadNew+0xa8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2ba7      	cmp	r3, #167	@ 0xa7
 800268c:	d90a      	bls.n	80026a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <osThreadNew+0xa8>
        mem = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	e010      	b.n	80026c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <osThreadNew+0xca>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d108      	bne.n	80026c6 <osThreadNew+0xca>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <osThreadNew+0xca>
          mem = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e001      	b.n	80026c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d110      	bne.n	80026ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d4:	9202      	str	r2, [sp, #8]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6a3a      	ldr	r2, [r7, #32]
 80026e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fe1a 	bl	800331c <xTaskCreateStatic>
 80026e8:	4603      	mov	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e013      	b.n	8002716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d110      	bne.n	8002716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fe68 	bl	80033dc <xTaskCreate>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <osThreadNew+0x11a>
            hTask = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002716:	693b      	ldr	r3, [r7, #16]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3728      	adds	r7, #40	@ 0x28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002728:	f3ef 8305 	mrs	r3, IPSR
 800272c:	60bb      	str	r3, [r7, #8]
  return(result);
 800272e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <osDelay+0x1c>
    stat = osErrorISR;
 8002734:	f06f 0305 	mvn.w	r3, #5
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e007      	b.n	800274c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 ffa6 	bl	8003698 <vTaskDelay>
    }
  }

  return (stat);
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <vApplicationGetIdleTaskMemory+0x2c>)
 8002768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4a06      	ldr	r2, [pc, #24]	@ (8002788 <vApplicationGetIdleTaskMemory+0x30>)
 800276e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000028c 	.word	0x2000028c
 8002788:	20000334 	.word	0x20000334

0800278c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800279c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4a06      	ldr	r2, [pc, #24]	@ (80027bc <vApplicationGetTimerTaskMemory+0x30>)
 80027a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	20000534 	.word	0x20000534
 80027bc:	200005dc 	.word	0x200005dc

080027c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0208 	add.w	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f103 0208 	add.w	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0208 	add.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d103      	bne.n	8002882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e00c      	b.n	800289c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3308      	adds	r3, #8
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e002      	b.n	8002890 <vListInsert+0x2e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d2f6      	bcs.n	800288a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6852      	ldr	r2, [r2, #4]
 80028f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d103      	bne.n	8002908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002954:	f002 f8a8 	bl	8004aa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	3b01      	subs	r3, #1
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	22ff      	movs	r2, #255	@ 0xff
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	22ff      	movs	r2, #255	@ 0xff
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3310      	adds	r3, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f942 	bl	8003c40 <xTaskRemoveFromEventList>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c2:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <xQueueGenericReset+0xd0>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	e009      	b.n	80029e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3310      	adds	r3, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fef1 	bl	80027c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3324      	adds	r3, #36	@ 0x24
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff feec 	bl	80027c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029e8:	f002 f890 	bl	8004b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	@ 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	e7fd      	b.n	8002a42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <xQueueGenericCreateStatic+0x56>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <xQueueGenericCreateStatic+0x5a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericCreateStatic+0x5c>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	623b      	str	r3, [r7, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <xQueueGenericCreateStatic+0x84>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <xQueueGenericCreateStatic+0x88>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <xQueueGenericCreateStatic+0x8a>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	61fb      	str	r3, [r7, #28]
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aa2:	2350      	movs	r3, #80	@ 0x50
 8002aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b50      	cmp	r3, #80	@ 0x50
 8002aaa:	d00b      	beq.n	8002ac4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	61bb      	str	r3, [r7, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ac4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ad8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f805 	bl	8002af6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3730      	adds	r7, #48	@ 0x30
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e002      	b.n	8002b18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b24:	2101      	movs	r1, #1
 8002b26:	69b8      	ldr	r0, [r7, #24]
 8002b28:	f7ff fefe 	bl	8002928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08e      	sub	sp, #56	@ 0x38
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10b      	bne.n	8002b70 <xQueueGenericSend+0x34>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSend+0x42>
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueGenericSend+0x46>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericSend+0x48>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <xQueueGenericSend+0x64>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d103      	bne.n	8002bae <xQueueGenericSend+0x72>
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <xQueueGenericSend+0x76>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueGenericSend+0x78>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xQueueGenericSend+0x94>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bd0:	f001 f9fc 	bl	8003fcc <xTaskGetSchedulerState>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <xQueueGenericSend+0xa4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <xQueueGenericSend+0xa8>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <xQueueGenericSend+0xaa>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <xQueueGenericSend+0xc6>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	61fb      	str	r3, [r7, #28]
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	e7fd      	b.n	8002bfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c02:	f001 ff51 	bl	8004aa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <xQueueGenericSend+0xdc>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d129      	bne.n	8002c6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c1e:	f000 fa0f 	bl	8003040 <prvCopyDataToQueue>
 8002c22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	3324      	adds	r3, #36	@ 0x24
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 f805 	bl	8003c40 <xTaskRemoveFromEventList>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d3c <xQueueGenericSend+0x200>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	e00a      	b.n	8002c64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c54:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <xQueueGenericSend+0x200>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c64:	f001 ff52 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e063      	b.n	8002d34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c72:	f001 ff4b 	bl	8004b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e05c      	b.n	8002d34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 f83f 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c8e:	f001 ff3d 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c92:	f000 fda7 	bl	80037e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c96:	f001 ff07 	bl	8004aa8 <vPortEnterCritical>
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d103      	bne.n	8002cb0 <xQueueGenericSend+0x174>
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSend+0x18a>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cc6:	f001 ff21 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cca:	1d3a      	adds	r2, r7, #4
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f82e 	bl	8003d34 <xTaskCheckForTimeOut>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d124      	bne.n	8002d28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce0:	f000 faa6 	bl	8003230 <prvIsQueueFull>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	3310      	adds	r3, #16
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 ff52 	bl	8003b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cfa:	f000 fa31 	bl	8003160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cfe:	f000 fd7f 	bl	8003800 <xTaskResumeAll>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f af7c 	bne.w	8002c02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <xQueueGenericSend+0x200>)
 8002d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	e772      	b.n	8002c02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d1e:	f000 fa1f 	bl	8003160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d22:	f000 fd6d 	bl	8003800 <xTaskResumeAll>
 8002d26:	e76c      	b.n	8002c02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d2a:	f000 fa19 	bl	8003160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d2e:	f000 fd67 	bl	8003800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	@ 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	e000ed04 	.word	0xe000ed04

08002d40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b090      	sub	sp, #64	@ 0x40
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSendFromISR+0x3e>
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSendFromISR+0x42>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSendFromISR+0x44>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSendFromISR+0x6e>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSendFromISR+0x72>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSendFromISR+0x74>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	623b      	str	r3, [r7, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dd0:	f001 ff4a 	bl	8004c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8002dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	61fa      	str	r2, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <xQueueGenericSendFromISR+0xc2>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d12f      	bne.n	8002e62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e18:	f000 f912 	bl	8003040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d112      	bne.n	8002e4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	3324      	adds	r3, #36	@ 0x24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ff04 	bl	8003c40 <xTaskRemoveFromEventList>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00e      	beq.n	8002e5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e50:	3301      	adds	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	b25a      	sxtb	r2, r3
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e60:	e001      	b.n	8002e66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3740      	adds	r7, #64	@ 0x40
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08c      	sub	sp, #48	@ 0x30
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <xQueueReceive+0x32>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	623b      	str	r3, [r7, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	e7fd      	b.n	8002eaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <xQueueReceive+0x40>
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <xQueueReceive+0x44>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <xQueueReceive+0x46>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <xQueueReceive+0x62>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	61fb      	str	r3, [r7, #28]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ede:	f001 f875 	bl	8003fcc <xTaskGetSchedulerState>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <xQueueReceive+0x72>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <xQueueReceive+0x76>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <xQueueReceive+0x78>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <xQueueReceive+0x94>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	61bb      	str	r3, [r7, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f10:	f001 fdca 	bl	8004aa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01f      	beq.n	8002f60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f24:	f000 f8f6 	bl	8003114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fe7f 	bl	8003c40 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b3c      	ldr	r3, [pc, #240]	@ (800303c <xQueueReceive+0x1c0>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f58:	f001 fdd8 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e069      	b.n	8003034 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f66:	f001 fdd1 	bl	8004b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e062      	b.n	8003034 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fec5 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f82:	f001 fdc3 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f86:	f000 fc2d 	bl	80037e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f8a:	f001 fd8d 	bl	8004aa8 <vPortEnterCritical>
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d103      	bne.n	8002fa4 <xQueueReceive+0x128>
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d103      	bne.n	8002fba <xQueueReceive+0x13e>
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fba:	f001 fda7 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fbe:	1d3a      	adds	r2, r7, #4
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 feb4 	bl	8003d34 <xTaskCheckForTimeOut>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d123      	bne.n	800301a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd4:	f000 f916 	bl	8003204 <prvIsQueueEmpty>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d017      	beq.n	800300e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	3324      	adds	r3, #36	@ 0x24
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fdd8 	bl	8003b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fee:	f000 f8b7 	bl	8003160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ff2:	f000 fc05 	bl	8003800 <xTaskResumeAll>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d189      	bne.n	8002f10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <xQueueReceive+0x1c0>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	e780      	b.n	8002f10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800300e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003010:	f000 f8a6 	bl	8003160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003014:	f000 fbf4 	bl	8003800 <xTaskResumeAll>
 8003018:	e77a      	b.n	8002f10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800301a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800301c:	f000 f8a0 	bl	8003160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003020:	f000 fbee 	bl	8003800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003026:	f000 f8ed 	bl	8003204 <prvIsQueueEmpty>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	f43f af6f 	beq.w	8002f10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003032:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	@ 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d14d      	bne.n	8003102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffcc 	bl	8004008 <xTaskPriorityDisinherit>
 8003070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e043      	b.n	8003102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d119      	bne.n	80030b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6858      	ldr	r0, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	461a      	mov	r2, r3
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	f002 fe4f 	bl	8005d2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d32b      	bcc.n	8003102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e026      	b.n	8003102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68d8      	ldr	r0, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	461a      	mov	r2, r3
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	f002 fe35 	bl	8005d2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	425b      	negs	r3, r3
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	425b      	negs	r3, r3
 80030ea:	441a      	add	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d105      	bne.n	8003102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3b01      	subs	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800310a:	697b      	ldr	r3, [r7, #20]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	441a      	add	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d303      	bcc.n	8003148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	461a      	mov	r2, r3
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	f002 fdeb 	bl	8005d2e <memcpy>
	}
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003168:	f001 fc9e 	bl	8004aa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003174:	e011      	b.n	800319a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3324      	adds	r3, #36	@ 0x24
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fd5c 	bl	8003c40 <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800318e:	f000 fe35 	bl	8003dfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3b01      	subs	r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dce9      	bgt.n	8003176 <prvUnlockQueue+0x16>
 80031a2:	e000      	b.n	80031a6 <prvUnlockQueue+0x46>
					break;
 80031a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	22ff      	movs	r2, #255	@ 0xff
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031ae:	f001 fcad 	bl	8004b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031b2:	f001 fc79 	bl	8004aa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031be:	e011      	b.n	80031e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3310      	adds	r3, #16
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fd37 	bl	8003c40 <xTaskRemoveFromEventList>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031d8:	f000 fe10 	bl	8003dfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	3b01      	subs	r3, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	dce9      	bgt.n	80031c0 <prvUnlockQueue+0x60>
 80031ec:	e000      	b.n	80031f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	22ff      	movs	r2, #255	@ 0xff
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031f8:	f001 fc88 	bl	8004b0c <vPortExitCritical>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800320c:	f001 fc4c 	bl	8004aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e001      	b.n	8003222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003222:	f001 fc73 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003238:	f001 fc36 	bl	8004aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	429a      	cmp	r2, r3
 8003246:	d102      	bne.n	800324e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e001      	b.n	8003252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003252:	f001 fc5b 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e014      	b.n	800329a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003270:	4a0f      	ldr	r2, [pc, #60]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800327c:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003286:	4a0a      	ldr	r2, [pc, #40]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003292:	e006      	b.n	80032a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b07      	cmp	r3, #7
 800329e:	d9e7      	bls.n	8003270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	200009dc 	.word	0x200009dc

080032b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032c4:	f001 fbf0 	bl	8004aa8 <vPortEnterCritical>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <vQueueWaitForMessageRestricted+0x2a>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d103      	bne.n	80032f4 <vQueueWaitForMessageRestricted+0x40>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032f4:	f001 fc0a 	bl	8004b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3324      	adds	r3, #36	@ 0x24
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fc6d 	bl	8003be8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff26 	bl	8003160 <prvUnlockQueue>
	}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	@ 0x38
 8003320:	af04      	add	r7, sp, #16
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	623b      	str	r3, [r7, #32]
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <xTaskCreateStatic+0x4a>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	61fb      	str	r3, [r7, #28]
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	e7fd      	b.n	8003362 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003366:	23a8      	movs	r3, #168	@ 0xa8
 8003368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2ba8      	cmp	r3, #168	@ 0xa8
 800336e:	d00b      	beq.n	8003388 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	61bb      	str	r3, [r7, #24]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003388:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01e      	beq.n	80033ce <xTaskCreateStatic+0xb2>
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033a8:	2300      	movs	r3, #0
 80033aa:	9303      	str	r3, [sp, #12]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f851 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033c8:	f000 f8f6 	bl	80035b8 <prvAddNewTaskToReadyList>
 80033cc:	e001      	b.n	80033d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033d2:	697b      	ldr	r3, [r7, #20]
	}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3728      	adds	r7, #40	@ 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	@ 0x30
 80033e0:	af04      	add	r7, sp, #16
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fc7b 	bl	8004cec <pvPortMalloc>
 80033f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033fe:	20a8      	movs	r0, #168	@ 0xa8
 8003400:	f001 fc74 	bl	8004cec <pvPortMalloc>
 8003404:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
 8003412:	e005      	b.n	8003420 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003414:	6978      	ldr	r0, [r7, #20]
 8003416:	f001 fd37 	bl	8004e88 <vPortFree>
 800341a:	e001      	b.n	8003420 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	2300      	movs	r3, #0
 8003432:	9303      	str	r3, [sp, #12]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f80f 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800344a:	69f8      	ldr	r0, [r7, #28]
 800344c:	f000 f8b4 	bl	80035b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003450:	2301      	movs	r3, #1
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e002      	b.n	800345c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800345c:	69bb      	ldr	r3, [r7, #24]
	}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	461a      	mov	r2, r3
 8003480:	21a5      	movs	r1, #165	@ 0xa5
 8003482:	f002 fb7e 	bl	8005b82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003490:	3b01      	subs	r3, #1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	617b      	str	r3, [r7, #20]
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01f      	beq.n	8003508 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e012      	b.n	80034f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	7819      	ldrb	r1, [r3, #0]
 80034d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	3334      	adds	r3, #52	@ 0x34
 80034de:	460a      	mov	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d9e9      	bls.n	80034ce <prvInitialiseNewTask+0x66>
 80034fa:	e000      	b.n	80034fe <prvInitialiseNewTask+0x96>
			{
				break;
 80034fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003506:	e003      	b.n	8003510 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	2b37      	cmp	r3, #55	@ 0x37
 8003514:	d901      	bls.n	800351a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003516:	2337      	movs	r3, #55	@ 0x37
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003524:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	3304      	adds	r3, #4
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f965 	bl	8002800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	3318      	adds	r3, #24
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f960 	bl	8002800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003544:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	2200      	movs	r2, #0
 800355a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	2200      	movs	r2, #0
 8003562:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	3354      	adds	r3, #84	@ 0x54
 800356a:	224c      	movs	r2, #76	@ 0x4c
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fb07 	bl	8005b82 <memset>
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <prvInitialiseNewTask+0x144>)
 8003578:	659a      	str	r2, [r3, #88]	@ 0x58
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <prvInitialiseNewTask+0x148>)
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	4a0c      	ldr	r2, [pc, #48]	@ (80035b4 <prvInitialiseNewTask+0x14c>)
 8003584:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	69b8      	ldr	r0, [r7, #24]
 800358c:	f001 f95a 	bl	8004844 <pxPortInitialiseStack>
 8003590:	4602      	mov	r2, r0
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035a2:	bf00      	nop
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20004c70 	.word	0x20004c70
 80035b0:	20004cd8 	.word	0x20004cd8
 80035b4:	20004d40 	.word	0x20004d40

080035b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035c0:	f001 fa72 	bl	8004aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035dc:	4b27      	ldr	r3, [pc, #156]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d110      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035e4:	f000 fc2e 	bl	8003e44 <prvInitialiseTaskLists>
 80035e8:	e00d      	b.n	8003606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ea:	4b26      	ldr	r3, [pc, #152]	@ (8003684 <prvAddNewTaskToReadyList+0xcc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d802      	bhi.n	8003606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003600:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003606:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <prvAddNewTaskToReadyList+0xd0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <prvAddNewTaskToReadyList+0xd0>)
 800360e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <prvAddNewTaskToReadyList+0xd0>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <prvAddNewTaskToReadyList+0xd4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d903      	bls.n	800362c <prvAddNewTaskToReadyList+0x74>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	4a18      	ldr	r2, [pc, #96]	@ (800368c <prvAddNewTaskToReadyList+0xd4>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <prvAddNewTaskToReadyList+0xd8>)
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff f8e9 	bl	800281a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003648:	f001 fa60 	bl	8004b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800364c:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <prvAddNewTaskToReadyList+0xcc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	429a      	cmp	r2, r3
 8003660:	d207      	bcs.n	8003672 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003662:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <prvAddNewTaskToReadyList+0xdc>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000ef0 	.word	0x20000ef0
 8003680:	20000a1c 	.word	0x20000a1c
 8003684:	20000efc 	.word	0x20000efc
 8003688:	20000f0c 	.word	0x20000f0c
 800368c:	20000ef8 	.word	0x20000ef8
 8003690:	20000a20 	.word	0x20000a20
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d018      	beq.n	80036dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036aa:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <vTaskDelay+0x64>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <vTaskDelay+0x32>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60bb      	str	r3, [r7, #8]
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	e7fd      	b.n	80036c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036ca:	f000 f88b 	bl	80037e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036ce:	2100      	movs	r1, #0
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fd09 	bl	80040e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036d6:	f000 f893 	bl	8003800 <xTaskResumeAll>
 80036da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <vTaskDelay+0x68>)
 80036e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000f18 	.word	0x20000f18
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	@ 0x28
 8003708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003712:	463a      	mov	r2, r7
 8003714:	1d39      	adds	r1, r7, #4
 8003716:	f107 0308 	add.w	r3, r7, #8
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f81c 	bl	8002758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	9202      	str	r2, [sp, #8]
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	460a      	mov	r2, r1
 8003732:	4924      	ldr	r1, [pc, #144]	@ (80037c4 <vTaskStartScheduler+0xc0>)
 8003734:	4824      	ldr	r0, [pc, #144]	@ (80037c8 <vTaskStartScheduler+0xc4>)
 8003736:	f7ff fdf1 	bl	800331c <xTaskCreateStatic>
 800373a:	4603      	mov	r3, r0
 800373c:	4a23      	ldr	r2, [pc, #140]	@ (80037cc <vTaskStartScheduler+0xc8>)
 800373e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003740:	4b22      	ldr	r3, [pc, #136]	@ (80037cc <vTaskStartScheduler+0xc8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003748:	2301      	movs	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e001      	b.n	8003752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003758:	f000 fd1a 	bl	8004190 <xTimerCreateTimerTask>
 800375c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11b      	bne.n	800379c <vTaskStartScheduler+0x98>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	613b      	str	r3, [r7, #16]
}
 8003776:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003778:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <vTaskStartScheduler+0xcc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3354      	adds	r3, #84	@ 0x54
 800377e:	4a15      	ldr	r2, [pc, #84]	@ (80037d4 <vTaskStartScheduler+0xd0>)
 8003780:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <vTaskStartScheduler+0xd4>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <vTaskStartScheduler+0xd8>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <vTaskStartScheduler+0xdc>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003796:	f001 f8e3 	bl	8004960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800379a:	e00f      	b.n	80037bc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d10b      	bne.n	80037bc <vTaskStartScheduler+0xb8>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	60fb      	str	r3, [r7, #12]
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <vTaskStartScheduler+0xb4>
}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	08007b44 	.word	0x08007b44
 80037c8:	08003e15 	.word	0x08003e15
 80037cc:	20000f14 	.word	0x20000f14
 80037d0:	20000a1c 	.word	0x20000a1c
 80037d4:	20000018 	.word	0x20000018
 80037d8:	20000f10 	.word	0x20000f10
 80037dc:	20000efc 	.word	0x20000efc
 80037e0:	20000ef4 	.word	0x20000ef4

080037e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <vTaskSuspendAll+0x18>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a03      	ldr	r2, [pc, #12]	@ (80037fc <vTaskSuspendAll+0x18>)
 80037f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000f18 	.word	0x20000f18

08003800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800380e:	4b42      	ldr	r3, [pc, #264]	@ (8003918 <xTaskResumeAll+0x118>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <xTaskResumeAll+0x2e>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	603b      	str	r3, [r7, #0]
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	e7fd      	b.n	800382a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800382e:	f001 f93b 	bl	8004aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003832:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <xTaskResumeAll+0x118>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3b01      	subs	r3, #1
 8003838:	4a37      	ldr	r2, [pc, #220]	@ (8003918 <xTaskResumeAll+0x118>)
 800383a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383c:	4b36      	ldr	r3, [pc, #216]	@ (8003918 <xTaskResumeAll+0x118>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d162      	bne.n	800390a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003844:	4b35      	ldr	r3, [pc, #212]	@ (800391c <xTaskResumeAll+0x11c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05e      	beq.n	800390a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800384c:	e02f      	b.n	80038ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384e:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <xTaskResumeAll+0x120>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3318      	adds	r3, #24
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f83a 	bl	80028d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3304      	adds	r3, #4
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f835 	bl	80028d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386e:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <xTaskResumeAll+0x124>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d903      	bls.n	800387e <xTaskResumeAll+0x7e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <xTaskResumeAll+0x124>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <xTaskResumeAll+0x128>)
 800388c:	441a      	add	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fe ffc0 	bl	800281a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389e:	4b23      	ldr	r3, [pc, #140]	@ (800392c <xTaskResumeAll+0x12c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80038a8:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <xTaskResumeAll+0x130>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <xTaskResumeAll+0x120>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1cb      	bne.n	800384e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038bc:	f000 fb66 	bl	8003f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <xTaskResumeAll+0x134>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038cc:	f000 f846 	bl	800395c <xTaskIncrementTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80038d6:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <xTaskResumeAll+0x130>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f1      	bne.n	80038cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <xTaskResumeAll+0x134>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <xTaskResumeAll+0x130>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <xTaskResumeAll+0x138>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800390a:	f001 f8ff 	bl	8004b0c <vPortExitCritical>

	return xAlreadyYielded;
 800390e:	68bb      	ldr	r3, [r7, #8]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000f18 	.word	0x20000f18
 800391c:	20000ef0 	.word	0x20000ef0
 8003920:	20000eb0 	.word	0x20000eb0
 8003924:	20000ef8 	.word	0x20000ef8
 8003928:	20000a20 	.word	0x20000a20
 800392c:	20000a1c 	.word	0x20000a1c
 8003930:	20000f04 	.word	0x20000f04
 8003934:	20000f00 	.word	0x20000f00
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <xTaskGetTickCount+0x1c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003948:	687b      	ldr	r3, [r7, #4]
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000ef4 	.word	0x20000ef4

0800395c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003966:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa4 <xTaskIncrementTick+0x148>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 8090 	bne.w	8003a90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003970:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa8 <xTaskIncrementTick+0x14c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003978:	4a4b      	ldr	r2, [pc, #300]	@ (8003aa8 <xTaskIncrementTick+0x14c>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d121      	bne.n	80039c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003984:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <xTaskIncrementTick+0x150>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xTaskIncrementTick+0x46>
 80039a6:	4b41      	ldr	r3, [pc, #260]	@ (8003aac <xTaskIncrementTick+0x150>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	4b40      	ldr	r3, [pc, #256]	@ (8003ab0 <xTaskIncrementTick+0x154>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3e      	ldr	r2, [pc, #248]	@ (8003aac <xTaskIncrementTick+0x150>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab0 <xTaskIncrementTick+0x154>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <xTaskIncrementTick+0x158>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab4 <xTaskIncrementTick+0x158>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	f000 fae2 	bl	8003f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <xTaskIncrementTick+0x15c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d349      	bcc.n	8003a66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <xTaskIncrementTick+0x150>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <xTaskIncrementTick+0x15c>)
 80039de:	f04f 32ff 	mov.w	r2, #4294967295
 80039e2:	601a      	str	r2, [r3, #0]
					break;
 80039e4:	e03f      	b.n	8003a66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e6:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <xTaskIncrementTick+0x150>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d203      	bcs.n	8003a06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039fe:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab8 <xTaskIncrementTick+0x15c>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a04:	e02f      	b.n	8003a66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe ff62 	bl	80028d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff59 	bl	80028d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a26:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <xTaskIncrementTick+0x160>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d903      	bls.n	8003a36 <xTaskIncrementTick+0xda>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <xTaskIncrementTick+0x160>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <xTaskIncrementTick+0x164>)
 8003a44:	441a      	add	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fee4 	bl	800281a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <xTaskIncrementTick+0x168>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3b8      	bcc.n	80039d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a64:	e7b5      	b.n	80039d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a66:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <xTaskIncrementTick+0x168>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6c:	4914      	ldr	r1, [pc, #80]	@ (8003ac0 <xTaskIncrementTick+0x164>)
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d901      	bls.n	8003a82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <xTaskIncrementTick+0x16c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e004      	b.n	8003a9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <xTaskIncrementTick+0x170>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <xTaskIncrementTick+0x170>)
 8003a98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000f18 	.word	0x20000f18
 8003aa8:	20000ef4 	.word	0x20000ef4
 8003aac:	20000ea8 	.word	0x20000ea8
 8003ab0:	20000eac 	.word	0x20000eac
 8003ab4:	20000f08 	.word	0x20000f08
 8003ab8:	20000f10 	.word	0x20000f10
 8003abc:	20000ef8 	.word	0x20000ef8
 8003ac0:	20000a20 	.word	0x20000a20
 8003ac4:	20000a1c 	.word	0x20000a1c
 8003ac8:	20000f04 	.word	0x20000f04
 8003acc:	20000f00 	.word	0x20000f00

08003ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <vTaskSwitchContext+0xb4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ade:	4b2a      	ldr	r3, [pc, #168]	@ (8003b88 <vTaskSwitchContext+0xb8>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ae4:	e047      	b.n	8003b76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ae6:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <vTaskSwitchContext+0xb8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aec:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <vTaskSwitchContext+0xbc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e011      	b.n	8003b18 <vTaskSwitchContext+0x48>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <vTaskSwitchContext+0x42>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <vTaskSwitchContext+0x3e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	491d      	ldr	r1, [pc, #116]	@ (8003b90 <vTaskSwitchContext+0xc0>)
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0e3      	beq.n	8003af4 <vTaskSwitchContext+0x24>
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <vTaskSwitchContext+0xc0>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d104      	bne.n	8003b5c <vTaskSwitchContext+0x8c>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a0c      	ldr	r2, [pc, #48]	@ (8003b94 <vTaskSwitchContext+0xc4>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <vTaskSwitchContext+0xbc>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <vTaskSwitchContext+0xc4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3354      	adds	r3, #84	@ 0x54
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <vTaskSwitchContext+0xc8>)
 8003b74:	6013      	str	r3, [r2, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000f18 	.word	0x20000f18
 8003b88:	20000f04 	.word	0x20000f04
 8003b8c:	20000ef8 	.word	0x20000ef8
 8003b90:	20000a20 	.word	0x20000a20
 8003b94:	20000a1c 	.word	0x20000a1c
 8003b98:	20000018 	.word	0x20000018

08003b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	60fb      	str	r3, [r7, #12]
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <vTaskPlaceOnEventList+0x48>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3318      	adds	r3, #24
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fe fe48 	bl	8002862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f000 fa87 	bl	80040e8 <prvAddCurrentTaskToDelayedList>
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000a1c 	.word	0x20000a1c

08003be8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	617b      	str	r3, [r7, #20]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <vTaskPlaceOnEventListRestricted+0x54>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7fe fdfd 	bl	800281a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	f000 fa5a 	bl	80040e8 <prvAddCurrentTaskToDelayedList>
	}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000a1c 	.word	0x20000a1c

08003c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60fb      	str	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3318      	adds	r3, #24
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fe2e 	bl	80028d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c78:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf0 <xTaskRemoveFromEventList+0xb0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11d      	bne.n	8003cbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fe25 	bl	80028d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <xTaskRemoveFromEventList+0xb4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d903      	bls.n	8003c9e <xTaskRemoveFromEventList+0x5e>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <xTaskRemoveFromEventList+0xb4>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4a13      	ldr	r2, [pc, #76]	@ (8003cf8 <xTaskRemoveFromEventList+0xb8>)
 8003cac:	441a      	add	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fe fdb0 	bl	800281a <vListInsertEnd>
 8003cba:	e005      	b.n	8003cc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480e      	ldr	r0, [pc, #56]	@ (8003cfc <xTaskRemoveFromEventList+0xbc>)
 8003cc4:	f7fe fda9 	bl	800281a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <xTaskRemoveFromEventList+0xc0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d905      	bls.n	8003ce2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <xTaskRemoveFromEventList+0xc4>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e001      	b.n	8003ce6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ce6:	697b      	ldr	r3, [r7, #20]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000f18 	.word	0x20000f18
 8003cf4:	20000ef8 	.word	0x20000ef8
 8003cf8:	20000a20 	.word	0x20000a20
 8003cfc:	20000eb0 	.word	0x20000eb0
 8003d00:	20000a1c 	.word	0x20000a1c
 8003d04:	20000f04 	.word	0x20000f04

08003d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <vTaskInternalSetTimeOutState+0x24>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <vTaskInternalSetTimeOutState+0x28>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	605a      	str	r2, [r3, #4]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000f08 	.word	0x20000f08
 8003d30:	20000ef4 	.word	0x20000ef4

08003d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d7a:	f000 fe95 	bl	8004aa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <xTaskCheckForTimeOut+0xc0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d102      	bne.n	8003d9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e023      	b.n	8003de6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <xTaskCheckForTimeOut+0xc4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d007      	beq.n	8003dba <xTaskCheckForTimeOut+0x86>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e015      	b.n	8003de6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d20b      	bcs.n	8003ddc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff99 	bl	8003d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e004      	b.n	8003de6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003de6:	f000 fe91 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000ef4 	.word	0x20000ef4
 8003df8:	20000f08 	.word	0x20000f08

08003dfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <vTaskMissedYield+0x14>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000f04 	.word	0x20000f04

08003e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e1c:	f000 f852 	bl	8003ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <prvIdleTask+0x28>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d9f9      	bls.n	8003e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <prvIdleTask+0x2c>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e38:	e7f0      	b.n	8003e1c <prvIdleTask+0x8>
 8003e3a:	bf00      	nop
 8003e3c:	20000a20 	.word	0x20000a20
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e00c      	b.n	8003e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <prvInitialiseTaskLists+0x60>)
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fcae 	bl	80027c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3301      	adds	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b37      	cmp	r3, #55	@ 0x37
 8003e6e:	d9ef      	bls.n	8003e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e70:	480d      	ldr	r0, [pc, #52]	@ (8003ea8 <prvInitialiseTaskLists+0x64>)
 8003e72:	f7fe fca5 	bl	80027c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e76:	480d      	ldr	r0, [pc, #52]	@ (8003eac <prvInitialiseTaskLists+0x68>)
 8003e78:	f7fe fca2 	bl	80027c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e7c:	480c      	ldr	r0, [pc, #48]	@ (8003eb0 <prvInitialiseTaskLists+0x6c>)
 8003e7e:	f7fe fc9f 	bl	80027c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e82:	480c      	ldr	r0, [pc, #48]	@ (8003eb4 <prvInitialiseTaskLists+0x70>)
 8003e84:	f7fe fc9c 	bl	80027c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e88:	480b      	ldr	r0, [pc, #44]	@ (8003eb8 <prvInitialiseTaskLists+0x74>)
 8003e8a:	f7fe fc99 	bl	80027c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <prvInitialiseTaskLists+0x78>)
 8003e90:	4a05      	ldr	r2, [pc, #20]	@ (8003ea8 <prvInitialiseTaskLists+0x64>)
 8003e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <prvInitialiseTaskLists+0x7c>)
 8003e96:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <prvInitialiseTaskLists+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000a20 	.word	0x20000a20
 8003ea8:	20000e80 	.word	0x20000e80
 8003eac:	20000e94 	.word	0x20000e94
 8003eb0:	20000eb0 	.word	0x20000eb0
 8003eb4:	20000ec4 	.word	0x20000ec4
 8003eb8:	20000edc 	.word	0x20000edc
 8003ebc:	20000ea8 	.word	0x20000ea8
 8003ec0:	20000eac 	.word	0x20000eac

08003ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eca:	e019      	b.n	8003f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ecc:	f000 fdec 	bl	8004aa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <prvCheckTasksWaitingTermination+0x50>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fcf9 	bl	80028d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <prvCheckTasksWaitingTermination+0x54>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8003f18 <prvCheckTasksWaitingTermination+0x54>)
 8003eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ef6:	f000 fe09 	bl	8004b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f810 	bl	8003f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e1      	bne.n	8003ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000ec4 	.word	0x20000ec4
 8003f18:	20000ef0 	.word	0x20000ef0
 8003f1c:	20000ed8 	.word	0x20000ed8

08003f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3354      	adds	r3, #84	@ 0x54
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fe45 	bl	8005bbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 ffa1 	bl	8004e88 <vPortFree>
				vPortFree( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 ff9e 	bl	8004e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f4c:	e019      	b.n	8003f82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d103      	bne.n	8003f60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 ff95 	bl	8004e88 <vPortFree>
	}
 8003f5e:	e010      	b.n	8003f82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d00b      	beq.n	8003f82 <prvDeleteTCB+0x62>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60fb      	str	r3, [r7, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <prvDeleteTCB+0x5e>
	}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa4:	e008      	b.n	8003fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa6:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	@ (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000ea8 	.word	0x20000ea8
 8003fc8:	20000f10 	.word	0x20000f10

08003fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <xTaskGetSchedulerState+0x34>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e008      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe0:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <xTaskGetSchedulerState+0x38>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e001      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff2:	687b      	ldr	r3, [r7, #4]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000efc 	.word	0x20000efc
 8004004:	20000f18 	.word	0x20000f18

08004008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d058      	beq.n	80040d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800401e:	4b2f      	ldr	r3, [pc, #188]	@ (80040dc <xTaskPriorityDisinherit+0xd4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d00b      	beq.n	8004040 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	60bb      	str	r3, [r7, #8]
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	429a      	cmp	r2, r3
 8004074:	d02c      	beq.n	80040d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	d128      	bne.n	80040d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	3304      	adds	r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fc26 	bl	80028d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a0:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <xTaskPriorityDisinherit+0xd8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d903      	bls.n	80040b0 <xTaskPriorityDisinherit+0xa8>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <xTaskPriorityDisinherit+0xd8>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4a09      	ldr	r2, [pc, #36]	@ (80040e4 <xTaskPriorityDisinherit+0xdc>)
 80040be:	441a      	add	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7fe fba7 	bl	800281a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040d0:	697b      	ldr	r3, [r7, #20]
	}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000a1c 	.word	0x20000a1c
 80040e0:	20000ef8 	.word	0x20000ef8
 80040e4:	20000a20 	.word	0x20000a20

080040e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040f2:	4b21      	ldr	r3, [pc, #132]	@ (8004178 <prvAddCurrentTaskToDelayedList+0x90>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040f8:	4b20      	ldr	r3, [pc, #128]	@ (800417c <prvAddCurrentTaskToDelayedList+0x94>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fbe8 	bl	80028d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d10a      	bne.n	8004122 <prvAddCurrentTaskToDelayedList+0x3a>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004112:	4b1a      	ldr	r3, [pc, #104]	@ (800417c <prvAddCurrentTaskToDelayedList+0x94>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4819      	ldr	r0, [pc, #100]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x98>)
 800411c:	f7fe fb7d 	bl	800281a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004120:	e026      	b.n	8004170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <prvAddCurrentTaskToDelayedList+0x94>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d209      	bcs.n	800414e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b0f      	ldr	r3, [pc, #60]	@ (800417c <prvAddCurrentTaskToDelayedList+0x94>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7fe fb8b 	bl	8002862 <vListInsert>
}
 800414c:	e010      	b.n	8004170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414e:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <prvAddCurrentTaskToDelayedList+0x94>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f7fe fb81 	bl	8002862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004160:	4b0a      	ldr	r3, [pc, #40]	@ (800418c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d202      	bcs.n	8004170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800416a:	4a08      	ldr	r2, [pc, #32]	@ (800418c <prvAddCurrentTaskToDelayedList+0xa4>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000ef4 	.word	0x20000ef4
 800417c:	20000a1c 	.word	0x20000a1c
 8004180:	20000edc 	.word	0x20000edc
 8004184:	20000eac 	.word	0x20000eac
 8004188:	20000ea8 	.word	0x20000ea8
 800418c:	20000f10 	.word	0x20000f10

08004190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800419a:	f000 fb13 	bl	80047c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800419e:	4b1d      	ldr	r3, [pc, #116]	@ (8004214 <xTimerCreateTimerTask+0x84>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d021      	beq.n	80041ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	f107 0108 	add.w	r1, r7, #8
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fae7 	bl	800278c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	9202      	str	r2, [sp, #8]
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	2302      	movs	r3, #2
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2300      	movs	r3, #0
 80041ce:	460a      	mov	r2, r1
 80041d0:	4911      	ldr	r1, [pc, #68]	@ (8004218 <xTimerCreateTimerTask+0x88>)
 80041d2:	4812      	ldr	r0, [pc, #72]	@ (800421c <xTimerCreateTimerTask+0x8c>)
 80041d4:	f7ff f8a2 	bl	800331c <xTaskCreateStatic>
 80041d8:	4603      	mov	r3, r0
 80041da:	4a11      	ldr	r2, [pc, #68]	@ (8004220 <xTimerCreateTimerTask+0x90>)
 80041dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <xTimerCreateTimerTask+0x90>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041e6:	2301      	movs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	613b      	str	r3, [r7, #16]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004208:	697b      	ldr	r3, [r7, #20]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000f4c 	.word	0x20000f4c
 8004218:	08007b4c 	.word	0x08007b4c
 800421c:	0800435d 	.word	0x0800435d
 8004220:	20000f50 	.word	0x20000f50

08004224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <xTimerGenericCommand+0x30>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	623b      	str	r3, [r7, #32]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <xTimerGenericCommand+0x98>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02a      	beq.n	80042b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b05      	cmp	r3, #5
 800426c:	dc18      	bgt.n	80042a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800426e:	f7ff fead 	bl	8003fcc <xTaskGetSchedulerState>
 8004272:	4603      	mov	r3, r0
 8004274:	2b02      	cmp	r3, #2
 8004276:	d109      	bne.n	800428c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <xTimerGenericCommand+0x98>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	f107 0110 	add.w	r1, r7, #16
 8004280:	2300      	movs	r3, #0
 8004282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004284:	f7fe fc5a 	bl	8002b3c <xQueueGenericSend>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24
 800428a:	e012      	b.n	80042b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <xTimerGenericCommand+0x98>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	f107 0110 	add.w	r1, r7, #16
 8004294:	2300      	movs	r3, #0
 8004296:	2200      	movs	r2, #0
 8004298:	f7fe fc50 	bl	8002b3c <xQueueGenericSend>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24
 800429e:	e008      	b.n	80042b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <xTimerGenericCommand+0x98>)
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	f107 0110 	add.w	r1, r7, #16
 80042a8:	2300      	movs	r3, #0
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	f7fe fd48 	bl	8002d40 <xQueueGenericSendFromISR>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	@ 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000f4c 	.word	0x20000f4c

080042c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ca:	4b23      	ldr	r3, [pc, #140]	@ (8004358 <prvProcessExpiredTimer+0x98>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe fafb 	bl	80028d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d023      	beq.n	8004334 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	18d1      	adds	r1, r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	6978      	ldr	r0, [r7, #20]
 80042fa:	f000 f8d5 	bl	80044a8 <prvInsertTimerInActiveList>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d020      	beq.n	8004346 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004304:	2300      	movs	r3, #0
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	2100      	movs	r1, #0
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff88 	bl	8004224 <xTimerGenericCommand>
 8004314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60fb      	str	r3, [r7, #12]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	4798      	blx	r3
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000f44 	.word	0x20000f44

0800435c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f859 	bl	8004420 <prvGetNextExpireTime>
 800436e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f805 	bl	8004384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800437a:	f000 f8d7 	bl	800452c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800437e:	bf00      	nop
 8004380:	e7f0      	b.n	8004364 <prvTimerTask+0x8>
	...

08004384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800438e:	f7ff fa29 	bl	80037e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f866 	bl	8004468 <prvSampleTimeNow>
 800439c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d130      	bne.n	8004406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <prvProcessTimerOrBlockTask+0x3c>
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d806      	bhi.n	80043c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043b2:	f7ff fa25 	bl	8003800 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff81 	bl	80042c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043be:	e024      	b.n	800440a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043c6:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <prvProcessTimerOrBlockTask+0x90>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <prvProcessTimerOrBlockTask+0x50>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <prvProcessTimerOrBlockTask+0x52>
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <prvProcessTimerOrBlockTask+0x94>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7fe ff65 	bl	80032b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043ea:	f7ff fa09 	bl	8003800 <xTaskResumeAll>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043f4:	4b09      	ldr	r3, [pc, #36]	@ (800441c <prvProcessTimerOrBlockTask+0x98>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	f3bf 8f6f 	isb	sy
}
 8004404:	e001      	b.n	800440a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004406:	f7ff f9fb 	bl	8003800 <xTaskResumeAll>
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000f48 	.word	0x20000f48
 8004418:	20000f4c 	.word	0x20000f4c
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004428:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <prvGetNextExpireTime+0x44>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <prvGetNextExpireTime+0x16>
 8004432:	2201      	movs	r2, #1
 8004434:	e000      	b.n	8004438 <prvGetNextExpireTime+0x18>
 8004436:	2200      	movs	r2, #0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004444:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <prvGetNextExpireTime+0x44>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e001      	b.n	8004454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000f44 	.word	0x20000f44

08004468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004470:	f7ff fa64 	bl	800393c <xTaskGetTickCount>
 8004474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <prvSampleTimeNow+0x3c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d205      	bcs.n	800448c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004480:	f000 f93a 	bl	80046f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e002      	b.n	8004492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <prvSampleTimeNow+0x3c>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000f54 	.word	0x20000f54

080044a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d812      	bhi.n	80044f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e01b      	b.n	800451a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <prvInsertTimerInActiveList+0x7c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7fe f9b8 	bl	8002862 <vListInsert>
 80044f2:	e012      	b.n	800451a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d206      	bcs.n	800450a <prvInsertTimerInActiveList+0x62>
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e007      	b.n	800451a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800450a:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <prvInsertTimerInActiveList+0x80>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7fe f9a4 	bl	8002862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000f48 	.word	0x20000f48
 8004528:	20000f44 	.word	0x20000f44

0800452c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08e      	sub	sp, #56	@ 0x38
 8004530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004532:	e0ce      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	da19      	bge.n	800456e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	3304      	adds	r3, #4
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	61fb      	str	r3, [r7, #28]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004564:	6850      	ldr	r0, [r2, #4]
 8004566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	4611      	mov	r1, r2
 800456c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f2c0 80ae 	blt.w	80046d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe f9a4 	bl	80028d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800458c:	463b      	mov	r3, r7
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff6a 	bl	8004468 <prvSampleTimeNow>
 8004594:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b09      	cmp	r3, #9
 800459a:	f200 8097 	bhi.w	80046cc <prvProcessReceivedCommands+0x1a0>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <prvProcessReceivedCommands+0x78>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045cd 	.word	0x080045cd
 80045b0:	08004643 	.word	0x08004643
 80045b4:	08004657 	.word	0x08004657
 80045b8:	080046a3 	.word	0x080046a3
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045cd 	.word	0x080045cd
 80045c4:	08004643 	.word	0x08004643
 80045c8:	08004657 	.word	0x08004657
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	18d1      	adds	r1, r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ec:	f7ff ff5c 	bl	80044a8 <prvInsertTimerInActiveList>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06c      	beq.n	80046d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d061      	beq.n	80046d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	441a      	add	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	2100      	movs	r1, #0
 800461c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800461e:	f7ff fe01 	bl	8004224 <xTimerGenericCommand>
 8004622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d152      	bne.n	80046d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61bb      	str	r3, [r7, #24]
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	e7fd      	b.n	800463e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004654:	e03d      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	617b      	str	r3, [r7, #20]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	18d1      	adds	r1, r2, r3
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469c:	f7ff ff04 	bl	80044a8 <prvInsertTimerInActiveList>
					break;
 80046a0:	e017      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d103      	bne.n	80046b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80046b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046b2:	f000 fbe9 	bl	8004e88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046b6:	e00c      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80046ca:	e002      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80046d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046d2:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <prvProcessReceivedCommands+0x1c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1d39      	adds	r1, r7, #4
 80046d8:	2200      	movs	r2, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fbce 	bl	8002e7c <xQueueReceive>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f af26 	bne.w	8004534 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3730      	adds	r7, #48	@ 0x30
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000f4c 	.word	0x20000f4c

080046f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046fe:	e049      	b.n	8004794 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004700:	4b2e      	ldr	r3, [pc, #184]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470a:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe f8db 	bl	80028d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02f      	beq.n	8004794 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90e      	bls.n	8004764 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f880 	bl	8002862 <vListInsert>
 8004762:	e017      	b.n	8004794 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	2100      	movs	r1, #0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fd58 	bl	8004224 <xTimerGenericCommand>
 8004774:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	603b      	str	r3, [r7, #0]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1b0      	bne.n	8004700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800479e:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047a4:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <prvSwitchTimerLists+0xc8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <prvSwitchTimerLists+0xc4>)
 80047aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047ac:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <prvSwitchTimerLists+0xc8>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6013      	str	r3, [r2, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000f44 	.word	0x20000f44
 80047c0:	20000f48 	.word	0x20000f48

080047c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047ca:	f000 f96d 	bl	8004aa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047ce:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <prvCheckForValidListAndQueue+0x60>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d120      	bne.n	8004818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047d6:	4814      	ldr	r0, [pc, #80]	@ (8004828 <prvCheckForValidListAndQueue+0x64>)
 80047d8:	f7fd fff2 	bl	80027c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047dc:	4813      	ldr	r0, [pc, #76]	@ (800482c <prvCheckForValidListAndQueue+0x68>)
 80047de:	f7fd ffef 	bl	80027c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <prvCheckForValidListAndQueue+0x6c>)
 80047e4:	4a10      	ldr	r2, [pc, #64]	@ (8004828 <prvCheckForValidListAndQueue+0x64>)
 80047e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047e8:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <prvCheckForValidListAndQueue+0x70>)
 80047ea:	4a10      	ldr	r2, [pc, #64]	@ (800482c <prvCheckForValidListAndQueue+0x68>)
 80047ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047ee:	2300      	movs	r3, #0
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <prvCheckForValidListAndQueue+0x74>)
 80047f4:	4a11      	ldr	r2, [pc, #68]	@ (800483c <prvCheckForValidListAndQueue+0x78>)
 80047f6:	2110      	movs	r1, #16
 80047f8:	200a      	movs	r0, #10
 80047fa:	f7fe f8ff 	bl	80029fc <xQueueGenericCreateStatic>
 80047fe:	4603      	mov	r3, r0
 8004800:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <prvCheckForValidListAndQueue+0x60>)
 8004802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004804:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <prvCheckForValidListAndQueue+0x60>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <prvCheckForValidListAndQueue+0x60>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	490b      	ldr	r1, [pc, #44]	@ (8004840 <prvCheckForValidListAndQueue+0x7c>)
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fd24 	bl	8003260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004818:	f000 f978 	bl	8004b0c <vPortExitCritical>
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000f4c 	.word	0x20000f4c
 8004828:	20000f1c 	.word	0x20000f1c
 800482c:	20000f30 	.word	0x20000f30
 8004830:	20000f44 	.word	0x20000f44
 8004834:	20000f48 	.word	0x20000f48
 8004838:	20000ff8 	.word	0x20000ff8
 800483c:	20000f58 	.word	0x20000f58
 8004840:	08007b54 	.word	0x08007b54

08004844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3b04      	subs	r3, #4
 8004854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800485c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b04      	subs	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b04      	subs	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004874:	4a0c      	ldr	r2, [pc, #48]	@ (80048a8 <pxPortInitialiseStack+0x64>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b14      	subs	r3, #20
 800487e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b04      	subs	r3, #4
 800488a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f06f 0202 	mvn.w	r2, #2
 8004892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3b20      	subs	r3, #32
 8004898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	080048ad 	.word	0x080048ad

080048ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048b6:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <prvTaskExitError+0x58>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d00b      	beq.n	80048d8 <prvTaskExitError+0x2c>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <prvTaskExitError+0x28>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	60bb      	str	r3, [r7, #8]
}
 80048ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048ec:	bf00      	nop
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0fc      	beq.n	80048ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000008 	.word	0x20000008
	...

08004910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004910:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <pxCurrentTCBConst2>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	6808      	ldr	r0, [r1, #0]
 8004916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	f380 8809 	msr	PSP, r0
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	4770      	bx	lr
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst2>:
 8004930:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004938:	4808      	ldr	r0, [pc, #32]	@ (800495c <prvPortStartFirstTask+0x24>)
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f380 8808 	msr	MSP, r0
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8814 	msr	CONTROL, r0
 800494a:	b662      	cpsie	i
 800494c:	b661      	cpsie	f
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	df00      	svc	0
 8004958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800495a:	bf00      	nop
 800495c:	e000ed08 	.word	0xe000ed08

08004960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004966:	4b47      	ldr	r3, [pc, #284]	@ (8004a84 <xPortStartScheduler+0x124>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a47      	ldr	r2, [pc, #284]	@ (8004a88 <xPortStartScheduler+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d10b      	bne.n	8004988 <xPortStartScheduler+0x28>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	613b      	str	r3, [r7, #16]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004988:	4b3e      	ldr	r3, [pc, #248]	@ (8004a84 <xPortStartScheduler+0x124>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a8c <xPortStartScheduler+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10b      	bne.n	80049aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049aa:	4b39      	ldr	r3, [pc, #228]	@ (8004a90 <xPortStartScheduler+0x130>)
 80049ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	22ff      	movs	r2, #255	@ 0xff
 80049ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <xPortStartScheduler+0x134>)
 80049d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049d2:	4b31      	ldr	r3, [pc, #196]	@ (8004a98 <xPortStartScheduler+0x138>)
 80049d4:	2207      	movs	r2, #7
 80049d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049d8:	e009      	b.n	80049ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80049da:	4b2f      	ldr	r3, [pc, #188]	@ (8004a98 <xPortStartScheduler+0x138>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a98 <xPortStartScheduler+0x138>)
 80049e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b80      	cmp	r3, #128	@ 0x80
 80049f8:	d0ef      	beq.n	80049da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049fa:	4b27      	ldr	r3, [pc, #156]	@ (8004a98 <xPortStartScheduler+0x138>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1c3 0307 	rsb	r3, r3, #7
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d00b      	beq.n	8004a1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	60bb      	str	r3, [r7, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	e7fd      	b.n	8004a1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a98 <xPortStartScheduler+0x138>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	4a1c      	ldr	r2, [pc, #112]	@ (8004a98 <xPortStartScheduler+0x138>)
 8004a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <xPortStartScheduler+0x138>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a30:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <xPortStartScheduler+0x138>)
 8004a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a3c:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <xPortStartScheduler+0x13c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <xPortStartScheduler+0x13c>)
 8004a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a48:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <xPortStartScheduler+0x13c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <xPortStartScheduler+0x13c>)
 8004a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a54:	f000 f8da 	bl	8004c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <xPortStartScheduler+0x140>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a5e:	f000 f8f9 	bl	8004c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <xPortStartScheduler+0x144>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa4 <xPortStartScheduler+0x144>)
 8004a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a6e:	f7ff ff63 	bl	8004938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a72:	f7ff f82d 	bl	8003ad0 <vTaskSwitchContext>
	prvTaskExitError();
 8004a76:	f7ff ff19 	bl	80048ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000ed00 	.word	0xe000ed00
 8004a88:	410fc271 	.word	0x410fc271
 8004a8c:	410fc270 	.word	0x410fc270
 8004a90:	e000e400 	.word	0xe000e400
 8004a94:	20001048 	.word	0x20001048
 8004a98:	2000104c 	.word	0x2000104c
 8004a9c:	e000ed20 	.word	0xe000ed20
 8004aa0:	20000008 	.word	0x20000008
 8004aa4:	e000ef34 	.word	0xe000ef34

08004aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	607b      	str	r3, [r7, #4]
}
 8004ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ac2:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <vPortEnterCritical+0x5c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8004b04 <vPortEnterCritical+0x5c>)
 8004aca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004acc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <vPortEnterCritical+0x5c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d110      	bne.n	8004af6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <vPortEnterCritical+0x60>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	603b      	str	r3, [r7, #0]
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	e7fd      	b.n	8004af2 <vPortEnterCritical+0x4a>
	}
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000008 	.word	0x20000008
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <vPortExitCritical+0x26>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b3c:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <vPortExitCritical+0x50>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <vPortExitCritical+0x44>
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
}
 8004b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	20000008 	.word	0x20000008

08004b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b60:	f3ef 8009 	mrs	r0, PSP
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4b15      	ldr	r3, [pc, #84]	@ (8004bc0 <pxCurrentTCBConst>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	f01e 0f10 	tst.w	lr, #16
 8004b70:	bf08      	it	eq
 8004b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	6010      	str	r0, [r2, #0]
 8004b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b84:	f380 8811 	msr	BASEPRI, r0
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f7fe ff9e 	bl	8003ad0 <vTaskSwitchContext>
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f380 8811 	msr	BASEPRI, r0
 8004b9c:	bc09      	pop	{r0, r3}
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	6808      	ldr	r0, [r1, #0]
 8004ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba6:	f01e 0f10 	tst.w	lr, #16
 8004baa:	bf08      	it	eq
 8004bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bb0:	f380 8809 	msr	PSP, r0
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst>:
 8004bc0:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004be2:	f7fe febb 	bl	800395c <xTaskIncrementTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <xPortSysTickHandler+0x40>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f383 8811 	msr	BASEPRI, r3
}
 8004bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c10:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <vPortSetupTimerInterrupt+0x34>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <vPortSetupTimerInterrupt+0x38>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <vPortSetupTimerInterrupt+0x3c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0a      	ldr	r2, [pc, #40]	@ (8004c4c <vPortSetupTimerInterrupt+0x40>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <vPortSetupTimerInterrupt+0x44>)
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c2e:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <vPortSetupTimerInterrupt+0x34>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000e010 	.word	0xe000e010
 8004c44:	e000e018 	.word	0xe000e018
 8004c48:	20000000 	.word	0x20000000
 8004c4c:	10624dd3 	.word	0x10624dd3
 8004c50:	e000e014 	.word	0xe000e014

08004c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c64 <vPortEnableVFP+0x10>
 8004c58:	6801      	ldr	r1, [r0, #0]
 8004c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c5e:	6001      	str	r1, [r0, #0]
 8004c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c62:	bf00      	nop
 8004c64:	e000ed88 	.word	0xe000ed88

08004c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c6e:	f3ef 8305 	mrs	r3, IPSR
 8004c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	d915      	bls.n	8004ca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c7a:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <vPortValidateInterruptPriority+0x74>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c84:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <vPortValidateInterruptPriority+0x78>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	7afa      	ldrb	r2, [r7, #11]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d20b      	bcs.n	8004ca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	e7fd      	b.n	8004ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <vPortValidateInterruptPriority+0x7c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <vPortValidateInterruptPriority+0x80>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d90b      	bls.n	8004cce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	603b      	str	r3, [r7, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <vPortValidateInterruptPriority+0x62>
	}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	e000e3f0 	.word	0xe000e3f0
 8004ce0:	20001048 	.word	0x20001048
 8004ce4:	e000ed0c 	.word	0xe000ed0c
 8004ce8:	2000104c 	.word	0x2000104c

08004cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	@ 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cf8:	f7fe fd74 	bl	80037e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e70 <pvPortMalloc+0x184>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d04:	f000 f924 	bl	8004f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d08:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <pvPortMalloc+0x188>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 8095 	bne.w	8004e40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01e      	beq.n	8004d5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d015      	beq.n	8004d5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f023 0307 	bic.w	r3, r3, #7
 8004d34:	3308      	adds	r3, #8
 8004d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <pvPortMalloc+0x6e>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	617b      	str	r3, [r7, #20]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d06f      	beq.n	8004e40 <pvPortMalloc+0x154>
 8004d60:	4b45      	ldr	r3, [pc, #276]	@ (8004e78 <pvPortMalloc+0x18c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d86a      	bhi.n	8004e40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d6a:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <pvPortMalloc+0x190>)
 8004d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d6e:	4b43      	ldr	r3, [pc, #268]	@ (8004e7c <pvPortMalloc+0x190>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d74:	e004      	b.n	8004d80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d903      	bls.n	8004d92 <pvPortMalloc+0xa6>
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f1      	bne.n	8004d76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <pvPortMalloc+0x184>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d051      	beq.n	8004e40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2208      	movs	r2, #8
 8004da2:	4413      	add	r3, r2
 8004da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad2      	subs	r2, r2, r3
 8004db6:	2308      	movs	r3, #8
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d920      	bls.n	8004e00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <pvPortMalloc+0xfc>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dfa:	69b8      	ldr	r0, [r7, #24]
 8004dfc:	f000 f90a 	bl	8005014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e00:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <pvPortMalloc+0x18c>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e78 <pvPortMalloc+0x18c>)
 8004e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <pvPortMalloc+0x18c>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <pvPortMalloc+0x194>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d203      	bcs.n	8004e22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e1a:	4b17      	ldr	r3, [pc, #92]	@ (8004e78 <pvPortMalloc+0x18c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <pvPortMalloc+0x194>)
 8004e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <pvPortMalloc+0x188>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e36:	4b13      	ldr	r3, [pc, #76]	@ (8004e84 <pvPortMalloc+0x198>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <pvPortMalloc+0x198>)
 8004e3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e40:	f7fe fcde 	bl	8003800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <pvPortMalloc+0x17a>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60fb      	str	r3, [r7, #12]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <pvPortMalloc+0x176>
	return pvReturn;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	@ 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20004c58 	.word	0x20004c58
 8004e74:	20004c6c 	.word	0x20004c6c
 8004e78:	20004c5c 	.word	0x20004c5c
 8004e7c:	20004c50 	.word	0x20004c50
 8004e80:	20004c60 	.word	0x20004c60
 8004e84:	20004c64 	.word	0x20004c64

08004e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04f      	beq.n	8004f3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <vPortFree+0xbc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <vPortFree+0x46>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <vPortFree+0x66>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <vPortFree+0xbc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01e      	beq.n	8004f3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11a      	bne.n	8004f3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4b0e      	ldr	r3, [pc, #56]	@ (8004f44 <vPortFree+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	401a      	ands	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f14:	f7fe fc66 	bl	80037e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <vPortFree+0xc0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	4a09      	ldr	r2, [pc, #36]	@ (8004f48 <vPortFree+0xc0>)
 8004f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f000 f874 	bl	8005014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <vPortFree+0xc4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a06      	ldr	r2, [pc, #24]	@ (8004f4c <vPortFree+0xc4>)
 8004f34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f36:	f7fe fc63 	bl	8003800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20004c6c 	.word	0x20004c6c
 8004f48:	20004c5c 	.word	0x20004c5c
 8004f4c:	20004c68 	.word	0x20004c68

08004f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f5c:	4b27      	ldr	r3, [pc, #156]	@ (8004ffc <prvHeapInit+0xac>)
 8004f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3307      	adds	r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <prvHeapInit+0xac>)
 8004f80:	4413      	add	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <prvHeapInit+0xb0>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005000 <prvHeapInit+0xb0>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <prvHeapInit+0xb4>)
 8004fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <prvHeapInit+0xb4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fba:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <prvHeapInit+0xb4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <prvHeapInit+0xb4>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <prvHeapInit+0xb8>)
 8004fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a09      	ldr	r2, [pc, #36]	@ (800500c <prvHeapInit+0xbc>)
 8004fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <prvHeapInit+0xc0>)
 8004fea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20001050 	.word	0x20001050
 8005000:	20004c50 	.word	0x20004c50
 8005004:	20004c58 	.word	0x20004c58
 8005008:	20004c60 	.word	0x20004c60
 800500c:	20004c5c 	.word	0x20004c5c
 8005010:	20004c6c 	.word	0x20004c6c

08005014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800501c:	4b28      	ldr	r3, [pc, #160]	@ (80050c0 <prvInsertBlockIntoFreeList+0xac>)
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e002      	b.n	8005028 <prvInsertBlockIntoFreeList+0x14>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d8f7      	bhi.n	8005022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4413      	add	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d108      	bne.n	8005056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	441a      	add	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d118      	bne.n	800509c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d00d      	beq.n	8005092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e008      	b.n	80050a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e003      	b.n	80050a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d002      	beq.n	80050b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20004c50 	.word	0x20004c50
 80050c4:	20004c58 	.word	0x20004c58

080050c8 <__cvt>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	ec57 6b10 	vmov	r6, r7, d0
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	460c      	mov	r4, r1
 80050d4:	4619      	mov	r1, r3
 80050d6:	463b      	mov	r3, r7
 80050d8:	bfbb      	ittet	lt
 80050da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050de:	461f      	movlt	r7, r3
 80050e0:	2300      	movge	r3, #0
 80050e2:	232d      	movlt	r3, #45	@ 0x2d
 80050e4:	700b      	strb	r3, [r1, #0]
 80050e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050ec:	4691      	mov	r9, r2
 80050ee:	f023 0820 	bic.w	r8, r3, #32
 80050f2:	bfbc      	itt	lt
 80050f4:	4632      	movlt	r2, r6
 80050f6:	4616      	movlt	r6, r2
 80050f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050fc:	d005      	beq.n	800510a <__cvt+0x42>
 80050fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005102:	d100      	bne.n	8005106 <__cvt+0x3e>
 8005104:	3401      	adds	r4, #1
 8005106:	2102      	movs	r1, #2
 8005108:	e000      	b.n	800510c <__cvt+0x44>
 800510a:	2103      	movs	r1, #3
 800510c:	ab03      	add	r3, sp, #12
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	ab02      	add	r3, sp, #8
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	ec47 6b10 	vmov	d0, r6, r7
 8005118:	4653      	mov	r3, sl
 800511a:	4622      	mov	r2, r4
 800511c:	f000 fea0 	bl	8005e60 <_dtoa_r>
 8005120:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005124:	4605      	mov	r5, r0
 8005126:	d119      	bne.n	800515c <__cvt+0x94>
 8005128:	f019 0f01 	tst.w	r9, #1
 800512c:	d00e      	beq.n	800514c <__cvt+0x84>
 800512e:	eb00 0904 	add.w	r9, r0, r4
 8005132:	2200      	movs	r2, #0
 8005134:	2300      	movs	r3, #0
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f7fb fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800513e:	b108      	cbz	r0, 8005144 <__cvt+0x7c>
 8005140:	f8cd 900c 	str.w	r9, [sp, #12]
 8005144:	2230      	movs	r2, #48	@ 0x30
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	454b      	cmp	r3, r9
 800514a:	d31e      	bcc.n	800518a <__cvt+0xc2>
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005150:	1b5b      	subs	r3, r3, r5
 8005152:	4628      	mov	r0, r5
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	b004      	add	sp, #16
 8005158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005160:	eb00 0904 	add.w	r9, r0, r4
 8005164:	d1e5      	bne.n	8005132 <__cvt+0x6a>
 8005166:	7803      	ldrb	r3, [r0, #0]
 8005168:	2b30      	cmp	r3, #48	@ 0x30
 800516a:	d10a      	bne.n	8005182 <__cvt+0xba>
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005178:	b918      	cbnz	r0, 8005182 <__cvt+0xba>
 800517a:	f1c4 0401 	rsb	r4, r4, #1
 800517e:	f8ca 4000 	str.w	r4, [sl]
 8005182:	f8da 3000 	ldr.w	r3, [sl]
 8005186:	4499      	add	r9, r3
 8005188:	e7d3      	b.n	8005132 <__cvt+0x6a>
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	9103      	str	r1, [sp, #12]
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e7d9      	b.n	8005146 <__cvt+0x7e>

08005192 <__exponent>:
 8005192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005194:	2900      	cmp	r1, #0
 8005196:	bfba      	itte	lt
 8005198:	4249      	neglt	r1, r1
 800519a:	232d      	movlt	r3, #45	@ 0x2d
 800519c:	232b      	movge	r3, #43	@ 0x2b
 800519e:	2909      	cmp	r1, #9
 80051a0:	7002      	strb	r2, [r0, #0]
 80051a2:	7043      	strb	r3, [r0, #1]
 80051a4:	dd29      	ble.n	80051fa <__exponent+0x68>
 80051a6:	f10d 0307 	add.w	r3, sp, #7
 80051aa:	461d      	mov	r5, r3
 80051ac:	270a      	movs	r7, #10
 80051ae:	461a      	mov	r2, r3
 80051b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80051b4:	fb07 1416 	mls	r4, r7, r6, r1
 80051b8:	3430      	adds	r4, #48	@ 0x30
 80051ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051be:	460c      	mov	r4, r1
 80051c0:	2c63      	cmp	r4, #99	@ 0x63
 80051c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80051c6:	4631      	mov	r1, r6
 80051c8:	dcf1      	bgt.n	80051ae <__exponent+0x1c>
 80051ca:	3130      	adds	r1, #48	@ 0x30
 80051cc:	1e94      	subs	r4, r2, #2
 80051ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051d2:	1c41      	adds	r1, r0, #1
 80051d4:	4623      	mov	r3, r4
 80051d6:	42ab      	cmp	r3, r5
 80051d8:	d30a      	bcc.n	80051f0 <__exponent+0x5e>
 80051da:	f10d 0309 	add.w	r3, sp, #9
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	42ac      	cmp	r4, r5
 80051e2:	bf88      	it	hi
 80051e4:	2300      	movhi	r3, #0
 80051e6:	3302      	adds	r3, #2
 80051e8:	4403      	add	r3, r0
 80051ea:	1a18      	subs	r0, r3, r0
 80051ec:	b003      	add	sp, #12
 80051ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051f8:	e7ed      	b.n	80051d6 <__exponent+0x44>
 80051fa:	2330      	movs	r3, #48	@ 0x30
 80051fc:	3130      	adds	r1, #48	@ 0x30
 80051fe:	7083      	strb	r3, [r0, #2]
 8005200:	70c1      	strb	r1, [r0, #3]
 8005202:	1d03      	adds	r3, r0, #4
 8005204:	e7f1      	b.n	80051ea <__exponent+0x58>
	...

08005208 <_printf_float>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	b08d      	sub	sp, #52	@ 0x34
 800520e:	460c      	mov	r4, r1
 8005210:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005214:	4616      	mov	r6, r2
 8005216:	461f      	mov	r7, r3
 8005218:	4605      	mov	r5, r0
 800521a:	f000 fcbb 	bl	8005b94 <_localeconv_r>
 800521e:	6803      	ldr	r3, [r0, #0]
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb f82c 	bl	8000280 <strlen>
 8005228:	2300      	movs	r3, #0
 800522a:	930a      	str	r3, [sp, #40]	@ 0x28
 800522c:	f8d8 3000 	ldr.w	r3, [r8]
 8005230:	9005      	str	r0, [sp, #20]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	f103 0208 	add.w	r2, r3, #8
 800523c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005240:	f8d4 b000 	ldr.w	fp, [r4]
 8005244:	f8c8 2000 	str.w	r2, [r8]
 8005248:	e9d3 8900 	ldrd	r8, r9, [r3]
 800524c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005250:	9307      	str	r3, [sp, #28]
 8005252:	f8cd 8018 	str.w	r8, [sp, #24]
 8005256:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800525a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800525e:	4b9c      	ldr	r3, [pc, #624]	@ (80054d0 <_printf_float+0x2c8>)
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	f7fb fc6a 	bl	8000b3c <__aeabi_dcmpun>
 8005268:	bb70      	cbnz	r0, 80052c8 <_printf_float+0xc0>
 800526a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800526e:	4b98      	ldr	r3, [pc, #608]	@ (80054d0 <_printf_float+0x2c8>)
 8005270:	f04f 32ff 	mov.w	r2, #4294967295
 8005274:	f7fb fc44 	bl	8000b00 <__aeabi_dcmple>
 8005278:	bb30      	cbnz	r0, 80052c8 <_printf_float+0xc0>
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f7fb fc33 	bl	8000aec <__aeabi_dcmplt>
 8005286:	b110      	cbz	r0, 800528e <_printf_float+0x86>
 8005288:	232d      	movs	r3, #45	@ 0x2d
 800528a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528e:	4a91      	ldr	r2, [pc, #580]	@ (80054d4 <_printf_float+0x2cc>)
 8005290:	4b91      	ldr	r3, [pc, #580]	@ (80054d8 <_printf_float+0x2d0>)
 8005292:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005296:	bf94      	ite	ls
 8005298:	4690      	movls	r8, r2
 800529a:	4698      	movhi	r8, r3
 800529c:	2303      	movs	r3, #3
 800529e:	6123      	str	r3, [r4, #16]
 80052a0:	f02b 0304 	bic.w	r3, fp, #4
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	f04f 0900 	mov.w	r9, #0
 80052aa:	9700      	str	r7, [sp, #0]
 80052ac:	4633      	mov	r3, r6
 80052ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80052b0:	4621      	mov	r1, r4
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f9d2 	bl	800565c <_printf_common>
 80052b8:	3001      	adds	r0, #1
 80052ba:	f040 808d 	bne.w	80053d8 <_printf_float+0x1d0>
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	b00d      	add	sp, #52	@ 0x34
 80052c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	4640      	mov	r0, r8
 80052ce:	4649      	mov	r1, r9
 80052d0:	f7fb fc34 	bl	8000b3c <__aeabi_dcmpun>
 80052d4:	b140      	cbz	r0, 80052e8 <_printf_float+0xe0>
 80052d6:	464b      	mov	r3, r9
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfbc      	itt	lt
 80052dc:	232d      	movlt	r3, #45	@ 0x2d
 80052de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052e2:	4a7e      	ldr	r2, [pc, #504]	@ (80054dc <_printf_float+0x2d4>)
 80052e4:	4b7e      	ldr	r3, [pc, #504]	@ (80054e0 <_printf_float+0x2d8>)
 80052e6:	e7d4      	b.n	8005292 <_printf_float+0x8a>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052ee:	9206      	str	r2, [sp, #24]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	d13b      	bne.n	800536c <_printf_float+0x164>
 80052f4:	2306      	movs	r3, #6
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052fc:	2300      	movs	r3, #0
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	ab0a      	add	r3, sp, #40	@ 0x28
 8005304:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005308:	ab09      	add	r3, sp, #36	@ 0x24
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6861      	ldr	r1, [r4, #4]
 800530e:	ec49 8b10 	vmov	d0, r8, r9
 8005312:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005316:	4628      	mov	r0, r5
 8005318:	f7ff fed6 	bl	80050c8 <__cvt>
 800531c:	9b06      	ldr	r3, [sp, #24]
 800531e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005320:	2b47      	cmp	r3, #71	@ 0x47
 8005322:	4680      	mov	r8, r0
 8005324:	d129      	bne.n	800537a <_printf_float+0x172>
 8005326:	1cc8      	adds	r0, r1, #3
 8005328:	db02      	blt.n	8005330 <_printf_float+0x128>
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	4299      	cmp	r1, r3
 800532e:	dd41      	ble.n	80053b4 <_printf_float+0x1ac>
 8005330:	f1aa 0a02 	sub.w	sl, sl, #2
 8005334:	fa5f fa8a 	uxtb.w	sl, sl
 8005338:	3901      	subs	r1, #1
 800533a:	4652      	mov	r2, sl
 800533c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005340:	9109      	str	r1, [sp, #36]	@ 0x24
 8005342:	f7ff ff26 	bl	8005192 <__exponent>
 8005346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005348:	1813      	adds	r3, r2, r0
 800534a:	2a01      	cmp	r2, #1
 800534c:	4681      	mov	r9, r0
 800534e:	6123      	str	r3, [r4, #16]
 8005350:	dc02      	bgt.n	8005358 <_printf_float+0x150>
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	07d2      	lsls	r2, r2, #31
 8005356:	d501      	bpl.n	800535c <_printf_float+0x154>
 8005358:	3301      	adds	r3, #1
 800535a:	6123      	str	r3, [r4, #16]
 800535c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0a2      	beq.n	80052aa <_printf_float+0xa2>
 8005364:	232d      	movs	r3, #45	@ 0x2d
 8005366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800536a:	e79e      	b.n	80052aa <_printf_float+0xa2>
 800536c:	9a06      	ldr	r2, [sp, #24]
 800536e:	2a47      	cmp	r2, #71	@ 0x47
 8005370:	d1c2      	bne.n	80052f8 <_printf_float+0xf0>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1c0      	bne.n	80052f8 <_printf_float+0xf0>
 8005376:	2301      	movs	r3, #1
 8005378:	e7bd      	b.n	80052f6 <_printf_float+0xee>
 800537a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800537e:	d9db      	bls.n	8005338 <_printf_float+0x130>
 8005380:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005384:	d118      	bne.n	80053b8 <_printf_float+0x1b0>
 8005386:	2900      	cmp	r1, #0
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	dd0b      	ble.n	80053a4 <_printf_float+0x19c>
 800538c:	6121      	str	r1, [r4, #16]
 800538e:	b913      	cbnz	r3, 8005396 <_printf_float+0x18e>
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	07d0      	lsls	r0, r2, #31
 8005394:	d502      	bpl.n	800539c <_printf_float+0x194>
 8005396:	3301      	adds	r3, #1
 8005398:	440b      	add	r3, r1
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800539e:	f04f 0900 	mov.w	r9, #0
 80053a2:	e7db      	b.n	800535c <_printf_float+0x154>
 80053a4:	b913      	cbnz	r3, 80053ac <_printf_float+0x1a4>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	07d2      	lsls	r2, r2, #31
 80053aa:	d501      	bpl.n	80053b0 <_printf_float+0x1a8>
 80053ac:	3302      	adds	r3, #2
 80053ae:	e7f4      	b.n	800539a <_printf_float+0x192>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7f2      	b.n	800539a <_printf_float+0x192>
 80053b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80053b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ba:	4299      	cmp	r1, r3
 80053bc:	db05      	blt.n	80053ca <_printf_float+0x1c2>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6121      	str	r1, [r4, #16]
 80053c2:	07d8      	lsls	r0, r3, #31
 80053c4:	d5ea      	bpl.n	800539c <_printf_float+0x194>
 80053c6:	1c4b      	adds	r3, r1, #1
 80053c8:	e7e7      	b.n	800539a <_printf_float+0x192>
 80053ca:	2900      	cmp	r1, #0
 80053cc:	bfd4      	ite	le
 80053ce:	f1c1 0202 	rsble	r2, r1, #2
 80053d2:	2201      	movgt	r2, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	e7e0      	b.n	800539a <_printf_float+0x192>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	055a      	lsls	r2, r3, #21
 80053dc:	d407      	bmi.n	80053ee <_printf_float+0x1e6>
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	4642      	mov	r2, r8
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	d12b      	bne.n	8005444 <_printf_float+0x23c>
 80053ec:	e767      	b.n	80052be <_printf_float+0xb6>
 80053ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053f2:	f240 80dd 	bls.w	80055b0 <_printf_float+0x3a8>
 80053f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053fa:	2200      	movs	r2, #0
 80053fc:	2300      	movs	r3, #0
 80053fe:	f7fb fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005402:	2800      	cmp	r0, #0
 8005404:	d033      	beq.n	800546e <_printf_float+0x266>
 8005406:	4a37      	ldr	r2, [pc, #220]	@ (80054e4 <_printf_float+0x2dc>)
 8005408:	2301      	movs	r3, #1
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f af54 	beq.w	80052be <_printf_float+0xb6>
 8005416:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800541a:	4543      	cmp	r3, r8
 800541c:	db02      	blt.n	8005424 <_printf_float+0x21c>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	07d8      	lsls	r0, r3, #31
 8005422:	d50f      	bpl.n	8005444 <_printf_float+0x23c>
 8005424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f af45 	beq.w	80052be <_printf_float+0xb6>
 8005434:	f04f 0900 	mov.w	r9, #0
 8005438:	f108 38ff 	add.w	r8, r8, #4294967295
 800543c:	f104 0a1a 	add.w	sl, r4, #26
 8005440:	45c8      	cmp	r8, r9
 8005442:	dc09      	bgt.n	8005458 <_printf_float+0x250>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	079b      	lsls	r3, r3, #30
 8005448:	f100 8103 	bmi.w	8005652 <_printf_float+0x44a>
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005450:	4298      	cmp	r0, r3
 8005452:	bfb8      	it	lt
 8005454:	4618      	movlt	r0, r3
 8005456:	e734      	b.n	80052c2 <_printf_float+0xba>
 8005458:	2301      	movs	r3, #1
 800545a:	4652      	mov	r2, sl
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f af2b 	beq.w	80052be <_printf_float+0xb6>
 8005468:	f109 0901 	add.w	r9, r9, #1
 800546c:	e7e8      	b.n	8005440 <_printf_float+0x238>
 800546e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc39      	bgt.n	80054e8 <_printf_float+0x2e0>
 8005474:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <_printf_float+0x2dc>)
 8005476:	2301      	movs	r3, #1
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af1d 	beq.w	80052be <_printf_float+0xb6>
 8005484:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005488:	ea59 0303 	orrs.w	r3, r9, r3
 800548c:	d102      	bne.n	8005494 <_printf_float+0x28c>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	07d9      	lsls	r1, r3, #31
 8005492:	d5d7      	bpl.n	8005444 <_printf_float+0x23c>
 8005494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af0d 	beq.w	80052be <_printf_float+0xb6>
 80054a4:	f04f 0a00 	mov.w	sl, #0
 80054a8:	f104 0b1a 	add.w	fp, r4, #26
 80054ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ae:	425b      	negs	r3, r3
 80054b0:	4553      	cmp	r3, sl
 80054b2:	dc01      	bgt.n	80054b8 <_printf_float+0x2b0>
 80054b4:	464b      	mov	r3, r9
 80054b6:	e793      	b.n	80053e0 <_printf_float+0x1d8>
 80054b8:	2301      	movs	r3, #1
 80054ba:	465a      	mov	r2, fp
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	f43f aefb 	beq.w	80052be <_printf_float+0xb6>
 80054c8:	f10a 0a01 	add.w	sl, sl, #1
 80054cc:	e7ee      	b.n	80054ac <_printf_float+0x2a4>
 80054ce:	bf00      	nop
 80054d0:	7fefffff 	.word	0x7fefffff
 80054d4:	08007b88 	.word	0x08007b88
 80054d8:	08007b8c 	.word	0x08007b8c
 80054dc:	08007b90 	.word	0x08007b90
 80054e0:	08007b94 	.word	0x08007b94
 80054e4:	08007b98 	.word	0x08007b98
 80054e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054ee:	4553      	cmp	r3, sl
 80054f0:	bfa8      	it	ge
 80054f2:	4653      	movge	r3, sl
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	4699      	mov	r9, r3
 80054f8:	dc36      	bgt.n	8005568 <_printf_float+0x360>
 80054fa:	f04f 0b00 	mov.w	fp, #0
 80054fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005502:	f104 021a 	add.w	r2, r4, #26
 8005506:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005508:	9306      	str	r3, [sp, #24]
 800550a:	eba3 0309 	sub.w	r3, r3, r9
 800550e:	455b      	cmp	r3, fp
 8005510:	dc31      	bgt.n	8005576 <_printf_float+0x36e>
 8005512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005514:	459a      	cmp	sl, r3
 8005516:	dc3a      	bgt.n	800558e <_printf_float+0x386>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	07da      	lsls	r2, r3, #31
 800551c:	d437      	bmi.n	800558e <_printf_float+0x386>
 800551e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005520:	ebaa 0903 	sub.w	r9, sl, r3
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	ebaa 0303 	sub.w	r3, sl, r3
 800552a:	4599      	cmp	r9, r3
 800552c:	bfa8      	it	ge
 800552e:	4699      	movge	r9, r3
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	dc33      	bgt.n	800559e <_printf_float+0x396>
 8005536:	f04f 0800 	mov.w	r8, #0
 800553a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800553e:	f104 0b1a 	add.w	fp, r4, #26
 8005542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005544:	ebaa 0303 	sub.w	r3, sl, r3
 8005548:	eba3 0309 	sub.w	r3, r3, r9
 800554c:	4543      	cmp	r3, r8
 800554e:	f77f af79 	ble.w	8005444 <_printf_float+0x23c>
 8005552:	2301      	movs	r3, #1
 8005554:	465a      	mov	r2, fp
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f aeae 	beq.w	80052be <_printf_float+0xb6>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	e7ec      	b.n	8005542 <_printf_float+0x33a>
 8005568:	4642      	mov	r2, r8
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	d1c2      	bne.n	80054fa <_printf_float+0x2f2>
 8005574:	e6a3      	b.n	80052be <_printf_float+0xb6>
 8005576:	2301      	movs	r3, #1
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	9206      	str	r2, [sp, #24]
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f ae9c 	beq.w	80052be <_printf_float+0xb6>
 8005586:	9a06      	ldr	r2, [sp, #24]
 8005588:	f10b 0b01 	add.w	fp, fp, #1
 800558c:	e7bb      	b.n	8005506 <_printf_float+0x2fe>
 800558e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	d1c0      	bne.n	800551e <_printf_float+0x316>
 800559c:	e68f      	b.n	80052be <_printf_float+0xb6>
 800559e:	9a06      	ldr	r2, [sp, #24]
 80055a0:	464b      	mov	r3, r9
 80055a2:	4442      	add	r2, r8
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d1c3      	bne.n	8005536 <_printf_float+0x32e>
 80055ae:	e686      	b.n	80052be <_printf_float+0xb6>
 80055b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055b4:	f1ba 0f01 	cmp.w	sl, #1
 80055b8:	dc01      	bgt.n	80055be <_printf_float+0x3b6>
 80055ba:	07db      	lsls	r3, r3, #31
 80055bc:	d536      	bpl.n	800562c <_printf_float+0x424>
 80055be:	2301      	movs	r3, #1
 80055c0:	4642      	mov	r2, r8
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae78 	beq.w	80052be <_printf_float+0xb6>
 80055ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f ae70 	beq.w	80052be <_printf_float+0xb6>
 80055de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ea:	f7fb fa75 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ee:	b9c0      	cbnz	r0, 8005622 <_printf_float+0x41a>
 80055f0:	4653      	mov	r3, sl
 80055f2:	f108 0201 	add.w	r2, r8, #1
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	d10c      	bne.n	800561a <_printf_float+0x412>
 8005600:	e65d      	b.n	80052be <_printf_float+0xb6>
 8005602:	2301      	movs	r3, #1
 8005604:	465a      	mov	r2, fp
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	f43f ae56 	beq.w	80052be <_printf_float+0xb6>
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	45d0      	cmp	r8, sl
 8005618:	dbf3      	blt.n	8005602 <_printf_float+0x3fa>
 800561a:	464b      	mov	r3, r9
 800561c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005620:	e6df      	b.n	80053e2 <_printf_float+0x1da>
 8005622:	f04f 0800 	mov.w	r8, #0
 8005626:	f104 0b1a 	add.w	fp, r4, #26
 800562a:	e7f4      	b.n	8005616 <_printf_float+0x40e>
 800562c:	2301      	movs	r3, #1
 800562e:	4642      	mov	r2, r8
 8005630:	e7e1      	b.n	80055f6 <_printf_float+0x3ee>
 8005632:	2301      	movs	r3, #1
 8005634:	464a      	mov	r2, r9
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f ae3e 	beq.w	80052be <_printf_float+0xb6>
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	4543      	cmp	r3, r8
 800564e:	dcf0      	bgt.n	8005632 <_printf_float+0x42a>
 8005650:	e6fc      	b.n	800544c <_printf_float+0x244>
 8005652:	f04f 0800 	mov.w	r8, #0
 8005656:	f104 0919 	add.w	r9, r4, #25
 800565a:	e7f4      	b.n	8005646 <_printf_float+0x43e>

0800565c <_printf_common>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	4616      	mov	r6, r2
 8005662:	4698      	mov	r8, r3
 8005664:	688a      	ldr	r2, [r1, #8]
 8005666:	690b      	ldr	r3, [r1, #16]
 8005668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800566c:	4293      	cmp	r3, r2
 800566e:	bfb8      	it	lt
 8005670:	4613      	movlt	r3, r2
 8005672:	6033      	str	r3, [r6, #0]
 8005674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005678:	4607      	mov	r7, r0
 800567a:	460c      	mov	r4, r1
 800567c:	b10a      	cbz	r2, 8005682 <_printf_common+0x26>
 800567e:	3301      	adds	r3, #1
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	0699      	lsls	r1, r3, #26
 8005686:	bf42      	ittt	mi
 8005688:	6833      	ldrmi	r3, [r6, #0]
 800568a:	3302      	addmi	r3, #2
 800568c:	6033      	strmi	r3, [r6, #0]
 800568e:	6825      	ldr	r5, [r4, #0]
 8005690:	f015 0506 	ands.w	r5, r5, #6
 8005694:	d106      	bne.n	80056a4 <_printf_common+0x48>
 8005696:	f104 0a19 	add.w	sl, r4, #25
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	6832      	ldr	r2, [r6, #0]
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	42ab      	cmp	r3, r5
 80056a2:	dc26      	bgt.n	80056f2 <_printf_common+0x96>
 80056a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	3b00      	subs	r3, #0
 80056ac:	bf18      	it	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	0692      	lsls	r2, r2, #26
 80056b2:	d42b      	bmi.n	800570c <_printf_common+0xb0>
 80056b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056b8:	4641      	mov	r1, r8
 80056ba:	4638      	mov	r0, r7
 80056bc:	47c8      	blx	r9
 80056be:	3001      	adds	r0, #1
 80056c0:	d01e      	beq.n	8005700 <_printf_common+0xa4>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	6922      	ldr	r2, [r4, #16]
 80056c6:	f003 0306 	and.w	r3, r3, #6
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	bf02      	ittt	eq
 80056ce:	68e5      	ldreq	r5, [r4, #12]
 80056d0:	6833      	ldreq	r3, [r6, #0]
 80056d2:	1aed      	subeq	r5, r5, r3
 80056d4:	68a3      	ldr	r3, [r4, #8]
 80056d6:	bf0c      	ite	eq
 80056d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056dc:	2500      	movne	r5, #0
 80056de:	4293      	cmp	r3, r2
 80056e0:	bfc4      	itt	gt
 80056e2:	1a9b      	subgt	r3, r3, r2
 80056e4:	18ed      	addgt	r5, r5, r3
 80056e6:	2600      	movs	r6, #0
 80056e8:	341a      	adds	r4, #26
 80056ea:	42b5      	cmp	r5, r6
 80056ec:	d11a      	bne.n	8005724 <_printf_common+0xc8>
 80056ee:	2000      	movs	r0, #0
 80056f0:	e008      	b.n	8005704 <_printf_common+0xa8>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4652      	mov	r2, sl
 80056f6:	4641      	mov	r1, r8
 80056f8:	4638      	mov	r0, r7
 80056fa:	47c8      	blx	r9
 80056fc:	3001      	adds	r0, #1
 80056fe:	d103      	bne.n	8005708 <_printf_common+0xac>
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005708:	3501      	adds	r5, #1
 800570a:	e7c6      	b.n	800569a <_printf_common+0x3e>
 800570c:	18e1      	adds	r1, r4, r3
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	2030      	movs	r0, #48	@ 0x30
 8005712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005716:	4422      	add	r2, r4
 8005718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800571c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005720:	3302      	adds	r3, #2
 8005722:	e7c7      	b.n	80056b4 <_printf_common+0x58>
 8005724:	2301      	movs	r3, #1
 8005726:	4622      	mov	r2, r4
 8005728:	4641      	mov	r1, r8
 800572a:	4638      	mov	r0, r7
 800572c:	47c8      	blx	r9
 800572e:	3001      	adds	r0, #1
 8005730:	d0e6      	beq.n	8005700 <_printf_common+0xa4>
 8005732:	3601      	adds	r6, #1
 8005734:	e7d9      	b.n	80056ea <_printf_common+0x8e>
	...

08005738 <_printf_i>:
 8005738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800573c:	7e0f      	ldrb	r7, [r1, #24]
 800573e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005740:	2f78      	cmp	r7, #120	@ 0x78
 8005742:	4691      	mov	r9, r2
 8005744:	4680      	mov	r8, r0
 8005746:	460c      	mov	r4, r1
 8005748:	469a      	mov	sl, r3
 800574a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800574e:	d807      	bhi.n	8005760 <_printf_i+0x28>
 8005750:	2f62      	cmp	r7, #98	@ 0x62
 8005752:	d80a      	bhi.n	800576a <_printf_i+0x32>
 8005754:	2f00      	cmp	r7, #0
 8005756:	f000 80d2 	beq.w	80058fe <_printf_i+0x1c6>
 800575a:	2f58      	cmp	r7, #88	@ 0x58
 800575c:	f000 80b9 	beq.w	80058d2 <_printf_i+0x19a>
 8005760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005768:	e03a      	b.n	80057e0 <_printf_i+0xa8>
 800576a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800576e:	2b15      	cmp	r3, #21
 8005770:	d8f6      	bhi.n	8005760 <_printf_i+0x28>
 8005772:	a101      	add	r1, pc, #4	@ (adr r1, 8005778 <_printf_i+0x40>)
 8005774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005778:	080057d1 	.word	0x080057d1
 800577c:	080057e5 	.word	0x080057e5
 8005780:	08005761 	.word	0x08005761
 8005784:	08005761 	.word	0x08005761
 8005788:	08005761 	.word	0x08005761
 800578c:	08005761 	.word	0x08005761
 8005790:	080057e5 	.word	0x080057e5
 8005794:	08005761 	.word	0x08005761
 8005798:	08005761 	.word	0x08005761
 800579c:	08005761 	.word	0x08005761
 80057a0:	08005761 	.word	0x08005761
 80057a4:	080058e5 	.word	0x080058e5
 80057a8:	0800580f 	.word	0x0800580f
 80057ac:	0800589f 	.word	0x0800589f
 80057b0:	08005761 	.word	0x08005761
 80057b4:	08005761 	.word	0x08005761
 80057b8:	08005907 	.word	0x08005907
 80057bc:	08005761 	.word	0x08005761
 80057c0:	0800580f 	.word	0x0800580f
 80057c4:	08005761 	.word	0x08005761
 80057c8:	08005761 	.word	0x08005761
 80057cc:	080058a7 	.word	0x080058a7
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6032      	str	r2, [r6, #0]
 80057d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057e0:	2301      	movs	r3, #1
 80057e2:	e09d      	b.n	8005920 <_printf_i+0x1e8>
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	6031      	str	r1, [r6, #0]
 80057ec:	0606      	lsls	r6, r0, #24
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0xbc>
 80057f0:	681d      	ldr	r5, [r3, #0]
 80057f2:	e003      	b.n	80057fc <_printf_i+0xc4>
 80057f4:	0645      	lsls	r5, r0, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0xb8>
 80057f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	da03      	bge.n	8005808 <_printf_i+0xd0>
 8005800:	232d      	movs	r3, #45	@ 0x2d
 8005802:	426d      	negs	r5, r5
 8005804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005808:	4859      	ldr	r0, [pc, #356]	@ (8005970 <_printf_i+0x238>)
 800580a:	230a      	movs	r3, #10
 800580c:	e011      	b.n	8005832 <_printf_i+0xfa>
 800580e:	6821      	ldr	r1, [r4, #0]
 8005810:	6833      	ldr	r3, [r6, #0]
 8005812:	0608      	lsls	r0, r1, #24
 8005814:	f853 5b04 	ldr.w	r5, [r3], #4
 8005818:	d402      	bmi.n	8005820 <_printf_i+0xe8>
 800581a:	0649      	lsls	r1, r1, #25
 800581c:	bf48      	it	mi
 800581e:	b2ad      	uxthmi	r5, r5
 8005820:	2f6f      	cmp	r7, #111	@ 0x6f
 8005822:	4853      	ldr	r0, [pc, #332]	@ (8005970 <_printf_i+0x238>)
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	bf14      	ite	ne
 8005828:	230a      	movne	r3, #10
 800582a:	2308      	moveq	r3, #8
 800582c:	2100      	movs	r1, #0
 800582e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005832:	6866      	ldr	r6, [r4, #4]
 8005834:	60a6      	str	r6, [r4, #8]
 8005836:	2e00      	cmp	r6, #0
 8005838:	bfa2      	ittt	ge
 800583a:	6821      	ldrge	r1, [r4, #0]
 800583c:	f021 0104 	bicge.w	r1, r1, #4
 8005840:	6021      	strge	r1, [r4, #0]
 8005842:	b90d      	cbnz	r5, 8005848 <_printf_i+0x110>
 8005844:	2e00      	cmp	r6, #0
 8005846:	d04b      	beq.n	80058e0 <_printf_i+0x1a8>
 8005848:	4616      	mov	r6, r2
 800584a:	fbb5 f1f3 	udiv	r1, r5, r3
 800584e:	fb03 5711 	mls	r7, r3, r1, r5
 8005852:	5dc7      	ldrb	r7, [r0, r7]
 8005854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005858:	462f      	mov	r7, r5
 800585a:	42bb      	cmp	r3, r7
 800585c:	460d      	mov	r5, r1
 800585e:	d9f4      	bls.n	800584a <_printf_i+0x112>
 8005860:	2b08      	cmp	r3, #8
 8005862:	d10b      	bne.n	800587c <_printf_i+0x144>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07df      	lsls	r7, r3, #31
 8005868:	d508      	bpl.n	800587c <_printf_i+0x144>
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	6861      	ldr	r1, [r4, #4]
 800586e:	4299      	cmp	r1, r3
 8005870:	bfde      	ittt	le
 8005872:	2330      	movle	r3, #48	@ 0x30
 8005874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800587c:	1b92      	subs	r2, r2, r6
 800587e:	6122      	str	r2, [r4, #16]
 8005880:	f8cd a000 	str.w	sl, [sp]
 8005884:	464b      	mov	r3, r9
 8005886:	aa03      	add	r2, sp, #12
 8005888:	4621      	mov	r1, r4
 800588a:	4640      	mov	r0, r8
 800588c:	f7ff fee6 	bl	800565c <_printf_common>
 8005890:	3001      	adds	r0, #1
 8005892:	d14a      	bne.n	800592a <_printf_i+0x1f2>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	b004      	add	sp, #16
 800589a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	f043 0320 	orr.w	r3, r3, #32
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	4833      	ldr	r0, [pc, #204]	@ (8005974 <_printf_i+0x23c>)
 80058a8:	2778      	movs	r7, #120	@ 0x78
 80058aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	6831      	ldr	r1, [r6, #0]
 80058b2:	061f      	lsls	r7, r3, #24
 80058b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80058b8:	d402      	bmi.n	80058c0 <_printf_i+0x188>
 80058ba:	065f      	lsls	r7, r3, #25
 80058bc:	bf48      	it	mi
 80058be:	b2ad      	uxthmi	r5, r5
 80058c0:	6031      	str	r1, [r6, #0]
 80058c2:	07d9      	lsls	r1, r3, #31
 80058c4:	bf44      	itt	mi
 80058c6:	f043 0320 	orrmi.w	r3, r3, #32
 80058ca:	6023      	strmi	r3, [r4, #0]
 80058cc:	b11d      	cbz	r5, 80058d6 <_printf_i+0x19e>
 80058ce:	2310      	movs	r3, #16
 80058d0:	e7ac      	b.n	800582c <_printf_i+0xf4>
 80058d2:	4827      	ldr	r0, [pc, #156]	@ (8005970 <_printf_i+0x238>)
 80058d4:	e7e9      	b.n	80058aa <_printf_i+0x172>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f023 0320 	bic.w	r3, r3, #32
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	e7f6      	b.n	80058ce <_printf_i+0x196>
 80058e0:	4616      	mov	r6, r2
 80058e2:	e7bd      	b.n	8005860 <_printf_i+0x128>
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	6961      	ldr	r1, [r4, #20]
 80058ea:	1d18      	adds	r0, r3, #4
 80058ec:	6030      	str	r0, [r6, #0]
 80058ee:	062e      	lsls	r6, r5, #24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0x1c0>
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0x1c6>
 80058f8:	0668      	lsls	r0, r5, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0x1bc>
 80058fc:	8019      	strh	r1, [r3, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	4616      	mov	r6, r2
 8005904:	e7bc      	b.n	8005880 <_printf_i+0x148>
 8005906:	6833      	ldr	r3, [r6, #0]
 8005908:	1d1a      	adds	r2, r3, #4
 800590a:	6032      	str	r2, [r6, #0]
 800590c:	681e      	ldr	r6, [r3, #0]
 800590e:	6862      	ldr	r2, [r4, #4]
 8005910:	2100      	movs	r1, #0
 8005912:	4630      	mov	r0, r6
 8005914:	f7fa fc64 	bl	80001e0 <memchr>
 8005918:	b108      	cbz	r0, 800591e <_printf_i+0x1e6>
 800591a:	1b80      	subs	r0, r0, r6
 800591c:	6060      	str	r0, [r4, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	2300      	movs	r3, #0
 8005924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005928:	e7aa      	b.n	8005880 <_printf_i+0x148>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	4632      	mov	r2, r6
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d0ad      	beq.n	8005894 <_printf_i+0x15c>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	079b      	lsls	r3, r3, #30
 800593c:	d413      	bmi.n	8005966 <_printf_i+0x22e>
 800593e:	68e0      	ldr	r0, [r4, #12]
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	4298      	cmp	r0, r3
 8005944:	bfb8      	it	lt
 8005946:	4618      	movlt	r0, r3
 8005948:	e7a6      	b.n	8005898 <_printf_i+0x160>
 800594a:	2301      	movs	r3, #1
 800594c:	4632      	mov	r2, r6
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	47d0      	blx	sl
 8005954:	3001      	adds	r0, #1
 8005956:	d09d      	beq.n	8005894 <_printf_i+0x15c>
 8005958:	3501      	adds	r5, #1
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	9903      	ldr	r1, [sp, #12]
 800595e:	1a5b      	subs	r3, r3, r1
 8005960:	42ab      	cmp	r3, r5
 8005962:	dcf2      	bgt.n	800594a <_printf_i+0x212>
 8005964:	e7eb      	b.n	800593e <_printf_i+0x206>
 8005966:	2500      	movs	r5, #0
 8005968:	f104 0619 	add.w	r6, r4, #25
 800596c:	e7f5      	b.n	800595a <_printf_i+0x222>
 800596e:	bf00      	nop
 8005970:	08007b9a 	.word	0x08007b9a
 8005974:	08007bab 	.word	0x08007bab

08005978 <std>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	e9c0 3300 	strd	r3, r3, [r0]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6083      	str	r3, [r0, #8]
 8005988:	8181      	strh	r1, [r0, #12]
 800598a:	6643      	str	r3, [r0, #100]	@ 0x64
 800598c:	81c2      	strh	r2, [r0, #14]
 800598e:	6183      	str	r3, [r0, #24]
 8005990:	4619      	mov	r1, r3
 8005992:	2208      	movs	r2, #8
 8005994:	305c      	adds	r0, #92	@ 0x5c
 8005996:	f000 f8f4 	bl	8005b82 <memset>
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x58>)
 800599c:	6263      	str	r3, [r4, #36]	@ 0x24
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x5c>)
 80059a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <std+0x60>)
 80059a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x64>)
 80059a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x68>)
 80059ac:	6224      	str	r4, [r4, #32]
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d006      	beq.n	80059c0 <std+0x48>
 80059b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059b6:	4294      	cmp	r4, r2
 80059b8:	d002      	beq.n	80059c0 <std+0x48>
 80059ba:	33d0      	adds	r3, #208	@ 0xd0
 80059bc:	429c      	cmp	r4, r3
 80059be:	d105      	bne.n	80059cc <std+0x54>
 80059c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c8:	f000 b9ae 	b.w	8005d28 <__retarget_lock_init_recursive>
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	08005afd 	.word	0x08005afd
 80059d4:	08005b1f 	.word	0x08005b1f
 80059d8:	08005b57 	.word	0x08005b57
 80059dc:	08005b7b 	.word	0x08005b7b
 80059e0:	20004c70 	.word	0x20004c70

080059e4 <stdio_exit_handler>:
 80059e4:	4a02      	ldr	r2, [pc, #8]	@ (80059f0 <stdio_exit_handler+0xc>)
 80059e6:	4903      	ldr	r1, [pc, #12]	@ (80059f4 <stdio_exit_handler+0x10>)
 80059e8:	4803      	ldr	r0, [pc, #12]	@ (80059f8 <stdio_exit_handler+0x14>)
 80059ea:	f000 b869 	b.w	8005ac0 <_fwalk_sglue>
 80059ee:	bf00      	nop
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	080073f5 	.word	0x080073f5
 80059f8:	2000001c 	.word	0x2000001c

080059fc <cleanup_stdio>:
 80059fc:	6841      	ldr	r1, [r0, #4]
 80059fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <cleanup_stdio+0x34>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	b510      	push	{r4, lr}
 8005a04:	4604      	mov	r4, r0
 8005a06:	d001      	beq.n	8005a0c <cleanup_stdio+0x10>
 8005a08:	f001 fcf4 	bl	80073f4 <_fflush_r>
 8005a0c:	68a1      	ldr	r1, [r4, #8]
 8005a0e:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <cleanup_stdio+0x38>)
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <cleanup_stdio+0x1e>
 8005a14:	4620      	mov	r0, r4
 8005a16:	f001 fced 	bl	80073f4 <_fflush_r>
 8005a1a:	68e1      	ldr	r1, [r4, #12]
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <cleanup_stdio+0x3c>)
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	d004      	beq.n	8005a2c <cleanup_stdio+0x30>
 8005a22:	4620      	mov	r0, r4
 8005a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a28:	f001 bce4 	b.w	80073f4 <_fflush_r>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	20004c70 	.word	0x20004c70
 8005a34:	20004cd8 	.word	0x20004cd8
 8005a38:	20004d40 	.word	0x20004d40

08005a3c <global_stdio_init.part.0>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <global_stdio_init.part.0+0x30>)
 8005a40:	4c0b      	ldr	r4, [pc, #44]	@ (8005a70 <global_stdio_init.part.0+0x34>)
 8005a42:	4a0c      	ldr	r2, [pc, #48]	@ (8005a74 <global_stdio_init.part.0+0x38>)
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	4620      	mov	r0, r4
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	f7ff ff94 	bl	8005978 <std>
 8005a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a54:	2201      	movs	r2, #1
 8005a56:	2109      	movs	r1, #9
 8005a58:	f7ff ff8e 	bl	8005978 <std>
 8005a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a60:	2202      	movs	r2, #2
 8005a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a66:	2112      	movs	r1, #18
 8005a68:	f7ff bf86 	b.w	8005978 <std>
 8005a6c:	20004da8 	.word	0x20004da8
 8005a70:	20004c70 	.word	0x20004c70
 8005a74:	080059e5 	.word	0x080059e5

08005a78 <__sfp_lock_acquire>:
 8005a78:	4801      	ldr	r0, [pc, #4]	@ (8005a80 <__sfp_lock_acquire+0x8>)
 8005a7a:	f000 b956 	b.w	8005d2a <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20004db1 	.word	0x20004db1

08005a84 <__sfp_lock_release>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__sfp_lock_release+0x8>)
 8005a86:	f000 b951 	b.w	8005d2c <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20004db1 	.word	0x20004db1

08005a90 <__sinit>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	f7ff fff0 	bl	8005a78 <__sfp_lock_acquire>
 8005a98:	6a23      	ldr	r3, [r4, #32]
 8005a9a:	b11b      	cbz	r3, 8005aa4 <__sinit+0x14>
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f7ff bff0 	b.w	8005a84 <__sfp_lock_release>
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <__sinit+0x28>)
 8005aa6:	6223      	str	r3, [r4, #32]
 8005aa8:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <__sinit+0x2c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f5      	bne.n	8005a9c <__sinit+0xc>
 8005ab0:	f7ff ffc4 	bl	8005a3c <global_stdio_init.part.0>
 8005ab4:	e7f2      	b.n	8005a9c <__sinit+0xc>
 8005ab6:	bf00      	nop
 8005ab8:	080059fd 	.word	0x080059fd
 8005abc:	20004da8 	.word	0x20004da8

08005ac0 <_fwalk_sglue>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	4688      	mov	r8, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	2600      	movs	r6, #0
 8005acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ad4:	d505      	bpl.n	8005ae2 <_fwalk_sglue+0x22>
 8005ad6:	6824      	ldr	r4, [r4, #0]
 8005ad8:	2c00      	cmp	r4, #0
 8005ada:	d1f7      	bne.n	8005acc <_fwalk_sglue+0xc>
 8005adc:	4630      	mov	r0, r6
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	89ab      	ldrh	r3, [r5, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d907      	bls.n	8005af8 <_fwalk_sglue+0x38>
 8005ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d003      	beq.n	8005af8 <_fwalk_sglue+0x38>
 8005af0:	4629      	mov	r1, r5
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	4306      	orrs	r6, r0
 8005af8:	3568      	adds	r5, #104	@ 0x68
 8005afa:	e7e9      	b.n	8005ad0 <_fwalk_sglue+0x10>

08005afc <__sread>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	460c      	mov	r4, r1
 8005b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b04:	f000 f8c2 	bl	8005c8c <_read_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	bfab      	itete	ge
 8005b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b10:	181b      	addge	r3, r3, r0
 8005b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b16:	bfac      	ite	ge
 8005b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b1a:	81a3      	strhlt	r3, [r4, #12]
 8005b1c:	bd10      	pop	{r4, pc}

08005b1e <__swrite>:
 8005b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b22:	461f      	mov	r7, r3
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	05db      	lsls	r3, r3, #23
 8005b28:	4605      	mov	r5, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	d505      	bpl.n	8005b3c <__swrite+0x1e>
 8005b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b34:	2302      	movs	r3, #2
 8005b36:	2200      	movs	r2, #0
 8005b38:	f000 f896 	bl	8005c68 <_lseek_r>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	f000 b8ad 	b.w	8005cb0 <_write_r>

08005b56 <__sseek>:
 8005b56:	b510      	push	{r4, lr}
 8005b58:	460c      	mov	r4, r1
 8005b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5e:	f000 f883 	bl	8005c68 <_lseek_r>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	bf15      	itete	ne
 8005b68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b72:	81a3      	strheq	r3, [r4, #12]
 8005b74:	bf18      	it	ne
 8005b76:	81a3      	strhne	r3, [r4, #12]
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <__sclose>:
 8005b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7e:	f000 b80d 	b.w	8005b9c <_close_r>

08005b82 <memset>:
 8005b82:	4402      	add	r2, r0
 8005b84:	4603      	mov	r3, r0
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d100      	bne.n	8005b8c <memset+0xa>
 8005b8a:	4770      	bx	lr
 8005b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b90:	e7f9      	b.n	8005b86 <memset+0x4>
	...

08005b94 <_localeconv_r>:
 8005b94:	4800      	ldr	r0, [pc, #0]	@ (8005b98 <_localeconv_r+0x4>)
 8005b96:	4770      	bx	lr
 8005b98:	20000158 	.word	0x20000158

08005b9c <_close_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d06      	ldr	r5, [pc, #24]	@ (8005bb8 <_close_r+0x1c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb fc4e 	bl	8001448 <_close>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_close_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_close_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20004dac 	.word	0x20004dac

08005bbc <_reclaim_reent>:
 8005bbc:	4b29      	ldr	r3, [pc, #164]	@ (8005c64 <_reclaim_reent+0xa8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4283      	cmp	r3, r0
 8005bc2:	b570      	push	{r4, r5, r6, lr}
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	d04b      	beq.n	8005c60 <_reclaim_reent+0xa4>
 8005bc8:	69c3      	ldr	r3, [r0, #28]
 8005bca:	b1ab      	cbz	r3, 8005bf8 <_reclaim_reent+0x3c>
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	b16b      	cbz	r3, 8005bec <_reclaim_reent+0x30>
 8005bd0:	2500      	movs	r5, #0
 8005bd2:	69e3      	ldr	r3, [r4, #28]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	5959      	ldr	r1, [r3, r5]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d13b      	bne.n	8005c54 <_reclaim_reent+0x98>
 8005bdc:	3504      	adds	r5, #4
 8005bde:	2d80      	cmp	r5, #128	@ 0x80
 8005be0:	d1f7      	bne.n	8005bd2 <_reclaim_reent+0x16>
 8005be2:	69e3      	ldr	r3, [r4, #28]
 8005be4:	4620      	mov	r0, r4
 8005be6:	68d9      	ldr	r1, [r3, #12]
 8005be8:	f000 fefe 	bl	80069e8 <_free_r>
 8005bec:	69e3      	ldr	r3, [r4, #28]
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	b111      	cbz	r1, 8005bf8 <_reclaim_reent+0x3c>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fef8 	bl	80069e8 <_free_r>
 8005bf8:	6961      	ldr	r1, [r4, #20]
 8005bfa:	b111      	cbz	r1, 8005c02 <_reclaim_reent+0x46>
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fef3 	bl	80069e8 <_free_r>
 8005c02:	69e1      	ldr	r1, [r4, #28]
 8005c04:	b111      	cbz	r1, 8005c0c <_reclaim_reent+0x50>
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 feee 	bl	80069e8 <_free_r>
 8005c0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c0e:	b111      	cbz	r1, 8005c16 <_reclaim_reent+0x5a>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fee9 	bl	80069e8 <_free_r>
 8005c16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c18:	b111      	cbz	r1, 8005c20 <_reclaim_reent+0x64>
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 fee4 	bl	80069e8 <_free_r>
 8005c20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c22:	b111      	cbz	r1, 8005c2a <_reclaim_reent+0x6e>
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fedf 	bl	80069e8 <_free_r>
 8005c2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c2c:	b111      	cbz	r1, 8005c34 <_reclaim_reent+0x78>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 feda 	bl	80069e8 <_free_r>
 8005c34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005c36:	b111      	cbz	r1, 8005c3e <_reclaim_reent+0x82>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fed5 	bl	80069e8 <_free_r>
 8005c3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005c40:	b111      	cbz	r1, 8005c48 <_reclaim_reent+0x8c>
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fed0 	bl	80069e8 <_free_r>
 8005c48:	6a23      	ldr	r3, [r4, #32]
 8005c4a:	b14b      	cbz	r3, 8005c60 <_reclaim_reent+0xa4>
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c52:	4718      	bx	r3
 8005c54:	680e      	ldr	r6, [r1, #0]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 fec6 	bl	80069e8 <_free_r>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	e7bb      	b.n	8005bd8 <_reclaim_reent+0x1c>
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	bf00      	nop
 8005c64:	20000018 	.word	0x20000018

08005c68 <_lseek_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	@ (8005c88 <_lseek_r+0x20>)
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4608      	mov	r0, r1
 8005c70:	4611      	mov	r1, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	602a      	str	r2, [r5, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f7fb fc0d 	bl	8001496 <_lseek>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_lseek_r+0x1e>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_lseek_r+0x1e>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20004dac 	.word	0x20004dac

08005c8c <_read_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	@ (8005cac <_read_r+0x20>)
 8005c90:	4604      	mov	r4, r0
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f7fb fbb7 	bl	800140e <_read>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_read_r+0x1e>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_read_r+0x1e>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20004dac 	.word	0x20004dac

08005cb0 <_write_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d07      	ldr	r5, [pc, #28]	@ (8005cd0 <_write_r+0x20>)
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	4608      	mov	r0, r1
 8005cb8:	4611      	mov	r1, r2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fb fcf4 	bl	80016ac <_write>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_write_r+0x1e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_write_r+0x1e>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20004dac 	.word	0x20004dac

08005cd4 <__errno>:
 8005cd4:	4b01      	ldr	r3, [pc, #4]	@ (8005cdc <__errno+0x8>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000018 	.word	0x20000018

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d18 <__libc_init_array+0x38>)
 8005ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d1c <__libc_init_array+0x3c>)
 8005ce6:	1b64      	subs	r4, r4, r5
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	2600      	movs	r6, #0
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d20 <__libc_init_array+0x40>)
 8005cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d24 <__libc_init_array+0x44>)
 8005cf4:	f001 febe 	bl	8007a74 <_init>
 8005cf8:	1b64      	subs	r4, r4, r5
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d08:	4798      	blx	r3
 8005d0a:	3601      	adds	r6, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d12:	4798      	blx	r3
 8005d14:	3601      	adds	r6, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	08007f00 	.word	0x08007f00
 8005d1c:	08007f00 	.word	0x08007f00
 8005d20:	08007f00 	.word	0x08007f00
 8005d24:	08007f04 	.word	0x08007f04

08005d28 <__retarget_lock_init_recursive>:
 8005d28:	4770      	bx	lr

08005d2a <__retarget_lock_acquire_recursive>:
 8005d2a:	4770      	bx	lr

08005d2c <__retarget_lock_release_recursive>:
 8005d2c:	4770      	bx	lr

08005d2e <memcpy>:
 8005d2e:	440a      	add	r2, r1
 8005d30:	4291      	cmp	r1, r2
 8005d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d36:	d100      	bne.n	8005d3a <memcpy+0xc>
 8005d38:	4770      	bx	lr
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d44:	4291      	cmp	r1, r2
 8005d46:	d1f9      	bne.n	8005d3c <memcpy+0xe>
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <quorem>:
 8005d4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4e:	6903      	ldr	r3, [r0, #16]
 8005d50:	690c      	ldr	r4, [r1, #16]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	4607      	mov	r7, r0
 8005d56:	db7e      	blt.n	8005e56 <quorem+0x10c>
 8005d58:	3c01      	subs	r4, #1
 8005d5a:	f101 0814 	add.w	r8, r1, #20
 8005d5e:	00a3      	lsls	r3, r4, #2
 8005d60:	f100 0514 	add.w	r5, r0, #20
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d74:	3301      	adds	r3, #1
 8005d76:	429a      	cmp	r2, r3
 8005d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d80:	d32e      	bcc.n	8005de0 <quorem+0x96>
 8005d82:	f04f 0a00 	mov.w	sl, #0
 8005d86:	46c4      	mov	ip, r8
 8005d88:	46ae      	mov	lr, r5
 8005d8a:	46d3      	mov	fp, sl
 8005d8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d90:	b298      	uxth	r0, r3
 8005d92:	fb06 a000 	mla	r0, r6, r0, sl
 8005d96:	0c02      	lsrs	r2, r0, #16
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	fb06 2303 	mla	r3, r6, r3, r2
 8005d9e:	f8de 2000 	ldr.w	r2, [lr]
 8005da2:	b280      	uxth	r0, r0
 8005da4:	b292      	uxth	r2, r2
 8005da6:	1a12      	subs	r2, r2, r0
 8005da8:	445a      	add	r2, fp
 8005daa:	f8de 0000 	ldr.w	r0, [lr]
 8005dae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005db8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dbc:	b292      	uxth	r2, r2
 8005dbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dc2:	45e1      	cmp	r9, ip
 8005dc4:	f84e 2b04 	str.w	r2, [lr], #4
 8005dc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dcc:	d2de      	bcs.n	8005d8c <quorem+0x42>
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	58eb      	ldr	r3, [r5, r3]
 8005dd2:	b92b      	cbnz	r3, 8005de0 <quorem+0x96>
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	3b04      	subs	r3, #4
 8005dd8:	429d      	cmp	r5, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	d32f      	bcc.n	8005e3e <quorem+0xf4>
 8005dde:	613c      	str	r4, [r7, #16]
 8005de0:	4638      	mov	r0, r7
 8005de2:	f001 f97b 	bl	80070dc <__mcmp>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	db25      	blt.n	8005e36 <quorem+0xec>
 8005dea:	4629      	mov	r1, r5
 8005dec:	2000      	movs	r0, #0
 8005dee:	f858 2b04 	ldr.w	r2, [r8], #4
 8005df2:	f8d1 c000 	ldr.w	ip, [r1]
 8005df6:	fa1f fe82 	uxth.w	lr, r2
 8005dfa:	fa1f f38c 	uxth.w	r3, ip
 8005dfe:	eba3 030e 	sub.w	r3, r3, lr
 8005e02:	4403      	add	r3, r0
 8005e04:	0c12      	lsrs	r2, r2, #16
 8005e06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e14:	45c1      	cmp	r9, r8
 8005e16:	f841 3b04 	str.w	r3, [r1], #4
 8005e1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e1e:	d2e6      	bcs.n	8005dee <quorem+0xa4>
 8005e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e28:	b922      	cbnz	r2, 8005e34 <quorem+0xea>
 8005e2a:	3b04      	subs	r3, #4
 8005e2c:	429d      	cmp	r5, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	d30b      	bcc.n	8005e4a <quorem+0x100>
 8005e32:	613c      	str	r4, [r7, #16]
 8005e34:	3601      	adds	r6, #1
 8005e36:	4630      	mov	r0, r6
 8005e38:	b003      	add	sp, #12
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	3b04      	subs	r3, #4
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d1cb      	bne.n	8005dde <quorem+0x94>
 8005e46:	3c01      	subs	r4, #1
 8005e48:	e7c6      	b.n	8005dd8 <quorem+0x8e>
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	d1ef      	bne.n	8005e32 <quorem+0xe8>
 8005e52:	3c01      	subs	r4, #1
 8005e54:	e7ea      	b.n	8005e2c <quorem+0xe2>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e7ee      	b.n	8005e38 <quorem+0xee>
 8005e5a:	0000      	movs	r0, r0
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_dtoa_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	69c7      	ldr	r7, [r0, #28]
 8005e66:	b099      	sub	sp, #100	@ 0x64
 8005e68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e6c:	ec55 4b10 	vmov	r4, r5, d0
 8005e70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e74:	4683      	mov	fp, r0
 8005e76:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e7a:	b97f      	cbnz	r7, 8005e9c <_dtoa_r+0x3c>
 8005e7c:	2010      	movs	r0, #16
 8005e7e:	f000 fdfd 	bl	8006a7c <malloc>
 8005e82:	4602      	mov	r2, r0
 8005e84:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e88:	b920      	cbnz	r0, 8005e94 <_dtoa_r+0x34>
 8005e8a:	4ba7      	ldr	r3, [pc, #668]	@ (8006128 <_dtoa_r+0x2c8>)
 8005e8c:	21ef      	movs	r1, #239	@ 0xef
 8005e8e:	48a7      	ldr	r0, [pc, #668]	@ (800612c <_dtoa_r+0x2cc>)
 8005e90:	f001 fae8 	bl	8007464 <__assert_func>
 8005e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e98:	6007      	str	r7, [r0, #0]
 8005e9a:	60c7      	str	r7, [r0, #12]
 8005e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	b159      	cbz	r1, 8005ebc <_dtoa_r+0x5c>
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	604a      	str	r2, [r1, #4]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4093      	lsls	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
 8005eae:	4658      	mov	r0, fp
 8005eb0:	f000 feda 	bl	8006c68 <_Bfree>
 8005eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	1e2b      	subs	r3, r5, #0
 8005ebe:	bfb9      	ittee	lt
 8005ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ec4:	9303      	strlt	r3, [sp, #12]
 8005ec6:	2300      	movge	r3, #0
 8005ec8:	6033      	strge	r3, [r6, #0]
 8005eca:	9f03      	ldr	r7, [sp, #12]
 8005ecc:	4b98      	ldr	r3, [pc, #608]	@ (8006130 <_dtoa_r+0x2d0>)
 8005ece:	bfbc      	itt	lt
 8005ed0:	2201      	movlt	r2, #1
 8005ed2:	6032      	strlt	r2, [r6, #0]
 8005ed4:	43bb      	bics	r3, r7
 8005ed6:	d112      	bne.n	8005efe <_dtoa_r+0x9e>
 8005ed8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ee4:	4323      	orrs	r3, r4
 8005ee6:	f000 854d 	beq.w	8006984 <_dtoa_r+0xb24>
 8005eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005eec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006144 <_dtoa_r+0x2e4>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 854f 	beq.w	8006994 <_dtoa_r+0xb34>
 8005ef6:	f10a 0303 	add.w	r3, sl, #3
 8005efa:	f000 bd49 	b.w	8006990 <_dtoa_r+0xb30>
 8005efe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	ec51 0b17 	vmov	r0, r1, d7
 8005f08:	2300      	movs	r3, #0
 8005f0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f0e:	f7fa fde3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f12:	4680      	mov	r8, r0
 8005f14:	b158      	cbz	r0, 8005f2e <_dtoa_r+0xce>
 8005f16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f18:	2301      	movs	r3, #1
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f1e:	b113      	cbz	r3, 8005f26 <_dtoa_r+0xc6>
 8005f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f22:	4b84      	ldr	r3, [pc, #528]	@ (8006134 <_dtoa_r+0x2d4>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006148 <_dtoa_r+0x2e8>
 8005f2a:	f000 bd33 	b.w	8006994 <_dtoa_r+0xb34>
 8005f2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f32:	aa16      	add	r2, sp, #88	@ 0x58
 8005f34:	a917      	add	r1, sp, #92	@ 0x5c
 8005f36:	4658      	mov	r0, fp
 8005f38:	f001 f980 	bl	800723c <__d2b>
 8005f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f40:	4681      	mov	r9, r0
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d077      	beq.n	8006036 <_dtoa_r+0x1d6>
 8005f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f60:	4619      	mov	r1, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	4b74      	ldr	r3, [pc, #464]	@ (8006138 <_dtoa_r+0x2d8>)
 8005f66:	f7fa f997 	bl	8000298 <__aeabi_dsub>
 8005f6a:	a369      	add	r3, pc, #420	@ (adr r3, 8006110 <_dtoa_r+0x2b0>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fb4a 	bl	8000608 <__aeabi_dmul>
 8005f74:	a368      	add	r3, pc, #416	@ (adr r3, 8006118 <_dtoa_r+0x2b8>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa f98f 	bl	800029c <__adddf3>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4630      	mov	r0, r6
 8005f82:	460d      	mov	r5, r1
 8005f84:	f7fa fad6 	bl	8000534 <__aeabi_i2d>
 8005f88:	a365      	add	r3, pc, #404	@ (adr r3, 8006120 <_dtoa_r+0x2c0>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa fb3b 	bl	8000608 <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa f97f 	bl	800029c <__adddf3>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	f7fa fde1 	bl	8000b68 <__aeabi_d2iz>
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4607      	mov	r7, r0
 8005faa:	2300      	movs	r3, #0
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	f7fa fd9c 	bl	8000aec <__aeabi_dcmplt>
 8005fb4:	b140      	cbz	r0, 8005fc8 <_dtoa_r+0x168>
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7fa fabc 	bl	8000534 <__aeabi_i2d>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	f7fa fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc4:	b900      	cbnz	r0, 8005fc8 <_dtoa_r+0x168>
 8005fc6:	3f01      	subs	r7, #1
 8005fc8:	2f16      	cmp	r7, #22
 8005fca:	d851      	bhi.n	8006070 <_dtoa_r+0x210>
 8005fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800613c <_dtoa_r+0x2dc>)
 8005fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fda:	f7fa fd87 	bl	8000aec <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d048      	beq.n	8006074 <_dtoa_r+0x214>
 8005fe2:	3f01      	subs	r7, #1
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005fe8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fea:	1b9b      	subs	r3, r3, r6
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	bf44      	itt	mi
 8005ff0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ff4:	2300      	movmi	r3, #0
 8005ff6:	9208      	str	r2, [sp, #32]
 8005ff8:	bf54      	ite	pl
 8005ffa:	f04f 0800 	movpl.w	r8, #0
 8005ffe:	9308      	strmi	r3, [sp, #32]
 8006000:	2f00      	cmp	r7, #0
 8006002:	db39      	blt.n	8006078 <_dtoa_r+0x218>
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006008:	443b      	add	r3, r7
 800600a:	9308      	str	r3, [sp, #32]
 800600c:	2300      	movs	r3, #0
 800600e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006012:	2b09      	cmp	r3, #9
 8006014:	d864      	bhi.n	80060e0 <_dtoa_r+0x280>
 8006016:	2b05      	cmp	r3, #5
 8006018:	bfc4      	itt	gt
 800601a:	3b04      	subgt	r3, #4
 800601c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800601e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006020:	f1a3 0302 	sub.w	r3, r3, #2
 8006024:	bfcc      	ite	gt
 8006026:	2400      	movgt	r4, #0
 8006028:	2401      	movle	r4, #1
 800602a:	2b03      	cmp	r3, #3
 800602c:	d863      	bhi.n	80060f6 <_dtoa_r+0x296>
 800602e:	e8df f003 	tbb	[pc, r3]
 8006032:	372a      	.short	0x372a
 8006034:	5535      	.short	0x5535
 8006036:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800603a:	441e      	add	r6, r3
 800603c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006040:	2b20      	cmp	r3, #32
 8006042:	bfc1      	itttt	gt
 8006044:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006048:	409f      	lslgt	r7, r3
 800604a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800604e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006052:	bfd6      	itet	le
 8006054:	f1c3 0320 	rsble	r3, r3, #32
 8006058:	ea47 0003 	orrgt.w	r0, r7, r3
 800605c:	fa04 f003 	lslle.w	r0, r4, r3
 8006060:	f7fa fa58 	bl	8000514 <__aeabi_ui2d>
 8006064:	2201      	movs	r2, #1
 8006066:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800606a:	3e01      	subs	r6, #1
 800606c:	9214      	str	r2, [sp, #80]	@ 0x50
 800606e:	e777      	b.n	8005f60 <_dtoa_r+0x100>
 8006070:	2301      	movs	r3, #1
 8006072:	e7b8      	b.n	8005fe6 <_dtoa_r+0x186>
 8006074:	9012      	str	r0, [sp, #72]	@ 0x48
 8006076:	e7b7      	b.n	8005fe8 <_dtoa_r+0x188>
 8006078:	427b      	negs	r3, r7
 800607a:	930a      	str	r3, [sp, #40]	@ 0x28
 800607c:	2300      	movs	r3, #0
 800607e:	eba8 0807 	sub.w	r8, r8, r7
 8006082:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006084:	e7c4      	b.n	8006010 <_dtoa_r+0x1b0>
 8006086:	2300      	movs	r3, #0
 8006088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800608a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	dc35      	bgt.n	80060fc <_dtoa_r+0x29c>
 8006090:	2301      	movs	r3, #1
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9307      	str	r3, [sp, #28]
 8006096:	461a      	mov	r2, r3
 8006098:	920e      	str	r2, [sp, #56]	@ 0x38
 800609a:	e00b      	b.n	80060b4 <_dtoa_r+0x254>
 800609c:	2301      	movs	r3, #1
 800609e:	e7f3      	b.n	8006088 <_dtoa_r+0x228>
 80060a0:	2300      	movs	r3, #0
 80060a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	9307      	str	r3, [sp, #28]
 80060b0:	bfb8      	it	lt
 80060b2:	2301      	movlt	r3, #1
 80060b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060b8:	2100      	movs	r1, #0
 80060ba:	2204      	movs	r2, #4
 80060bc:	f102 0514 	add.w	r5, r2, #20
 80060c0:	429d      	cmp	r5, r3
 80060c2:	d91f      	bls.n	8006104 <_dtoa_r+0x2a4>
 80060c4:	6041      	str	r1, [r0, #4]
 80060c6:	4658      	mov	r0, fp
 80060c8:	f000 fd8e 	bl	8006be8 <_Balloc>
 80060cc:	4682      	mov	sl, r0
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d13c      	bne.n	800614c <_dtoa_r+0x2ec>
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <_dtoa_r+0x2e0>)
 80060d4:	4602      	mov	r2, r0
 80060d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80060da:	e6d8      	b.n	8005e8e <_dtoa_r+0x2e>
 80060dc:	2301      	movs	r3, #1
 80060de:	e7e0      	b.n	80060a2 <_dtoa_r+0x242>
 80060e0:	2401      	movs	r4, #1
 80060e2:	2300      	movs	r3, #0
 80060e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2312      	movs	r3, #18
 80060f4:	e7d0      	b.n	8006098 <_dtoa_r+0x238>
 80060f6:	2301      	movs	r3, #1
 80060f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060fa:	e7f5      	b.n	80060e8 <_dtoa_r+0x288>
 80060fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	9307      	str	r3, [sp, #28]
 8006102:	e7d7      	b.n	80060b4 <_dtoa_r+0x254>
 8006104:	3101      	adds	r1, #1
 8006106:	0052      	lsls	r2, r2, #1
 8006108:	e7d8      	b.n	80060bc <_dtoa_r+0x25c>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	636f4361 	.word	0x636f4361
 8006114:	3fd287a7 	.word	0x3fd287a7
 8006118:	8b60c8b3 	.word	0x8b60c8b3
 800611c:	3fc68a28 	.word	0x3fc68a28
 8006120:	509f79fb 	.word	0x509f79fb
 8006124:	3fd34413 	.word	0x3fd34413
 8006128:	08007bc9 	.word	0x08007bc9
 800612c:	08007be0 	.word	0x08007be0
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	08007b99 	.word	0x08007b99
 8006138:	3ff80000 	.word	0x3ff80000
 800613c:	08007cd8 	.word	0x08007cd8
 8006140:	08007c38 	.word	0x08007c38
 8006144:	08007bc5 	.word	0x08007bc5
 8006148:	08007b98 	.word	0x08007b98
 800614c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006150:	6018      	str	r0, [r3, #0]
 8006152:	9b07      	ldr	r3, [sp, #28]
 8006154:	2b0e      	cmp	r3, #14
 8006156:	f200 80a4 	bhi.w	80062a2 <_dtoa_r+0x442>
 800615a:	2c00      	cmp	r4, #0
 800615c:	f000 80a1 	beq.w	80062a2 <_dtoa_r+0x442>
 8006160:	2f00      	cmp	r7, #0
 8006162:	dd33      	ble.n	80061cc <_dtoa_r+0x36c>
 8006164:	4bad      	ldr	r3, [pc, #692]	@ (800641c <_dtoa_r+0x5bc>)
 8006166:	f007 020f 	and.w	r2, r7, #15
 800616a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800616e:	ed93 7b00 	vldr	d7, [r3]
 8006172:	05f8      	lsls	r0, r7, #23
 8006174:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006178:	ea4f 1427 	mov.w	r4, r7, asr #4
 800617c:	d516      	bpl.n	80061ac <_dtoa_r+0x34c>
 800617e:	4ba8      	ldr	r3, [pc, #672]	@ (8006420 <_dtoa_r+0x5c0>)
 8006180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006184:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006188:	f7fa fb68 	bl	800085c <__aeabi_ddiv>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	f004 040f 	and.w	r4, r4, #15
 8006194:	2603      	movs	r6, #3
 8006196:	4da2      	ldr	r5, [pc, #648]	@ (8006420 <_dtoa_r+0x5c0>)
 8006198:	b954      	cbnz	r4, 80061b0 <_dtoa_r+0x350>
 800619a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a2:	f7fa fb5b 	bl	800085c <__aeabi_ddiv>
 80061a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061aa:	e028      	b.n	80061fe <_dtoa_r+0x39e>
 80061ac:	2602      	movs	r6, #2
 80061ae:	e7f2      	b.n	8006196 <_dtoa_r+0x336>
 80061b0:	07e1      	lsls	r1, r4, #31
 80061b2:	d508      	bpl.n	80061c6 <_dtoa_r+0x366>
 80061b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061bc:	f7fa fa24 	bl	8000608 <__aeabi_dmul>
 80061c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c4:	3601      	adds	r6, #1
 80061c6:	1064      	asrs	r4, r4, #1
 80061c8:	3508      	adds	r5, #8
 80061ca:	e7e5      	b.n	8006198 <_dtoa_r+0x338>
 80061cc:	f000 80d2 	beq.w	8006374 <_dtoa_r+0x514>
 80061d0:	427c      	negs	r4, r7
 80061d2:	4b92      	ldr	r3, [pc, #584]	@ (800641c <_dtoa_r+0x5bc>)
 80061d4:	4d92      	ldr	r5, [pc, #584]	@ (8006420 <_dtoa_r+0x5c0>)
 80061d6:	f004 020f 	and.w	r2, r4, #15
 80061da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061e6:	f7fa fa0f 	bl	8000608 <__aeabi_dmul>
 80061ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ee:	1124      	asrs	r4, r4, #4
 80061f0:	2300      	movs	r3, #0
 80061f2:	2602      	movs	r6, #2
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	f040 80b2 	bne.w	800635e <_dtoa_r+0x4fe>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d3      	bne.n	80061a6 <_dtoa_r+0x346>
 80061fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006200:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80b7 	beq.w	8006378 <_dtoa_r+0x518>
 800620a:	4b86      	ldr	r3, [pc, #536]	@ (8006424 <_dtoa_r+0x5c4>)
 800620c:	2200      	movs	r2, #0
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa fc6b 	bl	8000aec <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	f000 80ae 	beq.w	8006378 <_dtoa_r+0x518>
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80aa 	beq.w	8006378 <_dtoa_r+0x518>
 8006224:	9b00      	ldr	r3, [sp, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	dd37      	ble.n	800629a <_dtoa_r+0x43a>
 800622a:	1e7b      	subs	r3, r7, #1
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	4620      	mov	r0, r4
 8006230:	4b7d      	ldr	r3, [pc, #500]	@ (8006428 <_dtoa_r+0x5c8>)
 8006232:	2200      	movs	r2, #0
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa f9e7 	bl	8000608 <__aeabi_dmul>
 800623a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800623e:	9c00      	ldr	r4, [sp, #0]
 8006240:	3601      	adds	r6, #1
 8006242:	4630      	mov	r0, r6
 8006244:	f7fa f976 	bl	8000534 <__aeabi_i2d>
 8006248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800624c:	f7fa f9dc 	bl	8000608 <__aeabi_dmul>
 8006250:	4b76      	ldr	r3, [pc, #472]	@ (800642c <_dtoa_r+0x5cc>)
 8006252:	2200      	movs	r2, #0
 8006254:	f7fa f822 	bl	800029c <__adddf3>
 8006258:	4605      	mov	r5, r0
 800625a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800625e:	2c00      	cmp	r4, #0
 8006260:	f040 808d 	bne.w	800637e <_dtoa_r+0x51e>
 8006264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006268:	4b71      	ldr	r3, [pc, #452]	@ (8006430 <_dtoa_r+0x5d0>)
 800626a:	2200      	movs	r2, #0
 800626c:	f7fa f814 	bl	8000298 <__aeabi_dsub>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006278:	462a      	mov	r2, r5
 800627a:	4633      	mov	r3, r6
 800627c:	f7fa fc54 	bl	8000b28 <__aeabi_dcmpgt>
 8006280:	2800      	cmp	r0, #0
 8006282:	f040 828b 	bne.w	800679c <_dtoa_r+0x93c>
 8006286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628a:	462a      	mov	r2, r5
 800628c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006290:	f7fa fc2c 	bl	8000aec <__aeabi_dcmplt>
 8006294:	2800      	cmp	r0, #0
 8006296:	f040 8128 	bne.w	80064ea <_dtoa_r+0x68a>
 800629a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800629e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f2c0 815a 	blt.w	800655e <_dtoa_r+0x6fe>
 80062aa:	2f0e      	cmp	r7, #14
 80062ac:	f300 8157 	bgt.w	800655e <_dtoa_r+0x6fe>
 80062b0:	4b5a      	ldr	r3, [pc, #360]	@ (800641c <_dtoa_r+0x5bc>)
 80062b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062b6:	ed93 7b00 	vldr	d7, [r3]
 80062ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	ed8d 7b00 	vstr	d7, [sp]
 80062c2:	da03      	bge.n	80062cc <_dtoa_r+0x46c>
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f340 8101 	ble.w	80064ce <_dtoa_r+0x66e>
 80062cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062d0:	4656      	mov	r6, sl
 80062d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fabf 	bl	800085c <__aeabi_ddiv>
 80062de:	f7fa fc43 	bl	8000b68 <__aeabi_d2iz>
 80062e2:	4680      	mov	r8, r0
 80062e4:	f7fa f926 	bl	8000534 <__aeabi_i2d>
 80062e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ec:	f7fa f98c 	bl	8000608 <__aeabi_dmul>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062fc:	f7f9 ffcc 	bl	8000298 <__aeabi_dsub>
 8006300:	f806 4b01 	strb.w	r4, [r6], #1
 8006304:	9d07      	ldr	r5, [sp, #28]
 8006306:	eba6 040a 	sub.w	r4, r6, sl
 800630a:	42a5      	cmp	r5, r4
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	f040 8117 	bne.w	8006542 <_dtoa_r+0x6e2>
 8006314:	f7f9 ffc2 	bl	800029c <__adddf3>
 8006318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	f7fa fc02 	bl	8000b28 <__aeabi_dcmpgt>
 8006324:	2800      	cmp	r0, #0
 8006326:	f040 80f9 	bne.w	800651c <_dtoa_r+0x6bc>
 800632a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632e:	4620      	mov	r0, r4
 8006330:	4629      	mov	r1, r5
 8006332:	f7fa fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006336:	b118      	cbz	r0, 8006340 <_dtoa_r+0x4e0>
 8006338:	f018 0f01 	tst.w	r8, #1
 800633c:	f040 80ee 	bne.w	800651c <_dtoa_r+0x6bc>
 8006340:	4649      	mov	r1, r9
 8006342:	4658      	mov	r0, fp
 8006344:	f000 fc90 	bl	8006c68 <_Bfree>
 8006348:	2300      	movs	r3, #0
 800634a:	7033      	strb	r3, [r6, #0]
 800634c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800634e:	3701      	adds	r7, #1
 8006350:	601f      	str	r7, [r3, #0]
 8006352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 831d 	beq.w	8006994 <_dtoa_r+0xb34>
 800635a:	601e      	str	r6, [r3, #0]
 800635c:	e31a      	b.n	8006994 <_dtoa_r+0xb34>
 800635e:	07e2      	lsls	r2, r4, #31
 8006360:	d505      	bpl.n	800636e <_dtoa_r+0x50e>
 8006362:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006366:	f7fa f94f 	bl	8000608 <__aeabi_dmul>
 800636a:	3601      	adds	r6, #1
 800636c:	2301      	movs	r3, #1
 800636e:	1064      	asrs	r4, r4, #1
 8006370:	3508      	adds	r5, #8
 8006372:	e73f      	b.n	80061f4 <_dtoa_r+0x394>
 8006374:	2602      	movs	r6, #2
 8006376:	e742      	b.n	80061fe <_dtoa_r+0x39e>
 8006378:	9c07      	ldr	r4, [sp, #28]
 800637a:	9704      	str	r7, [sp, #16]
 800637c:	e761      	b.n	8006242 <_dtoa_r+0x3e2>
 800637e:	4b27      	ldr	r3, [pc, #156]	@ (800641c <_dtoa_r+0x5bc>)
 8006380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006382:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006386:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800638a:	4454      	add	r4, sl
 800638c:	2900      	cmp	r1, #0
 800638e:	d053      	beq.n	8006438 <_dtoa_r+0x5d8>
 8006390:	4928      	ldr	r1, [pc, #160]	@ (8006434 <_dtoa_r+0x5d4>)
 8006392:	2000      	movs	r0, #0
 8006394:	f7fa fa62 	bl	800085c <__aeabi_ddiv>
 8006398:	4633      	mov	r3, r6
 800639a:	462a      	mov	r2, r5
 800639c:	f7f9 ff7c 	bl	8000298 <__aeabi_dsub>
 80063a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063a4:	4656      	mov	r6, sl
 80063a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063aa:	f7fa fbdd 	bl	8000b68 <__aeabi_d2iz>
 80063ae:	4605      	mov	r5, r0
 80063b0:	f7fa f8c0 	bl	8000534 <__aeabi_i2d>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063bc:	f7f9 ff6c 	bl	8000298 <__aeabi_dsub>
 80063c0:	3530      	adds	r5, #48	@ 0x30
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063ca:	f806 5b01 	strb.w	r5, [r6], #1
 80063ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063d2:	f7fa fb8b 	bl	8000aec <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d171      	bne.n	80064be <_dtoa_r+0x65e>
 80063da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063de:	4911      	ldr	r1, [pc, #68]	@ (8006424 <_dtoa_r+0x5c4>)
 80063e0:	2000      	movs	r0, #0
 80063e2:	f7f9 ff59 	bl	8000298 <__aeabi_dsub>
 80063e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ea:	f7fa fb7f 	bl	8000aec <__aeabi_dcmplt>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f040 8095 	bne.w	800651e <_dtoa_r+0x6be>
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	f43f af50 	beq.w	800629a <_dtoa_r+0x43a>
 80063fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <_dtoa_r+0x5c8>)
 8006400:	2200      	movs	r2, #0
 8006402:	f7fa f901 	bl	8000608 <__aeabi_dmul>
 8006406:	4b08      	ldr	r3, [pc, #32]	@ (8006428 <_dtoa_r+0x5c8>)
 8006408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800640c:	2200      	movs	r2, #0
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	f7fa f8f9 	bl	8000608 <__aeabi_dmul>
 8006416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641a:	e7c4      	b.n	80063a6 <_dtoa_r+0x546>
 800641c:	08007cd8 	.word	0x08007cd8
 8006420:	08007cb0 	.word	0x08007cb0
 8006424:	3ff00000 	.word	0x3ff00000
 8006428:	40240000 	.word	0x40240000
 800642c:	401c0000 	.word	0x401c0000
 8006430:	40140000 	.word	0x40140000
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006444:	9415      	str	r4, [sp, #84]	@ 0x54
 8006446:	4656      	mov	r6, sl
 8006448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644c:	f7fa fb8c 	bl	8000b68 <__aeabi_d2iz>
 8006450:	4605      	mov	r5, r0
 8006452:	f7fa f86f 	bl	8000534 <__aeabi_i2d>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645e:	f7f9 ff1b 	bl	8000298 <__aeabi_dsub>
 8006462:	3530      	adds	r5, #48	@ 0x30
 8006464:	f806 5b01 	strb.w	r5, [r6], #1
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	42a6      	cmp	r6, r4
 800646e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	d124      	bne.n	80064c2 <_dtoa_r+0x662>
 8006478:	4bac      	ldr	r3, [pc, #688]	@ (800672c <_dtoa_r+0x8cc>)
 800647a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800647e:	f7f9 ff0d 	bl	800029c <__adddf3>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648a:	f7fa fb4d 	bl	8000b28 <__aeabi_dcmpgt>
 800648e:	2800      	cmp	r0, #0
 8006490:	d145      	bne.n	800651e <_dtoa_r+0x6be>
 8006492:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006496:	49a5      	ldr	r1, [pc, #660]	@ (800672c <_dtoa_r+0x8cc>)
 8006498:	2000      	movs	r0, #0
 800649a:	f7f9 fefd 	bl	8000298 <__aeabi_dsub>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a6:	f7fa fb21 	bl	8000aec <__aeabi_dcmplt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f43f aef5 	beq.w	800629a <_dtoa_r+0x43a>
 80064b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064b2:	1e73      	subs	r3, r6, #1
 80064b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80064b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064ba:	2b30      	cmp	r3, #48	@ 0x30
 80064bc:	d0f8      	beq.n	80064b0 <_dtoa_r+0x650>
 80064be:	9f04      	ldr	r7, [sp, #16]
 80064c0:	e73e      	b.n	8006340 <_dtoa_r+0x4e0>
 80064c2:	4b9b      	ldr	r3, [pc, #620]	@ (8006730 <_dtoa_r+0x8d0>)
 80064c4:	f7fa f8a0 	bl	8000608 <__aeabi_dmul>
 80064c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064cc:	e7bc      	b.n	8006448 <_dtoa_r+0x5e8>
 80064ce:	d10c      	bne.n	80064ea <_dtoa_r+0x68a>
 80064d0:	4b98      	ldr	r3, [pc, #608]	@ (8006734 <_dtoa_r+0x8d4>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064d8:	f7fa f896 	bl	8000608 <__aeabi_dmul>
 80064dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e0:	f7fa fb18 	bl	8000b14 <__aeabi_dcmpge>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f000 8157 	beq.w	8006798 <_dtoa_r+0x938>
 80064ea:	2400      	movs	r4, #0
 80064ec:	4625      	mov	r5, r4
 80064ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f0:	43db      	mvns	r3, r3
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	4656      	mov	r6, sl
 80064f6:	2700      	movs	r7, #0
 80064f8:	4621      	mov	r1, r4
 80064fa:	4658      	mov	r0, fp
 80064fc:	f000 fbb4 	bl	8006c68 <_Bfree>
 8006500:	2d00      	cmp	r5, #0
 8006502:	d0dc      	beq.n	80064be <_dtoa_r+0x65e>
 8006504:	b12f      	cbz	r7, 8006512 <_dtoa_r+0x6b2>
 8006506:	42af      	cmp	r7, r5
 8006508:	d003      	beq.n	8006512 <_dtoa_r+0x6b2>
 800650a:	4639      	mov	r1, r7
 800650c:	4658      	mov	r0, fp
 800650e:	f000 fbab 	bl	8006c68 <_Bfree>
 8006512:	4629      	mov	r1, r5
 8006514:	4658      	mov	r0, fp
 8006516:	f000 fba7 	bl	8006c68 <_Bfree>
 800651a:	e7d0      	b.n	80064be <_dtoa_r+0x65e>
 800651c:	9704      	str	r7, [sp, #16]
 800651e:	4633      	mov	r3, r6
 8006520:	461e      	mov	r6, r3
 8006522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006526:	2a39      	cmp	r2, #57	@ 0x39
 8006528:	d107      	bne.n	800653a <_dtoa_r+0x6da>
 800652a:	459a      	cmp	sl, r3
 800652c:	d1f8      	bne.n	8006520 <_dtoa_r+0x6c0>
 800652e:	9a04      	ldr	r2, [sp, #16]
 8006530:	3201      	adds	r2, #1
 8006532:	9204      	str	r2, [sp, #16]
 8006534:	2230      	movs	r2, #48	@ 0x30
 8006536:	f88a 2000 	strb.w	r2, [sl]
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	3201      	adds	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e7bd      	b.n	80064be <_dtoa_r+0x65e>
 8006542:	4b7b      	ldr	r3, [pc, #492]	@ (8006730 <_dtoa_r+0x8d0>)
 8006544:	2200      	movs	r2, #0
 8006546:	f7fa f85f 	bl	8000608 <__aeabi_dmul>
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	460d      	mov	r5, r1
 8006552:	f7fa fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	f43f aebb 	beq.w	80062d2 <_dtoa_r+0x472>
 800655c:	e6f0      	b.n	8006340 <_dtoa_r+0x4e0>
 800655e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006560:	2a00      	cmp	r2, #0
 8006562:	f000 80db 	beq.w	800671c <_dtoa_r+0x8bc>
 8006566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006568:	2a01      	cmp	r2, #1
 800656a:	f300 80bf 	bgt.w	80066ec <_dtoa_r+0x88c>
 800656e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006570:	2a00      	cmp	r2, #0
 8006572:	f000 80b7 	beq.w	80066e4 <_dtoa_r+0x884>
 8006576:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800657a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800657c:	4646      	mov	r6, r8
 800657e:	9a08      	ldr	r2, [sp, #32]
 8006580:	2101      	movs	r1, #1
 8006582:	441a      	add	r2, r3
 8006584:	4658      	mov	r0, fp
 8006586:	4498      	add	r8, r3
 8006588:	9208      	str	r2, [sp, #32]
 800658a:	f000 fc21 	bl	8006dd0 <__i2b>
 800658e:	4605      	mov	r5, r0
 8006590:	b15e      	cbz	r6, 80065aa <_dtoa_r+0x74a>
 8006592:	9b08      	ldr	r3, [sp, #32]
 8006594:	2b00      	cmp	r3, #0
 8006596:	dd08      	ble.n	80065aa <_dtoa_r+0x74a>
 8006598:	42b3      	cmp	r3, r6
 800659a:	9a08      	ldr	r2, [sp, #32]
 800659c:	bfa8      	it	ge
 800659e:	4633      	movge	r3, r6
 80065a0:	eba8 0803 	sub.w	r8, r8, r3
 80065a4:	1af6      	subs	r6, r6, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ac:	b1f3      	cbz	r3, 80065ec <_dtoa_r+0x78c>
 80065ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80b7 	beq.w	8006724 <_dtoa_r+0x8c4>
 80065b6:	b18c      	cbz	r4, 80065dc <_dtoa_r+0x77c>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4622      	mov	r2, r4
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fcc7 	bl	8006f50 <__pow5mult>
 80065c2:	464a      	mov	r2, r9
 80065c4:	4601      	mov	r1, r0
 80065c6:	4605      	mov	r5, r0
 80065c8:	4658      	mov	r0, fp
 80065ca:	f000 fc17 	bl	8006dfc <__multiply>
 80065ce:	4649      	mov	r1, r9
 80065d0:	9004      	str	r0, [sp, #16]
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fb48 	bl	8006c68 <_Bfree>
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	4699      	mov	r9, r3
 80065dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065de:	1b1a      	subs	r2, r3, r4
 80065e0:	d004      	beq.n	80065ec <_dtoa_r+0x78c>
 80065e2:	4649      	mov	r1, r9
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fcb3 	bl	8006f50 <__pow5mult>
 80065ea:	4681      	mov	r9, r0
 80065ec:	2101      	movs	r1, #1
 80065ee:	4658      	mov	r0, fp
 80065f0:	f000 fbee 	bl	8006dd0 <__i2b>
 80065f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065f6:	4604      	mov	r4, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 81cf 	beq.w	800699c <_dtoa_r+0xb3c>
 80065fe:	461a      	mov	r2, r3
 8006600:	4601      	mov	r1, r0
 8006602:	4658      	mov	r0, fp
 8006604:	f000 fca4 	bl	8006f50 <__pow5mult>
 8006608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800660a:	2b01      	cmp	r3, #1
 800660c:	4604      	mov	r4, r0
 800660e:	f300 8095 	bgt.w	800673c <_dtoa_r+0x8dc>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8087 	bne.w	8006728 <_dtoa_r+0x8c8>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8089 	bne.w	8006738 <_dtoa_r+0x8d8>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800662c:	0d1b      	lsrs	r3, r3, #20
 800662e:	051b      	lsls	r3, r3, #20
 8006630:	b12b      	cbz	r3, 800663e <_dtoa_r+0x7de>
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	3301      	adds	r3, #1
 8006636:	9308      	str	r3, [sp, #32]
 8006638:	f108 0801 	add.w	r8, r8, #1
 800663c:	2301      	movs	r3, #1
 800663e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 81b0 	beq.w	80069a8 <_dtoa_r+0xb48>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800664e:	6918      	ldr	r0, [r3, #16]
 8006650:	f000 fb72 	bl	8006d38 <__hi0bits>
 8006654:	f1c0 0020 	rsb	r0, r0, #32
 8006658:	9b08      	ldr	r3, [sp, #32]
 800665a:	4418      	add	r0, r3
 800665c:	f010 001f 	ands.w	r0, r0, #31
 8006660:	d077      	beq.n	8006752 <_dtoa_r+0x8f2>
 8006662:	f1c0 0320 	rsb	r3, r0, #32
 8006666:	2b04      	cmp	r3, #4
 8006668:	dd6b      	ble.n	8006742 <_dtoa_r+0x8e2>
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	f1c0 001c 	rsb	r0, r0, #28
 8006670:	4403      	add	r3, r0
 8006672:	4480      	add	r8, r0
 8006674:	4406      	add	r6, r0
 8006676:	9308      	str	r3, [sp, #32]
 8006678:	f1b8 0f00 	cmp.w	r8, #0
 800667c:	dd05      	ble.n	800668a <_dtoa_r+0x82a>
 800667e:	4649      	mov	r1, r9
 8006680:	4642      	mov	r2, r8
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fcbe 	bl	8007004 <__lshift>
 8006688:	4681      	mov	r9, r0
 800668a:	9b08      	ldr	r3, [sp, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	dd05      	ble.n	800669c <_dtoa_r+0x83c>
 8006690:	4621      	mov	r1, r4
 8006692:	461a      	mov	r2, r3
 8006694:	4658      	mov	r0, fp
 8006696:	f000 fcb5 	bl	8007004 <__lshift>
 800669a:	4604      	mov	r4, r0
 800669c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d059      	beq.n	8006756 <_dtoa_r+0x8f6>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4648      	mov	r0, r9
 80066a6:	f000 fd19 	bl	80070dc <__mcmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	da53      	bge.n	8006756 <_dtoa_r+0x8f6>
 80066ae:	1e7b      	subs	r3, r7, #1
 80066b0:	9304      	str	r3, [sp, #16]
 80066b2:	4649      	mov	r1, r9
 80066b4:	2300      	movs	r3, #0
 80066b6:	220a      	movs	r2, #10
 80066b8:	4658      	mov	r0, fp
 80066ba:	f000 faf7 	bl	8006cac <__multadd>
 80066be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c0:	4681      	mov	r9, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8172 	beq.w	80069ac <_dtoa_r+0xb4c>
 80066c8:	2300      	movs	r3, #0
 80066ca:	4629      	mov	r1, r5
 80066cc:	220a      	movs	r2, #10
 80066ce:	4658      	mov	r0, fp
 80066d0:	f000 faec 	bl	8006cac <__multadd>
 80066d4:	9b00      	ldr	r3, [sp, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	4605      	mov	r5, r0
 80066da:	dc67      	bgt.n	80067ac <_dtoa_r+0x94c>
 80066dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066de:	2b02      	cmp	r3, #2
 80066e0:	dc41      	bgt.n	8006766 <_dtoa_r+0x906>
 80066e2:	e063      	b.n	80067ac <_dtoa_r+0x94c>
 80066e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066ea:	e746      	b.n	800657a <_dtoa_r+0x71a>
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	1e5c      	subs	r4, r3, #1
 80066f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	bfbf      	itttt	lt
 80066f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80066fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066fc:	1ae3      	sublt	r3, r4, r3
 80066fe:	bfb4      	ite	lt
 8006700:	18d2      	addlt	r2, r2, r3
 8006702:	1b1c      	subge	r4, r3, r4
 8006704:	9b07      	ldr	r3, [sp, #28]
 8006706:	bfbc      	itt	lt
 8006708:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800670a:	2400      	movlt	r4, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb5      	itete	lt
 8006710:	eba8 0603 	sublt.w	r6, r8, r3
 8006714:	9b07      	ldrge	r3, [sp, #28]
 8006716:	2300      	movlt	r3, #0
 8006718:	4646      	movge	r6, r8
 800671a:	e730      	b.n	800657e <_dtoa_r+0x71e>
 800671c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800671e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006720:	4646      	mov	r6, r8
 8006722:	e735      	b.n	8006590 <_dtoa_r+0x730>
 8006724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006726:	e75c      	b.n	80065e2 <_dtoa_r+0x782>
 8006728:	2300      	movs	r3, #0
 800672a:	e788      	b.n	800663e <_dtoa_r+0x7de>
 800672c:	3fe00000 	.word	0x3fe00000
 8006730:	40240000 	.word	0x40240000
 8006734:	40140000 	.word	0x40140000
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	e780      	b.n	800663e <_dtoa_r+0x7de>
 800673c:	2300      	movs	r3, #0
 800673e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006740:	e782      	b.n	8006648 <_dtoa_r+0x7e8>
 8006742:	d099      	beq.n	8006678 <_dtoa_r+0x818>
 8006744:	9a08      	ldr	r2, [sp, #32]
 8006746:	331c      	adds	r3, #28
 8006748:	441a      	add	r2, r3
 800674a:	4498      	add	r8, r3
 800674c:	441e      	add	r6, r3
 800674e:	9208      	str	r2, [sp, #32]
 8006750:	e792      	b.n	8006678 <_dtoa_r+0x818>
 8006752:	4603      	mov	r3, r0
 8006754:	e7f6      	b.n	8006744 <_dtoa_r+0x8e4>
 8006756:	9b07      	ldr	r3, [sp, #28]
 8006758:	9704      	str	r7, [sp, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	dc20      	bgt.n	80067a0 <_dtoa_r+0x940>
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006762:	2b02      	cmp	r3, #2
 8006764:	dd1e      	ble.n	80067a4 <_dtoa_r+0x944>
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f aec0 	bne.w	80064ee <_dtoa_r+0x68e>
 800676e:	4621      	mov	r1, r4
 8006770:	2205      	movs	r2, #5
 8006772:	4658      	mov	r0, fp
 8006774:	f000 fa9a 	bl	8006cac <__multadd>
 8006778:	4601      	mov	r1, r0
 800677a:	4604      	mov	r4, r0
 800677c:	4648      	mov	r0, r9
 800677e:	f000 fcad 	bl	80070dc <__mcmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	f77f aeb3 	ble.w	80064ee <_dtoa_r+0x68e>
 8006788:	4656      	mov	r6, sl
 800678a:	2331      	movs	r3, #49	@ 0x31
 800678c:	f806 3b01 	strb.w	r3, [r6], #1
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	3301      	adds	r3, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	e6ae      	b.n	80064f6 <_dtoa_r+0x696>
 8006798:	9c07      	ldr	r4, [sp, #28]
 800679a:	9704      	str	r7, [sp, #16]
 800679c:	4625      	mov	r5, r4
 800679e:	e7f3      	b.n	8006788 <_dtoa_r+0x928>
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8104 	beq.w	80069b4 <_dtoa_r+0xb54>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	dd05      	ble.n	80067bc <_dtoa_r+0x95c>
 80067b0:	4629      	mov	r1, r5
 80067b2:	4632      	mov	r2, r6
 80067b4:	4658      	mov	r0, fp
 80067b6:	f000 fc25 	bl	8007004 <__lshift>
 80067ba:	4605      	mov	r5, r0
 80067bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d05a      	beq.n	8006878 <_dtoa_r+0xa18>
 80067c2:	6869      	ldr	r1, [r5, #4]
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 fa0f 	bl	8006be8 <_Balloc>
 80067ca:	4606      	mov	r6, r0
 80067cc:	b928      	cbnz	r0, 80067da <_dtoa_r+0x97a>
 80067ce:	4b84      	ldr	r3, [pc, #528]	@ (80069e0 <_dtoa_r+0xb80>)
 80067d0:	4602      	mov	r2, r0
 80067d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067d6:	f7ff bb5a 	b.w	8005e8e <_dtoa_r+0x2e>
 80067da:	692a      	ldr	r2, [r5, #16]
 80067dc:	3202      	adds	r2, #2
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	f105 010c 	add.w	r1, r5, #12
 80067e4:	300c      	adds	r0, #12
 80067e6:	f7ff faa2 	bl	8005d2e <memcpy>
 80067ea:	2201      	movs	r2, #1
 80067ec:	4631      	mov	r1, r6
 80067ee:	4658      	mov	r0, fp
 80067f0:	f000 fc08 	bl	8007004 <__lshift>
 80067f4:	f10a 0301 	add.w	r3, sl, #1
 80067f8:	9307      	str	r3, [sp, #28]
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	4453      	add	r3, sl
 80067fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	462f      	mov	r7, r5
 8006808:	930a      	str	r3, [sp, #40]	@ 0x28
 800680a:	4605      	mov	r5, r0
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	4621      	mov	r1, r4
 8006810:	3b01      	subs	r3, #1
 8006812:	4648      	mov	r0, r9
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	f7ff fa98 	bl	8005d4a <quorem>
 800681a:	4639      	mov	r1, r7
 800681c:	9002      	str	r0, [sp, #8]
 800681e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006822:	4648      	mov	r0, r9
 8006824:	f000 fc5a 	bl	80070dc <__mcmp>
 8006828:	462a      	mov	r2, r5
 800682a:	9008      	str	r0, [sp, #32]
 800682c:	4621      	mov	r1, r4
 800682e:	4658      	mov	r0, fp
 8006830:	f000 fc70 	bl	8007114 <__mdiff>
 8006834:	68c2      	ldr	r2, [r0, #12]
 8006836:	4606      	mov	r6, r0
 8006838:	bb02      	cbnz	r2, 800687c <_dtoa_r+0xa1c>
 800683a:	4601      	mov	r1, r0
 800683c:	4648      	mov	r0, r9
 800683e:	f000 fc4d 	bl	80070dc <__mcmp>
 8006842:	4602      	mov	r2, r0
 8006844:	4631      	mov	r1, r6
 8006846:	4658      	mov	r0, fp
 8006848:	920e      	str	r2, [sp, #56]	@ 0x38
 800684a:	f000 fa0d 	bl	8006c68 <_Bfree>
 800684e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006852:	9e07      	ldr	r6, [sp, #28]
 8006854:	ea43 0102 	orr.w	r1, r3, r2
 8006858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685a:	4319      	orrs	r1, r3
 800685c:	d110      	bne.n	8006880 <_dtoa_r+0xa20>
 800685e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006862:	d029      	beq.n	80068b8 <_dtoa_r+0xa58>
 8006864:	9b08      	ldr	r3, [sp, #32]
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd02      	ble.n	8006870 <_dtoa_r+0xa10>
 800686a:	9b02      	ldr	r3, [sp, #8]
 800686c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006870:	9b00      	ldr	r3, [sp, #0]
 8006872:	f883 8000 	strb.w	r8, [r3]
 8006876:	e63f      	b.n	80064f8 <_dtoa_r+0x698>
 8006878:	4628      	mov	r0, r5
 800687a:	e7bb      	b.n	80067f4 <_dtoa_r+0x994>
 800687c:	2201      	movs	r2, #1
 800687e:	e7e1      	b.n	8006844 <_dtoa_r+0x9e4>
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	2b00      	cmp	r3, #0
 8006884:	db04      	blt.n	8006890 <_dtoa_r+0xa30>
 8006886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006888:	430b      	orrs	r3, r1
 800688a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800688c:	430b      	orrs	r3, r1
 800688e:	d120      	bne.n	80068d2 <_dtoa_r+0xa72>
 8006890:	2a00      	cmp	r2, #0
 8006892:	dded      	ble.n	8006870 <_dtoa_r+0xa10>
 8006894:	4649      	mov	r1, r9
 8006896:	2201      	movs	r2, #1
 8006898:	4658      	mov	r0, fp
 800689a:	f000 fbb3 	bl	8007004 <__lshift>
 800689e:	4621      	mov	r1, r4
 80068a0:	4681      	mov	r9, r0
 80068a2:	f000 fc1b 	bl	80070dc <__mcmp>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	dc03      	bgt.n	80068b2 <_dtoa_r+0xa52>
 80068aa:	d1e1      	bne.n	8006870 <_dtoa_r+0xa10>
 80068ac:	f018 0f01 	tst.w	r8, #1
 80068b0:	d0de      	beq.n	8006870 <_dtoa_r+0xa10>
 80068b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068b6:	d1d8      	bne.n	800686a <_dtoa_r+0xa0a>
 80068b8:	9a00      	ldr	r2, [sp, #0]
 80068ba:	2339      	movs	r3, #57	@ 0x39
 80068bc:	7013      	strb	r3, [r2, #0]
 80068be:	4633      	mov	r3, r6
 80068c0:	461e      	mov	r6, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068c8:	2a39      	cmp	r2, #57	@ 0x39
 80068ca:	d052      	beq.n	8006972 <_dtoa_r+0xb12>
 80068cc:	3201      	adds	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e612      	b.n	80064f8 <_dtoa_r+0x698>
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	dd07      	ble.n	80068e6 <_dtoa_r+0xa86>
 80068d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068da:	d0ed      	beq.n	80068b8 <_dtoa_r+0xa58>
 80068dc:	9a00      	ldr	r2, [sp, #0]
 80068de:	f108 0301 	add.w	r3, r8, #1
 80068e2:	7013      	strb	r3, [r2, #0]
 80068e4:	e608      	b.n	80064f8 <_dtoa_r+0x698>
 80068e6:	9b07      	ldr	r3, [sp, #28]
 80068e8:	9a07      	ldr	r2, [sp, #28]
 80068ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d028      	beq.n	8006946 <_dtoa_r+0xae6>
 80068f4:	4649      	mov	r1, r9
 80068f6:	2300      	movs	r3, #0
 80068f8:	220a      	movs	r2, #10
 80068fa:	4658      	mov	r0, fp
 80068fc:	f000 f9d6 	bl	8006cac <__multadd>
 8006900:	42af      	cmp	r7, r5
 8006902:	4681      	mov	r9, r0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	f04f 020a 	mov.w	r2, #10
 800690c:	4639      	mov	r1, r7
 800690e:	4658      	mov	r0, fp
 8006910:	d107      	bne.n	8006922 <_dtoa_r+0xac2>
 8006912:	f000 f9cb 	bl	8006cac <__multadd>
 8006916:	4607      	mov	r7, r0
 8006918:	4605      	mov	r5, r0
 800691a:	9b07      	ldr	r3, [sp, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	e774      	b.n	800680c <_dtoa_r+0x9ac>
 8006922:	f000 f9c3 	bl	8006cac <__multadd>
 8006926:	4629      	mov	r1, r5
 8006928:	4607      	mov	r7, r0
 800692a:	2300      	movs	r3, #0
 800692c:	220a      	movs	r2, #10
 800692e:	4658      	mov	r0, fp
 8006930:	f000 f9bc 	bl	8006cac <__multadd>
 8006934:	4605      	mov	r5, r0
 8006936:	e7f0      	b.n	800691a <_dtoa_r+0xaba>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfcc      	ite	gt
 800693e:	461e      	movgt	r6, r3
 8006940:	2601      	movle	r6, #1
 8006942:	4456      	add	r6, sl
 8006944:	2700      	movs	r7, #0
 8006946:	4649      	mov	r1, r9
 8006948:	2201      	movs	r2, #1
 800694a:	4658      	mov	r0, fp
 800694c:	f000 fb5a 	bl	8007004 <__lshift>
 8006950:	4621      	mov	r1, r4
 8006952:	4681      	mov	r9, r0
 8006954:	f000 fbc2 	bl	80070dc <__mcmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	dcb0      	bgt.n	80068be <_dtoa_r+0xa5e>
 800695c:	d102      	bne.n	8006964 <_dtoa_r+0xb04>
 800695e:	f018 0f01 	tst.w	r8, #1
 8006962:	d1ac      	bne.n	80068be <_dtoa_r+0xa5e>
 8006964:	4633      	mov	r3, r6
 8006966:	461e      	mov	r6, r3
 8006968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696c:	2a30      	cmp	r2, #48	@ 0x30
 800696e:	d0fa      	beq.n	8006966 <_dtoa_r+0xb06>
 8006970:	e5c2      	b.n	80064f8 <_dtoa_r+0x698>
 8006972:	459a      	cmp	sl, r3
 8006974:	d1a4      	bne.n	80068c0 <_dtoa_r+0xa60>
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	2331      	movs	r3, #49	@ 0x31
 800697e:	f88a 3000 	strb.w	r3, [sl]
 8006982:	e5b9      	b.n	80064f8 <_dtoa_r+0x698>
 8006984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006986:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069e4 <_dtoa_r+0xb84>
 800698a:	b11b      	cbz	r3, 8006994 <_dtoa_r+0xb34>
 800698c:	f10a 0308 	add.w	r3, sl, #8
 8006990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	4650      	mov	r0, sl
 8006996:	b019      	add	sp, #100	@ 0x64
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699e:	2b01      	cmp	r3, #1
 80069a0:	f77f ae37 	ble.w	8006612 <_dtoa_r+0x7b2>
 80069a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a8:	2001      	movs	r0, #1
 80069aa:	e655      	b.n	8006658 <_dtoa_r+0x7f8>
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f77f aed6 	ble.w	8006760 <_dtoa_r+0x900>
 80069b4:	4656      	mov	r6, sl
 80069b6:	4621      	mov	r1, r4
 80069b8:	4648      	mov	r0, r9
 80069ba:	f7ff f9c6 	bl	8005d4a <quorem>
 80069be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069c2:	f806 8b01 	strb.w	r8, [r6], #1
 80069c6:	9b00      	ldr	r3, [sp, #0]
 80069c8:	eba6 020a 	sub.w	r2, r6, sl
 80069cc:	4293      	cmp	r3, r2
 80069ce:	ddb3      	ble.n	8006938 <_dtoa_r+0xad8>
 80069d0:	4649      	mov	r1, r9
 80069d2:	2300      	movs	r3, #0
 80069d4:	220a      	movs	r2, #10
 80069d6:	4658      	mov	r0, fp
 80069d8:	f000 f968 	bl	8006cac <__multadd>
 80069dc:	4681      	mov	r9, r0
 80069de:	e7ea      	b.n	80069b6 <_dtoa_r+0xb56>
 80069e0:	08007c38 	.word	0x08007c38
 80069e4:	08007bbc 	.word	0x08007bbc

080069e8 <_free_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4605      	mov	r5, r0
 80069ec:	2900      	cmp	r1, #0
 80069ee:	d041      	beq.n	8006a74 <_free_r+0x8c>
 80069f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f4:	1f0c      	subs	r4, r1, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfb8      	it	lt
 80069fa:	18e4      	addlt	r4, r4, r3
 80069fc:	f000 f8e8 	bl	8006bd0 <__malloc_lock>
 8006a00:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <_free_r+0x90>)
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	b933      	cbnz	r3, 8006a14 <_free_r+0x2c>
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	6014      	str	r4, [r2, #0]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a10:	f000 b8e4 	b.w	8006bdc <__malloc_unlock>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d908      	bls.n	8006a2a <_free_r+0x42>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	1821      	adds	r1, r4, r0
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	bf01      	itttt	eq
 8006a20:	6819      	ldreq	r1, [r3, #0]
 8006a22:	685b      	ldreq	r3, [r3, #4]
 8006a24:	1809      	addeq	r1, r1, r0
 8006a26:	6021      	streq	r1, [r4, #0]
 8006a28:	e7ed      	b.n	8006a06 <_free_r+0x1e>
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	b10b      	cbz	r3, 8006a34 <_free_r+0x4c>
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d9fa      	bls.n	8006a2a <_free_r+0x42>
 8006a34:	6811      	ldr	r1, [r2, #0]
 8006a36:	1850      	adds	r0, r2, r1
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d10b      	bne.n	8006a54 <_free_r+0x6c>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	4401      	add	r1, r0
 8006a40:	1850      	adds	r0, r2, r1
 8006a42:	4283      	cmp	r3, r0
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	d1e0      	bne.n	8006a0a <_free_r+0x22>
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	6053      	str	r3, [r2, #4]
 8006a4e:	4408      	add	r0, r1
 8006a50:	6010      	str	r0, [r2, #0]
 8006a52:	e7da      	b.n	8006a0a <_free_r+0x22>
 8006a54:	d902      	bls.n	8006a5c <_free_r+0x74>
 8006a56:	230c      	movs	r3, #12
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	e7d6      	b.n	8006a0a <_free_r+0x22>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	1821      	adds	r1, r4, r0
 8006a60:	428b      	cmp	r3, r1
 8006a62:	bf04      	itt	eq
 8006a64:	6819      	ldreq	r1, [r3, #0]
 8006a66:	685b      	ldreq	r3, [r3, #4]
 8006a68:	6063      	str	r3, [r4, #4]
 8006a6a:	bf04      	itt	eq
 8006a6c:	1809      	addeq	r1, r1, r0
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	6054      	str	r4, [r2, #4]
 8006a72:	e7ca      	b.n	8006a0a <_free_r+0x22>
 8006a74:	bd38      	pop	{r3, r4, r5, pc}
 8006a76:	bf00      	nop
 8006a78:	20004db8 	.word	0x20004db8

08006a7c <malloc>:
 8006a7c:	4b02      	ldr	r3, [pc, #8]	@ (8006a88 <malloc+0xc>)
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f000 b825 	b.w	8006ad0 <_malloc_r>
 8006a86:	bf00      	nop
 8006a88:	20000018 	.word	0x20000018

08006a8c <sbrk_aligned>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006acc <sbrk_aligned+0x40>)
 8006a90:	460c      	mov	r4, r1
 8006a92:	6831      	ldr	r1, [r6, #0]
 8006a94:	4605      	mov	r5, r0
 8006a96:	b911      	cbnz	r1, 8006a9e <sbrk_aligned+0x12>
 8006a98:	f000 fcd4 	bl	8007444 <_sbrk_r>
 8006a9c:	6030      	str	r0, [r6, #0]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 fccf 	bl	8007444 <_sbrk_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d103      	bne.n	8006ab2 <sbrk_aligned+0x26>
 8006aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8006aae:	4620      	mov	r0, r4
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d0f8      	beq.n	8006aae <sbrk_aligned+0x22>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fcc0 	bl	8007444 <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d1f2      	bne.n	8006aae <sbrk_aligned+0x22>
 8006ac8:	e7ef      	b.n	8006aaa <sbrk_aligned+0x1e>
 8006aca:	bf00      	nop
 8006acc:	20004db4 	.word	0x20004db4

08006ad0 <_malloc_r>:
 8006ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d904      	bls.n	8006af6 <_malloc_r+0x26>
 8006aec:	230c      	movs	r3, #12
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bcc <_malloc_r+0xfc>
 8006afa:	f000 f869 	bl	8006bd0 <__malloc_lock>
 8006afe:	f8d8 3000 	ldr.w	r3, [r8]
 8006b02:	461c      	mov	r4, r3
 8006b04:	bb44      	cbnz	r4, 8006b58 <_malloc_r+0x88>
 8006b06:	4629      	mov	r1, r5
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff ffbf 	bl	8006a8c <sbrk_aligned>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	4604      	mov	r4, r0
 8006b12:	d158      	bne.n	8006bc6 <_malloc_r+0xf6>
 8006b14:	f8d8 4000 	ldr.w	r4, [r8]
 8006b18:	4627      	mov	r7, r4
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	d143      	bne.n	8006ba6 <_malloc_r+0xd6>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d04b      	beq.n	8006bba <_malloc_r+0xea>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	4639      	mov	r1, r7
 8006b26:	4630      	mov	r0, r6
 8006b28:	eb04 0903 	add.w	r9, r4, r3
 8006b2c:	f000 fc8a 	bl	8007444 <_sbrk_r>
 8006b30:	4581      	cmp	r9, r0
 8006b32:	d142      	bne.n	8006bba <_malloc_r+0xea>
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	1a6d      	subs	r5, r5, r1
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7ff ffa6 	bl	8006a8c <sbrk_aligned>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d03a      	beq.n	8006bba <_malloc_r+0xea>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	442b      	add	r3, r5
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	bb62      	cbnz	r2, 8006bac <_malloc_r+0xdc>
 8006b52:	f8c8 7000 	str.w	r7, [r8]
 8006b56:	e00f      	b.n	8006b78 <_malloc_r+0xa8>
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	1b52      	subs	r2, r2, r5
 8006b5c:	d420      	bmi.n	8006ba0 <_malloc_r+0xd0>
 8006b5e:	2a0b      	cmp	r2, #11
 8006b60:	d917      	bls.n	8006b92 <_malloc_r+0xc2>
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	6025      	str	r5, [r4, #0]
 8006b68:	bf18      	it	ne
 8006b6a:	6059      	strne	r1, [r3, #4]
 8006b6c:	6863      	ldr	r3, [r4, #4]
 8006b6e:	bf08      	it	eq
 8006b70:	f8c8 1000 	streq.w	r1, [r8]
 8006b74:	5162      	str	r2, [r4, r5]
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 f82f 	bl	8006bdc <__malloc_unlock>
 8006b7e:	f104 000b 	add.w	r0, r4, #11
 8006b82:	1d23      	adds	r3, r4, #4
 8006b84:	f020 0007 	bic.w	r0, r0, #7
 8006b88:	1ac2      	subs	r2, r0, r3
 8006b8a:	bf1c      	itt	ne
 8006b8c:	1a1b      	subne	r3, r3, r0
 8006b8e:	50a3      	strne	r3, [r4, r2]
 8006b90:	e7af      	b.n	8006af2 <_malloc_r+0x22>
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	bf0c      	ite	eq
 8006b98:	f8c8 2000 	streq.w	r2, [r8]
 8006b9c:	605a      	strne	r2, [r3, #4]
 8006b9e:	e7eb      	b.n	8006b78 <_malloc_r+0xa8>
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	6864      	ldr	r4, [r4, #4]
 8006ba4:	e7ae      	b.n	8006b04 <_malloc_r+0x34>
 8006ba6:	463c      	mov	r4, r7
 8006ba8:	687f      	ldr	r7, [r7, #4]
 8006baa:	e7b6      	b.n	8006b1a <_malloc_r+0x4a>
 8006bac:	461a      	mov	r2, r3
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d1fb      	bne.n	8006bac <_malloc_r+0xdc>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6053      	str	r3, [r2, #4]
 8006bb8:	e7de      	b.n	8006b78 <_malloc_r+0xa8>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f80c 	bl	8006bdc <__malloc_unlock>
 8006bc4:	e794      	b.n	8006af0 <_malloc_r+0x20>
 8006bc6:	6005      	str	r5, [r0, #0]
 8006bc8:	e7d6      	b.n	8006b78 <_malloc_r+0xa8>
 8006bca:	bf00      	nop
 8006bcc:	20004db8 	.word	0x20004db8

08006bd0 <__malloc_lock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_lock+0x8>)
 8006bd2:	f7ff b8aa 	b.w	8005d2a <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	20004db0 	.word	0x20004db0

08006bdc <__malloc_unlock>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	@ (8006be4 <__malloc_unlock+0x8>)
 8006bde:	f7ff b8a5 	b.w	8005d2c <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	20004db0 	.word	0x20004db0

08006be8 <_Balloc>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	69c6      	ldr	r6, [r0, #28]
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	b976      	cbnz	r6, 8006c10 <_Balloc+0x28>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7ff ff42 	bl	8006a7c <malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	61e0      	str	r0, [r4, #28]
 8006bfc:	b920      	cbnz	r0, 8006c08 <_Balloc+0x20>
 8006bfe:	4b18      	ldr	r3, [pc, #96]	@ (8006c60 <_Balloc+0x78>)
 8006c00:	4818      	ldr	r0, [pc, #96]	@ (8006c64 <_Balloc+0x7c>)
 8006c02:	216b      	movs	r1, #107	@ 0x6b
 8006c04:	f000 fc2e 	bl	8007464 <__assert_func>
 8006c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c0c:	6006      	str	r6, [r0, #0]
 8006c0e:	60c6      	str	r6, [r0, #12]
 8006c10:	69e6      	ldr	r6, [r4, #28]
 8006c12:	68f3      	ldr	r3, [r6, #12]
 8006c14:	b183      	cbz	r3, 8006c38 <_Balloc+0x50>
 8006c16:	69e3      	ldr	r3, [r4, #28]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c1e:	b9b8      	cbnz	r0, 8006c50 <_Balloc+0x68>
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f605 	lsl.w	r6, r1, r5
 8006c26:	1d72      	adds	r2, r6, #5
 8006c28:	0092      	lsls	r2, r2, #2
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fc38 	bl	80074a0 <_calloc_r>
 8006c30:	b160      	cbz	r0, 8006c4c <_Balloc+0x64>
 8006c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c36:	e00e      	b.n	8006c56 <_Balloc+0x6e>
 8006c38:	2221      	movs	r2, #33	@ 0x21
 8006c3a:	2104      	movs	r1, #4
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fc2f 	bl	80074a0 <_calloc_r>
 8006c42:	69e3      	ldr	r3, [r4, #28]
 8006c44:	60f0      	str	r0, [r6, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <_Balloc+0x2e>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c56:	2300      	movs	r3, #0
 8006c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c5c:	e7f7      	b.n	8006c4e <_Balloc+0x66>
 8006c5e:	bf00      	nop
 8006c60:	08007bc9 	.word	0x08007bc9
 8006c64:	08007c49 	.word	0x08007c49

08006c68 <_Bfree>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	69c6      	ldr	r6, [r0, #28]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	b976      	cbnz	r6, 8006c90 <_Bfree+0x28>
 8006c72:	2010      	movs	r0, #16
 8006c74:	f7ff ff02 	bl	8006a7c <malloc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	61e8      	str	r0, [r5, #28]
 8006c7c:	b920      	cbnz	r0, 8006c88 <_Bfree+0x20>
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <_Bfree+0x3c>)
 8006c80:	4809      	ldr	r0, [pc, #36]	@ (8006ca8 <_Bfree+0x40>)
 8006c82:	218f      	movs	r1, #143	@ 0x8f
 8006c84:	f000 fbee 	bl	8007464 <__assert_func>
 8006c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c8c:	6006      	str	r6, [r0, #0]
 8006c8e:	60c6      	str	r6, [r0, #12]
 8006c90:	b13c      	cbz	r4, 8006ca2 <_Bfree+0x3a>
 8006c92:	69eb      	ldr	r3, [r5, #28]
 8006c94:	6862      	ldr	r2, [r4, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c9c:	6021      	str	r1, [r4, #0]
 8006c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	08007bc9 	.word	0x08007bc9
 8006ca8:	08007c49 	.word	0x08007c49

08006cac <__multadd>:
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	690d      	ldr	r5, [r1, #16]
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	f101 0c14 	add.w	ip, r1, #20
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cc8:	0c1e      	lsrs	r6, r3, #16
 8006cca:	0c0b      	lsrs	r3, r1, #16
 8006ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8006cd0:	b289      	uxth	r1, r1
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cd8:	4285      	cmp	r5, r0
 8006cda:	f84c 1b04 	str.w	r1, [ip], #4
 8006cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ce2:	dcec      	bgt.n	8006cbe <__multadd+0x12>
 8006ce4:	b30e      	cbz	r6, 8006d2a <__multadd+0x7e>
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc19      	bgt.n	8006d20 <__multadd+0x74>
 8006cec:	6861      	ldr	r1, [r4, #4]
 8006cee:	4638      	mov	r0, r7
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	f7ff ff79 	bl	8006be8 <_Balloc>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <__multadd+0x5a>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <__multadd+0x84>)
 8006cfe:	480d      	ldr	r0, [pc, #52]	@ (8006d34 <__multadd+0x88>)
 8006d00:	21ba      	movs	r1, #186	@ 0xba
 8006d02:	f000 fbaf 	bl	8007464 <__assert_func>
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	f104 010c 	add.w	r1, r4, #12
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	300c      	adds	r0, #12
 8006d12:	f7ff f80c 	bl	8005d2e <memcpy>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa5 	bl	8006c68 <_Bfree>
 8006d1e:	4644      	mov	r4, r8
 8006d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d24:	3501      	adds	r5, #1
 8006d26:	615e      	str	r6, [r3, #20]
 8006d28:	6125      	str	r5, [r4, #16]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	08007c38 	.word	0x08007c38
 8006d34:	08007c49 	.word	0x08007c49

08006d38 <__hi0bits>:
 8006d38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	bf36      	itet	cc
 8006d40:	0403      	lslcc	r3, r0, #16
 8006d42:	2000      	movcs	r0, #0
 8006d44:	2010      	movcc	r0, #16
 8006d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d4a:	bf3c      	itt	cc
 8006d4c:	021b      	lslcc	r3, r3, #8
 8006d4e:	3008      	addcc	r0, #8
 8006d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d54:	bf3c      	itt	cc
 8006d56:	011b      	lslcc	r3, r3, #4
 8006d58:	3004      	addcc	r0, #4
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5e:	bf3c      	itt	cc
 8006d60:	009b      	lslcc	r3, r3, #2
 8006d62:	3002      	addcc	r0, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db05      	blt.n	8006d74 <__hi0bits+0x3c>
 8006d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d6c:	f100 0001 	add.w	r0, r0, #1
 8006d70:	bf08      	it	eq
 8006d72:	2020      	moveq	r0, #32
 8006d74:	4770      	bx	lr

08006d76 <__lo0bits>:
 8006d76:	6803      	ldr	r3, [r0, #0]
 8006d78:	4602      	mov	r2, r0
 8006d7a:	f013 0007 	ands.w	r0, r3, #7
 8006d7e:	d00b      	beq.n	8006d98 <__lo0bits+0x22>
 8006d80:	07d9      	lsls	r1, r3, #31
 8006d82:	d421      	bmi.n	8006dc8 <__lo0bits+0x52>
 8006d84:	0798      	lsls	r0, r3, #30
 8006d86:	bf49      	itett	mi
 8006d88:	085b      	lsrmi	r3, r3, #1
 8006d8a:	089b      	lsrpl	r3, r3, #2
 8006d8c:	2001      	movmi	r0, #1
 8006d8e:	6013      	strmi	r3, [r2, #0]
 8006d90:	bf5c      	itt	pl
 8006d92:	6013      	strpl	r3, [r2, #0]
 8006d94:	2002      	movpl	r0, #2
 8006d96:	4770      	bx	lr
 8006d98:	b299      	uxth	r1, r3
 8006d9a:	b909      	cbnz	r1, 8006da0 <__lo0bits+0x2a>
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	2010      	movs	r0, #16
 8006da0:	b2d9      	uxtb	r1, r3
 8006da2:	b909      	cbnz	r1, 8006da8 <__lo0bits+0x32>
 8006da4:	3008      	adds	r0, #8
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	bf04      	itt	eq
 8006dac:	091b      	lsreq	r3, r3, #4
 8006dae:	3004      	addeq	r0, #4
 8006db0:	0799      	lsls	r1, r3, #30
 8006db2:	bf04      	itt	eq
 8006db4:	089b      	lsreq	r3, r3, #2
 8006db6:	3002      	addeq	r0, #2
 8006db8:	07d9      	lsls	r1, r3, #31
 8006dba:	d403      	bmi.n	8006dc4 <__lo0bits+0x4e>
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	f100 0001 	add.w	r0, r0, #1
 8006dc2:	d003      	beq.n	8006dcc <__lo0bits+0x56>
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	4770      	bx	lr
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4770      	bx	lr
 8006dcc:	2020      	movs	r0, #32
 8006dce:	4770      	bx	lr

08006dd0 <__i2b>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	f7ff ff07 	bl	8006be8 <_Balloc>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	b928      	cbnz	r0, 8006dea <__i2b+0x1a>
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <__i2b+0x24>)
 8006de0:	4805      	ldr	r0, [pc, #20]	@ (8006df8 <__i2b+0x28>)
 8006de2:	f240 1145 	movw	r1, #325	@ 0x145
 8006de6:	f000 fb3d 	bl	8007464 <__assert_func>
 8006dea:	2301      	movs	r3, #1
 8006dec:	6144      	str	r4, [r0, #20]
 8006dee:	6103      	str	r3, [r0, #16]
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	08007c38 	.word	0x08007c38
 8006df8:	08007c49 	.word	0x08007c49

08006dfc <__multiply>:
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	4614      	mov	r4, r2
 8006e02:	690a      	ldr	r2, [r1, #16]
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bfa8      	it	ge
 8006e0a:	4623      	movge	r3, r4
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	bfa4      	itt	ge
 8006e10:	460c      	movge	r4, r1
 8006e12:	461f      	movge	r7, r3
 8006e14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	6861      	ldr	r1, [r4, #4]
 8006e20:	eb0a 0609 	add.w	r6, sl, r9
 8006e24:	42b3      	cmp	r3, r6
 8006e26:	b085      	sub	sp, #20
 8006e28:	bfb8      	it	lt
 8006e2a:	3101      	addlt	r1, #1
 8006e2c:	f7ff fedc 	bl	8006be8 <_Balloc>
 8006e30:	b930      	cbnz	r0, 8006e40 <__multiply+0x44>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b44      	ldr	r3, [pc, #272]	@ (8006f48 <__multiply+0x14c>)
 8006e36:	4845      	ldr	r0, [pc, #276]	@ (8006f4c <__multiply+0x150>)
 8006e38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e3c:	f000 fb12 	bl	8007464 <__assert_func>
 8006e40:	f100 0514 	add.w	r5, r0, #20
 8006e44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e48:	462b      	mov	r3, r5
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	4543      	cmp	r3, r8
 8006e4e:	d321      	bcc.n	8006e94 <__multiply+0x98>
 8006e50:	f107 0114 	add.w	r1, r7, #20
 8006e54:	f104 0214 	add.w	r2, r4, #20
 8006e58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	1b13      	subs	r3, r2, r4
 8006e64:	3b15      	subs	r3, #21
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	f104 0715 	add.w	r7, r4, #21
 8006e70:	42ba      	cmp	r2, r7
 8006e72:	bf38      	it	cc
 8006e74:	2304      	movcc	r3, #4
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	9b02      	ldr	r3, [sp, #8]
 8006e7a:	9103      	str	r1, [sp, #12]
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	d80c      	bhi.n	8006e9a <__multiply+0x9e>
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	dd03      	ble.n	8006e8c <__multiply+0x90>
 8006e84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05b      	beq.n	8006f44 <__multiply+0x148>
 8006e8c:	6106      	str	r6, [r0, #16]
 8006e8e:	b005      	add	sp, #20
 8006e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	f843 2b04 	str.w	r2, [r3], #4
 8006e98:	e7d8      	b.n	8006e4c <__multiply+0x50>
 8006e9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ea2:	d024      	beq.n	8006eee <__multiply+0xf2>
 8006ea4:	f104 0e14 	add.w	lr, r4, #20
 8006ea8:	46a9      	mov	r9, r5
 8006eaa:	f04f 0c00 	mov.w	ip, #0
 8006eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8006eb6:	fa1f fb87 	uxth.w	fp, r7
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ec0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ec4:	f8d9 7000 	ldr.w	r7, [r9]
 8006ec8:	4463      	add	r3, ip
 8006eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ece:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ed2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006edc:	4572      	cmp	r2, lr
 8006ede:	f849 3b04 	str.w	r3, [r9], #4
 8006ee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ee6:	d8e2      	bhi.n	8006eae <__multiply+0xb2>
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	f845 c003 	str.w	ip, [r5, r3]
 8006eee:	9b03      	ldr	r3, [sp, #12]
 8006ef0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ef4:	3104      	adds	r1, #4
 8006ef6:	f1b9 0f00 	cmp.w	r9, #0
 8006efa:	d021      	beq.n	8006f40 <__multiply+0x144>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	f104 0c14 	add.w	ip, r4, #20
 8006f02:	46ae      	mov	lr, r5
 8006f04:	f04f 0a00 	mov.w	sl, #0
 8006f08:	f8bc b000 	ldrh.w	fp, [ip]
 8006f0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f10:	fb09 770b 	mla	r7, r9, fp, r7
 8006f14:	4457      	add	r7, sl
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f1c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f28:	f8be 3000 	ldrh.w	r3, [lr]
 8006f2c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f34:	4562      	cmp	r2, ip
 8006f36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f3a:	d8e5      	bhi.n	8006f08 <__multiply+0x10c>
 8006f3c:	9f01      	ldr	r7, [sp, #4]
 8006f3e:	51eb      	str	r3, [r5, r7]
 8006f40:	3504      	adds	r5, #4
 8006f42:	e799      	b.n	8006e78 <__multiply+0x7c>
 8006f44:	3e01      	subs	r6, #1
 8006f46:	e79b      	b.n	8006e80 <__multiply+0x84>
 8006f48:	08007c38 	.word	0x08007c38
 8006f4c:	08007c49 	.word	0x08007c49

08006f50 <__pow5mult>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	4615      	mov	r5, r2
 8006f56:	f012 0203 	ands.w	r2, r2, #3
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	d007      	beq.n	8006f70 <__pow5mult+0x20>
 8006f60:	4c25      	ldr	r4, [pc, #148]	@ (8006ff8 <__pow5mult+0xa8>)
 8006f62:	3a01      	subs	r2, #1
 8006f64:	2300      	movs	r3, #0
 8006f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f6a:	f7ff fe9f 	bl	8006cac <__multadd>
 8006f6e:	4606      	mov	r6, r0
 8006f70:	10ad      	asrs	r5, r5, #2
 8006f72:	d03d      	beq.n	8006ff0 <__pow5mult+0xa0>
 8006f74:	69fc      	ldr	r4, [r7, #28]
 8006f76:	b97c      	cbnz	r4, 8006f98 <__pow5mult+0x48>
 8006f78:	2010      	movs	r0, #16
 8006f7a:	f7ff fd7f 	bl	8006a7c <malloc>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	61f8      	str	r0, [r7, #28]
 8006f82:	b928      	cbnz	r0, 8006f90 <__pow5mult+0x40>
 8006f84:	4b1d      	ldr	r3, [pc, #116]	@ (8006ffc <__pow5mult+0xac>)
 8006f86:	481e      	ldr	r0, [pc, #120]	@ (8007000 <__pow5mult+0xb0>)
 8006f88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f8c:	f000 fa6a 	bl	8007464 <__assert_func>
 8006f90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f94:	6004      	str	r4, [r0, #0]
 8006f96:	60c4      	str	r4, [r0, #12]
 8006f98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa0:	b94c      	cbnz	r4, 8006fb6 <__pow5mult+0x66>
 8006fa2:	f240 2171 	movw	r1, #625	@ 0x271
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7ff ff12 	bl	8006dd0 <__i2b>
 8006fac:	2300      	movs	r3, #0
 8006fae:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	f04f 0900 	mov.w	r9, #0
 8006fba:	07eb      	lsls	r3, r5, #31
 8006fbc:	d50a      	bpl.n	8006fd4 <__pow5mult+0x84>
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ff1a 	bl	8006dfc <__multiply>
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4680      	mov	r8, r0
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f7ff fe4b 	bl	8006c68 <_Bfree>
 8006fd2:	4646      	mov	r6, r8
 8006fd4:	106d      	asrs	r5, r5, #1
 8006fd6:	d00b      	beq.n	8006ff0 <__pow5mult+0xa0>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	b938      	cbnz	r0, 8006fec <__pow5mult+0x9c>
 8006fdc:	4622      	mov	r2, r4
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f7ff ff0b 	bl	8006dfc <__multiply>
 8006fe6:	6020      	str	r0, [r4, #0]
 8006fe8:	f8c0 9000 	str.w	r9, [r0]
 8006fec:	4604      	mov	r4, r0
 8006fee:	e7e4      	b.n	8006fba <__pow5mult+0x6a>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08007ca4 	.word	0x08007ca4
 8006ffc:	08007bc9 	.word	0x08007bc9
 8007000:	08007c49 	.word	0x08007c49

08007004 <__lshift>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	460c      	mov	r4, r1
 800700a:	6849      	ldr	r1, [r1, #4]
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	4607      	mov	r7, r0
 8007016:	4691      	mov	r9, r2
 8007018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800701c:	f108 0601 	add.w	r6, r8, #1
 8007020:	42b3      	cmp	r3, r6
 8007022:	db0b      	blt.n	800703c <__lshift+0x38>
 8007024:	4638      	mov	r0, r7
 8007026:	f7ff fddf 	bl	8006be8 <_Balloc>
 800702a:	4605      	mov	r5, r0
 800702c:	b948      	cbnz	r0, 8007042 <__lshift+0x3e>
 800702e:	4602      	mov	r2, r0
 8007030:	4b28      	ldr	r3, [pc, #160]	@ (80070d4 <__lshift+0xd0>)
 8007032:	4829      	ldr	r0, [pc, #164]	@ (80070d8 <__lshift+0xd4>)
 8007034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007038:	f000 fa14 	bl	8007464 <__assert_func>
 800703c:	3101      	adds	r1, #1
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	e7ee      	b.n	8007020 <__lshift+0x1c>
 8007042:	2300      	movs	r3, #0
 8007044:	f100 0114 	add.w	r1, r0, #20
 8007048:	f100 0210 	add.w	r2, r0, #16
 800704c:	4618      	mov	r0, r3
 800704e:	4553      	cmp	r3, sl
 8007050:	db33      	blt.n	80070ba <__lshift+0xb6>
 8007052:	6920      	ldr	r0, [r4, #16]
 8007054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007058:	f104 0314 	add.w	r3, r4, #20
 800705c:	f019 091f 	ands.w	r9, r9, #31
 8007060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007064:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007068:	d02b      	beq.n	80070c2 <__lshift+0xbe>
 800706a:	f1c9 0e20 	rsb	lr, r9, #32
 800706e:	468a      	mov	sl, r1
 8007070:	2200      	movs	r2, #0
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	fa00 f009 	lsl.w	r0, r0, r9
 8007078:	4310      	orrs	r0, r2
 800707a:	f84a 0b04 	str.w	r0, [sl], #4
 800707e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007082:	459c      	cmp	ip, r3
 8007084:	fa22 f20e 	lsr.w	r2, r2, lr
 8007088:	d8f3      	bhi.n	8007072 <__lshift+0x6e>
 800708a:	ebac 0304 	sub.w	r3, ip, r4
 800708e:	3b15      	subs	r3, #21
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	3304      	adds	r3, #4
 8007096:	f104 0015 	add.w	r0, r4, #21
 800709a:	4584      	cmp	ip, r0
 800709c:	bf38      	it	cc
 800709e:	2304      	movcc	r3, #4
 80070a0:	50ca      	str	r2, [r1, r3]
 80070a2:	b10a      	cbz	r2, 80070a8 <__lshift+0xa4>
 80070a4:	f108 0602 	add.w	r6, r8, #2
 80070a8:	3e01      	subs	r6, #1
 80070aa:	4638      	mov	r0, r7
 80070ac:	612e      	str	r6, [r5, #16]
 80070ae:	4621      	mov	r1, r4
 80070b0:	f7ff fdda 	bl	8006c68 <_Bfree>
 80070b4:	4628      	mov	r0, r5
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80070be:	3301      	adds	r3, #1
 80070c0:	e7c5      	b.n	800704e <__lshift+0x4a>
 80070c2:	3904      	subs	r1, #4
 80070c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070cc:	459c      	cmp	ip, r3
 80070ce:	d8f9      	bhi.n	80070c4 <__lshift+0xc0>
 80070d0:	e7ea      	b.n	80070a8 <__lshift+0xa4>
 80070d2:	bf00      	nop
 80070d4:	08007c38 	.word	0x08007c38
 80070d8:	08007c49 	.word	0x08007c49

080070dc <__mcmp>:
 80070dc:	690a      	ldr	r2, [r1, #16]
 80070de:	4603      	mov	r3, r0
 80070e0:	6900      	ldr	r0, [r0, #16]
 80070e2:	1a80      	subs	r0, r0, r2
 80070e4:	b530      	push	{r4, r5, lr}
 80070e6:	d10e      	bne.n	8007106 <__mcmp+0x2a>
 80070e8:	3314      	adds	r3, #20
 80070ea:	3114      	adds	r1, #20
 80070ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070fc:	4295      	cmp	r5, r2
 80070fe:	d003      	beq.n	8007108 <__mcmp+0x2c>
 8007100:	d205      	bcs.n	800710e <__mcmp+0x32>
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	42a3      	cmp	r3, r4
 800710a:	d3f3      	bcc.n	80070f4 <__mcmp+0x18>
 800710c:	e7fb      	b.n	8007106 <__mcmp+0x2a>
 800710e:	2001      	movs	r0, #1
 8007110:	e7f9      	b.n	8007106 <__mcmp+0x2a>
	...

08007114 <__mdiff>:
 8007114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4689      	mov	r9, r1
 800711a:	4606      	mov	r6, r0
 800711c:	4611      	mov	r1, r2
 800711e:	4648      	mov	r0, r9
 8007120:	4614      	mov	r4, r2
 8007122:	f7ff ffdb 	bl	80070dc <__mcmp>
 8007126:	1e05      	subs	r5, r0, #0
 8007128:	d112      	bne.n	8007150 <__mdiff+0x3c>
 800712a:	4629      	mov	r1, r5
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff fd5b 	bl	8006be8 <_Balloc>
 8007132:	4602      	mov	r2, r0
 8007134:	b928      	cbnz	r0, 8007142 <__mdiff+0x2e>
 8007136:	4b3f      	ldr	r3, [pc, #252]	@ (8007234 <__mdiff+0x120>)
 8007138:	f240 2137 	movw	r1, #567	@ 0x237
 800713c:	483e      	ldr	r0, [pc, #248]	@ (8007238 <__mdiff+0x124>)
 800713e:	f000 f991 	bl	8007464 <__assert_func>
 8007142:	2301      	movs	r3, #1
 8007144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007148:	4610      	mov	r0, r2
 800714a:	b003      	add	sp, #12
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	bfbc      	itt	lt
 8007152:	464b      	movlt	r3, r9
 8007154:	46a1      	movlt	r9, r4
 8007156:	4630      	mov	r0, r6
 8007158:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800715c:	bfba      	itte	lt
 800715e:	461c      	movlt	r4, r3
 8007160:	2501      	movlt	r5, #1
 8007162:	2500      	movge	r5, #0
 8007164:	f7ff fd40 	bl	8006be8 <_Balloc>
 8007168:	4602      	mov	r2, r0
 800716a:	b918      	cbnz	r0, 8007174 <__mdiff+0x60>
 800716c:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <__mdiff+0x120>)
 800716e:	f240 2145 	movw	r1, #581	@ 0x245
 8007172:	e7e3      	b.n	800713c <__mdiff+0x28>
 8007174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007178:	6926      	ldr	r6, [r4, #16]
 800717a:	60c5      	str	r5, [r0, #12]
 800717c:	f109 0310 	add.w	r3, r9, #16
 8007180:	f109 0514 	add.w	r5, r9, #20
 8007184:	f104 0e14 	add.w	lr, r4, #20
 8007188:	f100 0b14 	add.w	fp, r0, #20
 800718c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007190:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	46d9      	mov	r9, fp
 8007198:	f04f 0c00 	mov.w	ip, #0
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	fa1f f38a 	uxth.w	r3, sl
 80071ac:	4619      	mov	r1, r3
 80071ae:	b283      	uxth	r3, r0
 80071b0:	1acb      	subs	r3, r1, r3
 80071b2:	0c00      	lsrs	r0, r0, #16
 80071b4:	4463      	add	r3, ip
 80071b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071c4:	4576      	cmp	r6, lr
 80071c6:	f849 3b04 	str.w	r3, [r9], #4
 80071ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071ce:	d8e5      	bhi.n	800719c <__mdiff+0x88>
 80071d0:	1b33      	subs	r3, r6, r4
 80071d2:	3b15      	subs	r3, #21
 80071d4:	f023 0303 	bic.w	r3, r3, #3
 80071d8:	3415      	adds	r4, #21
 80071da:	3304      	adds	r3, #4
 80071dc:	42a6      	cmp	r6, r4
 80071de:	bf38      	it	cc
 80071e0:	2304      	movcc	r3, #4
 80071e2:	441d      	add	r5, r3
 80071e4:	445b      	add	r3, fp
 80071e6:	461e      	mov	r6, r3
 80071e8:	462c      	mov	r4, r5
 80071ea:	4544      	cmp	r4, r8
 80071ec:	d30e      	bcc.n	800720c <__mdiff+0xf8>
 80071ee:	f108 0103 	add.w	r1, r8, #3
 80071f2:	1b49      	subs	r1, r1, r5
 80071f4:	f021 0103 	bic.w	r1, r1, #3
 80071f8:	3d03      	subs	r5, #3
 80071fa:	45a8      	cmp	r8, r5
 80071fc:	bf38      	it	cc
 80071fe:	2100      	movcc	r1, #0
 8007200:	440b      	add	r3, r1
 8007202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007206:	b191      	cbz	r1, 800722e <__mdiff+0x11a>
 8007208:	6117      	str	r7, [r2, #16]
 800720a:	e79d      	b.n	8007148 <__mdiff+0x34>
 800720c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007210:	46e6      	mov	lr, ip
 8007212:	0c08      	lsrs	r0, r1, #16
 8007214:	fa1c fc81 	uxtah	ip, ip, r1
 8007218:	4471      	add	r1, lr
 800721a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800721e:	b289      	uxth	r1, r1
 8007220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007224:	f846 1b04 	str.w	r1, [r6], #4
 8007228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800722c:	e7dd      	b.n	80071ea <__mdiff+0xd6>
 800722e:	3f01      	subs	r7, #1
 8007230:	e7e7      	b.n	8007202 <__mdiff+0xee>
 8007232:	bf00      	nop
 8007234:	08007c38 	.word	0x08007c38
 8007238:	08007c49 	.word	0x08007c49

0800723c <__d2b>:
 800723c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007240:	460f      	mov	r7, r1
 8007242:	2101      	movs	r1, #1
 8007244:	ec59 8b10 	vmov	r8, r9, d0
 8007248:	4616      	mov	r6, r2
 800724a:	f7ff fccd 	bl	8006be8 <_Balloc>
 800724e:	4604      	mov	r4, r0
 8007250:	b930      	cbnz	r0, 8007260 <__d2b+0x24>
 8007252:	4602      	mov	r2, r0
 8007254:	4b23      	ldr	r3, [pc, #140]	@ (80072e4 <__d2b+0xa8>)
 8007256:	4824      	ldr	r0, [pc, #144]	@ (80072e8 <__d2b+0xac>)
 8007258:	f240 310f 	movw	r1, #783	@ 0x30f
 800725c:	f000 f902 	bl	8007464 <__assert_func>
 8007260:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007268:	b10d      	cbz	r5, 800726e <__d2b+0x32>
 800726a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	f1b8 0300 	subs.w	r3, r8, #0
 8007274:	d023      	beq.n	80072be <__d2b+0x82>
 8007276:	4668      	mov	r0, sp
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	f7ff fd7c 	bl	8006d76 <__lo0bits>
 800727e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007282:	b1d0      	cbz	r0, 80072ba <__d2b+0x7e>
 8007284:	f1c0 0320 	rsb	r3, r0, #32
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	430b      	orrs	r3, r1
 800728e:	40c2      	lsrs	r2, r0
 8007290:	6163      	str	r3, [r4, #20]
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	61a3      	str	r3, [r4, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf0c      	ite	eq
 800729c:	2201      	moveq	r2, #1
 800729e:	2202      	movne	r2, #2
 80072a0:	6122      	str	r2, [r4, #16]
 80072a2:	b1a5      	cbz	r5, 80072ce <__d2b+0x92>
 80072a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072a8:	4405      	add	r5, r0
 80072aa:	603d      	str	r5, [r7, #0]
 80072ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072b0:	6030      	str	r0, [r6, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	6161      	str	r1, [r4, #20]
 80072bc:	e7ea      	b.n	8007294 <__d2b+0x58>
 80072be:	a801      	add	r0, sp, #4
 80072c0:	f7ff fd59 	bl	8006d76 <__lo0bits>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	6163      	str	r3, [r4, #20]
 80072c8:	3020      	adds	r0, #32
 80072ca:	2201      	movs	r2, #1
 80072cc:	e7e8      	b.n	80072a0 <__d2b+0x64>
 80072ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072d6:	6038      	str	r0, [r7, #0]
 80072d8:	6918      	ldr	r0, [r3, #16]
 80072da:	f7ff fd2d 	bl	8006d38 <__hi0bits>
 80072de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072e2:	e7e5      	b.n	80072b0 <__d2b+0x74>
 80072e4:	08007c38 	.word	0x08007c38
 80072e8:	08007c49 	.word	0x08007c49

080072ec <__sflush_r>:
 80072ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	0716      	lsls	r6, r2, #28
 80072f6:	4605      	mov	r5, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	d454      	bmi.n	80073a6 <__sflush_r+0xba>
 80072fc:	684b      	ldr	r3, [r1, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dc02      	bgt.n	8007308 <__sflush_r+0x1c>
 8007302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd48      	ble.n	800739a <__sflush_r+0xae>
 8007308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800730a:	2e00      	cmp	r6, #0
 800730c:	d045      	beq.n	800739a <__sflush_r+0xae>
 800730e:	2300      	movs	r3, #0
 8007310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007314:	682f      	ldr	r7, [r5, #0]
 8007316:	6a21      	ldr	r1, [r4, #32]
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	d030      	beq.n	800737e <__sflush_r+0x92>
 800731c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	0759      	lsls	r1, r3, #29
 8007322:	d505      	bpl.n	8007330 <__sflush_r+0x44>
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800732a:	b10b      	cbz	r3, 8007330 <__sflush_r+0x44>
 800732c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	2300      	movs	r3, #0
 8007332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007334:	6a21      	ldr	r1, [r4, #32]
 8007336:	4628      	mov	r0, r5
 8007338:	47b0      	blx	r6
 800733a:	1c43      	adds	r3, r0, #1
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	d106      	bne.n	800734e <__sflush_r+0x62>
 8007340:	6829      	ldr	r1, [r5, #0]
 8007342:	291d      	cmp	r1, #29
 8007344:	d82b      	bhi.n	800739e <__sflush_r+0xb2>
 8007346:	4a2a      	ldr	r2, [pc, #168]	@ (80073f0 <__sflush_r+0x104>)
 8007348:	410a      	asrs	r2, r1
 800734a:	07d6      	lsls	r6, r2, #31
 800734c:	d427      	bmi.n	800739e <__sflush_r+0xb2>
 800734e:	2200      	movs	r2, #0
 8007350:	6062      	str	r2, [r4, #4]
 8007352:	04d9      	lsls	r1, r3, #19
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	d504      	bpl.n	8007364 <__sflush_r+0x78>
 800735a:	1c42      	adds	r2, r0, #1
 800735c:	d101      	bne.n	8007362 <__sflush_r+0x76>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	b903      	cbnz	r3, 8007364 <__sflush_r+0x78>
 8007362:	6560      	str	r0, [r4, #84]	@ 0x54
 8007364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007366:	602f      	str	r7, [r5, #0]
 8007368:	b1b9      	cbz	r1, 800739a <__sflush_r+0xae>
 800736a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800736e:	4299      	cmp	r1, r3
 8007370:	d002      	beq.n	8007378 <__sflush_r+0x8c>
 8007372:	4628      	mov	r0, r5
 8007374:	f7ff fb38 	bl	80069e8 <_free_r>
 8007378:	2300      	movs	r3, #0
 800737a:	6363      	str	r3, [r4, #52]	@ 0x34
 800737c:	e00d      	b.n	800739a <__sflush_r+0xae>
 800737e:	2301      	movs	r3, #1
 8007380:	4628      	mov	r0, r5
 8007382:	47b0      	blx	r6
 8007384:	4602      	mov	r2, r0
 8007386:	1c50      	adds	r0, r2, #1
 8007388:	d1c9      	bne.n	800731e <__sflush_r+0x32>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0c6      	beq.n	800731e <__sflush_r+0x32>
 8007390:	2b1d      	cmp	r3, #29
 8007392:	d001      	beq.n	8007398 <__sflush_r+0xac>
 8007394:	2b16      	cmp	r3, #22
 8007396:	d11e      	bne.n	80073d6 <__sflush_r+0xea>
 8007398:	602f      	str	r7, [r5, #0]
 800739a:	2000      	movs	r0, #0
 800739c:	e022      	b.n	80073e4 <__sflush_r+0xf8>
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	e01b      	b.n	80073de <__sflush_r+0xf2>
 80073a6:	690f      	ldr	r7, [r1, #16]
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	d0f6      	beq.n	800739a <__sflush_r+0xae>
 80073ac:	0793      	lsls	r3, r2, #30
 80073ae:	680e      	ldr	r6, [r1, #0]
 80073b0:	bf08      	it	eq
 80073b2:	694b      	ldreq	r3, [r1, #20]
 80073b4:	600f      	str	r7, [r1, #0]
 80073b6:	bf18      	it	ne
 80073b8:	2300      	movne	r3, #0
 80073ba:	eba6 0807 	sub.w	r8, r6, r7
 80073be:	608b      	str	r3, [r1, #8]
 80073c0:	f1b8 0f00 	cmp.w	r8, #0
 80073c4:	dde9      	ble.n	800739a <__sflush_r+0xae>
 80073c6:	6a21      	ldr	r1, [r4, #32]
 80073c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073ca:	4643      	mov	r3, r8
 80073cc:	463a      	mov	r2, r7
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b0      	blx	r6
 80073d2:	2800      	cmp	r0, #0
 80073d4:	dc08      	bgt.n	80073e8 <__sflush_r+0xfc>
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073de:	81a3      	strh	r3, [r4, #12]
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e8:	4407      	add	r7, r0
 80073ea:	eba8 0800 	sub.w	r8, r8, r0
 80073ee:	e7e7      	b.n	80073c0 <__sflush_r+0xd4>
 80073f0:	dfbffffe 	.word	0xdfbffffe

080073f4 <_fflush_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	690b      	ldr	r3, [r1, #16]
 80073f8:	4605      	mov	r5, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	b913      	cbnz	r3, 8007404 <_fflush_r+0x10>
 80073fe:	2500      	movs	r5, #0
 8007400:	4628      	mov	r0, r5
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	b118      	cbz	r0, 800740e <_fflush_r+0x1a>
 8007406:	6a03      	ldr	r3, [r0, #32]
 8007408:	b90b      	cbnz	r3, 800740e <_fflush_r+0x1a>
 800740a:	f7fe fb41 	bl	8005a90 <__sinit>
 800740e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f3      	beq.n	80073fe <_fflush_r+0xa>
 8007416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007418:	07d0      	lsls	r0, r2, #31
 800741a:	d404      	bmi.n	8007426 <_fflush_r+0x32>
 800741c:	0599      	lsls	r1, r3, #22
 800741e:	d402      	bmi.n	8007426 <_fflush_r+0x32>
 8007420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007422:	f7fe fc82 	bl	8005d2a <__retarget_lock_acquire_recursive>
 8007426:	4628      	mov	r0, r5
 8007428:	4621      	mov	r1, r4
 800742a:	f7ff ff5f 	bl	80072ec <__sflush_r>
 800742e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007430:	07da      	lsls	r2, r3, #31
 8007432:	4605      	mov	r5, r0
 8007434:	d4e4      	bmi.n	8007400 <_fflush_r+0xc>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	059b      	lsls	r3, r3, #22
 800743a:	d4e1      	bmi.n	8007400 <_fflush_r+0xc>
 800743c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743e:	f7fe fc75 	bl	8005d2c <__retarget_lock_release_recursive>
 8007442:	e7dd      	b.n	8007400 <_fflush_r+0xc>

08007444 <_sbrk_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d06      	ldr	r5, [pc, #24]	@ (8007460 <_sbrk_r+0x1c>)
 8007448:	2300      	movs	r3, #0
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	f7fa f82e 	bl	80014b0 <_sbrk>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_sbrk_r+0x1a>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_sbrk_r+0x1a>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20004dac 	.word	0x20004dac

08007464 <__assert_func>:
 8007464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007466:	4614      	mov	r4, r2
 8007468:	461a      	mov	r2, r3
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <__assert_func+0x2c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4605      	mov	r5, r0
 8007470:	68d8      	ldr	r0, [r3, #12]
 8007472:	b954      	cbnz	r4, 800748a <__assert_func+0x26>
 8007474:	4b07      	ldr	r3, [pc, #28]	@ (8007494 <__assert_func+0x30>)
 8007476:	461c      	mov	r4, r3
 8007478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800747c:	9100      	str	r1, [sp, #0]
 800747e:	462b      	mov	r3, r5
 8007480:	4905      	ldr	r1, [pc, #20]	@ (8007498 <__assert_func+0x34>)
 8007482:	f000 f841 	bl	8007508 <fiprintf>
 8007486:	f000 f851 	bl	800752c <abort>
 800748a:	4b04      	ldr	r3, [pc, #16]	@ (800749c <__assert_func+0x38>)
 800748c:	e7f4      	b.n	8007478 <__assert_func+0x14>
 800748e:	bf00      	nop
 8007490:	20000018 	.word	0x20000018
 8007494:	08007de5 	.word	0x08007de5
 8007498:	08007db7 	.word	0x08007db7
 800749c:	08007daa 	.word	0x08007daa

080074a0 <_calloc_r>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	fba1 5402 	umull	r5, r4, r1, r2
 80074a6:	b93c      	cbnz	r4, 80074b8 <_calloc_r+0x18>
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7ff fb11 	bl	8006ad0 <_malloc_r>
 80074ae:	4606      	mov	r6, r0
 80074b0:	b928      	cbnz	r0, 80074be <_calloc_r+0x1e>
 80074b2:	2600      	movs	r6, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	220c      	movs	r2, #12
 80074ba:	6002      	str	r2, [r0, #0]
 80074bc:	e7f9      	b.n	80074b2 <_calloc_r+0x12>
 80074be:	462a      	mov	r2, r5
 80074c0:	4621      	mov	r1, r4
 80074c2:	f7fe fb5e 	bl	8005b82 <memset>
 80074c6:	e7f5      	b.n	80074b4 <_calloc_r+0x14>

080074c8 <__ascii_mbtowc>:
 80074c8:	b082      	sub	sp, #8
 80074ca:	b901      	cbnz	r1, 80074ce <__ascii_mbtowc+0x6>
 80074cc:	a901      	add	r1, sp, #4
 80074ce:	b142      	cbz	r2, 80074e2 <__ascii_mbtowc+0x1a>
 80074d0:	b14b      	cbz	r3, 80074e6 <__ascii_mbtowc+0x1e>
 80074d2:	7813      	ldrb	r3, [r2, #0]
 80074d4:	600b      	str	r3, [r1, #0]
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	1e10      	subs	r0, r2, #0
 80074da:	bf18      	it	ne
 80074dc:	2001      	movne	r0, #1
 80074de:	b002      	add	sp, #8
 80074e0:	4770      	bx	lr
 80074e2:	4610      	mov	r0, r2
 80074e4:	e7fb      	b.n	80074de <__ascii_mbtowc+0x16>
 80074e6:	f06f 0001 	mvn.w	r0, #1
 80074ea:	e7f8      	b.n	80074de <__ascii_mbtowc+0x16>

080074ec <__ascii_wctomb>:
 80074ec:	4603      	mov	r3, r0
 80074ee:	4608      	mov	r0, r1
 80074f0:	b141      	cbz	r1, 8007504 <__ascii_wctomb+0x18>
 80074f2:	2aff      	cmp	r2, #255	@ 0xff
 80074f4:	d904      	bls.n	8007500 <__ascii_wctomb+0x14>
 80074f6:	228a      	movs	r2, #138	@ 0x8a
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	4770      	bx	lr
 8007500:	700a      	strb	r2, [r1, #0]
 8007502:	2001      	movs	r0, #1
 8007504:	4770      	bx	lr
	...

08007508 <fiprintf>:
 8007508:	b40e      	push	{r1, r2, r3}
 800750a:	b503      	push	{r0, r1, lr}
 800750c:	4601      	mov	r1, r0
 800750e:	ab03      	add	r3, sp, #12
 8007510:	4805      	ldr	r0, [pc, #20]	@ (8007528 <fiprintf+0x20>)
 8007512:	f853 2b04 	ldr.w	r2, [r3], #4
 8007516:	6800      	ldr	r0, [r0, #0]
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	f000 f837 	bl	800758c <_vfiprintf_r>
 800751e:	b002      	add	sp, #8
 8007520:	f85d eb04 	ldr.w	lr, [sp], #4
 8007524:	b003      	add	sp, #12
 8007526:	4770      	bx	lr
 8007528:	20000018 	.word	0x20000018

0800752c <abort>:
 800752c:	b508      	push	{r3, lr}
 800752e:	2006      	movs	r0, #6
 8007530:	f000 fa00 	bl	8007934 <raise>
 8007534:	2001      	movs	r0, #1
 8007536:	f7f9 ff5f 	bl	80013f8 <_exit>

0800753a <__sfputc_r>:
 800753a:	6893      	ldr	r3, [r2, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	b410      	push	{r4}
 8007542:	6093      	str	r3, [r2, #8]
 8007544:	da08      	bge.n	8007558 <__sfputc_r+0x1e>
 8007546:	6994      	ldr	r4, [r2, #24]
 8007548:	42a3      	cmp	r3, r4
 800754a:	db01      	blt.n	8007550 <__sfputc_r+0x16>
 800754c:	290a      	cmp	r1, #10
 800754e:	d103      	bne.n	8007558 <__sfputc_r+0x1e>
 8007550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007554:	f000 b932 	b.w	80077bc <__swbuf_r>
 8007558:	6813      	ldr	r3, [r2, #0]
 800755a:	1c58      	adds	r0, r3, #1
 800755c:	6010      	str	r0, [r2, #0]
 800755e:	7019      	strb	r1, [r3, #0]
 8007560:	4608      	mov	r0, r1
 8007562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007566:	4770      	bx	lr

08007568 <__sfputs_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	4606      	mov	r6, r0
 800756c:	460f      	mov	r7, r1
 800756e:	4614      	mov	r4, r2
 8007570:	18d5      	adds	r5, r2, r3
 8007572:	42ac      	cmp	r4, r5
 8007574:	d101      	bne.n	800757a <__sfputs_r+0x12>
 8007576:	2000      	movs	r0, #0
 8007578:	e007      	b.n	800758a <__sfputs_r+0x22>
 800757a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757e:	463a      	mov	r2, r7
 8007580:	4630      	mov	r0, r6
 8007582:	f7ff ffda 	bl	800753a <__sfputc_r>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d1f3      	bne.n	8007572 <__sfputs_r+0xa>
 800758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800758c <_vfiprintf_r>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	460d      	mov	r5, r1
 8007592:	b09d      	sub	sp, #116	@ 0x74
 8007594:	4614      	mov	r4, r2
 8007596:	4698      	mov	r8, r3
 8007598:	4606      	mov	r6, r0
 800759a:	b118      	cbz	r0, 80075a4 <_vfiprintf_r+0x18>
 800759c:	6a03      	ldr	r3, [r0, #32]
 800759e:	b90b      	cbnz	r3, 80075a4 <_vfiprintf_r+0x18>
 80075a0:	f7fe fa76 	bl	8005a90 <__sinit>
 80075a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	d405      	bmi.n	80075b6 <_vfiprintf_r+0x2a>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	059a      	lsls	r2, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_vfiprintf_r+0x2a>
 80075b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b2:	f7fe fbba 	bl	8005d2a <__retarget_lock_acquire_recursive>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	071b      	lsls	r3, r3, #28
 80075ba:	d501      	bpl.n	80075c0 <_vfiprintf_r+0x34>
 80075bc:	692b      	ldr	r3, [r5, #16]
 80075be:	b99b      	cbnz	r3, 80075e8 <_vfiprintf_r+0x5c>
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 f938 	bl	8007838 <__swsetup_r>
 80075c8:	b170      	cbz	r0, 80075e8 <_vfiprintf_r+0x5c>
 80075ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075cc:	07dc      	lsls	r4, r3, #31
 80075ce:	d504      	bpl.n	80075da <_vfiprintf_r+0x4e>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b01d      	add	sp, #116	@ 0x74
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	0598      	lsls	r0, r3, #22
 80075de:	d4f7      	bmi.n	80075d0 <_vfiprintf_r+0x44>
 80075e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075e2:	f7fe fba3 	bl	8005d2c <__retarget_lock_release_recursive>
 80075e6:	e7f3      	b.n	80075d0 <_vfiprintf_r+0x44>
 80075e8:	2300      	movs	r3, #0
 80075ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ec:	2320      	movs	r3, #32
 80075ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075f6:	2330      	movs	r3, #48	@ 0x30
 80075f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077a8 <_vfiprintf_r+0x21c>
 80075fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007600:	f04f 0901 	mov.w	r9, #1
 8007604:	4623      	mov	r3, r4
 8007606:	469a      	mov	sl, r3
 8007608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800760c:	b10a      	cbz	r2, 8007612 <_vfiprintf_r+0x86>
 800760e:	2a25      	cmp	r2, #37	@ 0x25
 8007610:	d1f9      	bne.n	8007606 <_vfiprintf_r+0x7a>
 8007612:	ebba 0b04 	subs.w	fp, sl, r4
 8007616:	d00b      	beq.n	8007630 <_vfiprintf_r+0xa4>
 8007618:	465b      	mov	r3, fp
 800761a:	4622      	mov	r2, r4
 800761c:	4629      	mov	r1, r5
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ffa2 	bl	8007568 <__sfputs_r>
 8007624:	3001      	adds	r0, #1
 8007626:	f000 80a7 	beq.w	8007778 <_vfiprintf_r+0x1ec>
 800762a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800762c:	445a      	add	r2, fp
 800762e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007630:	f89a 3000 	ldrb.w	r3, [sl]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 809f 	beq.w	8007778 <_vfiprintf_r+0x1ec>
 800763a:	2300      	movs	r3, #0
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007644:	f10a 0a01 	add.w	sl, sl, #1
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	9307      	str	r3, [sp, #28]
 800764c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007650:	931a      	str	r3, [sp, #104]	@ 0x68
 8007652:	4654      	mov	r4, sl
 8007654:	2205      	movs	r2, #5
 8007656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765a:	4853      	ldr	r0, [pc, #332]	@ (80077a8 <_vfiprintf_r+0x21c>)
 800765c:	f7f8 fdc0 	bl	80001e0 <memchr>
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	b9d8      	cbnz	r0, 800769c <_vfiprintf_r+0x110>
 8007664:	06d1      	lsls	r1, r2, #27
 8007666:	bf44      	itt	mi
 8007668:	2320      	movmi	r3, #32
 800766a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800766e:	0713      	lsls	r3, r2, #28
 8007670:	bf44      	itt	mi
 8007672:	232b      	movmi	r3, #43	@ 0x2b
 8007674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007678:	f89a 3000 	ldrb.w	r3, [sl]
 800767c:	2b2a      	cmp	r3, #42	@ 0x2a
 800767e:	d015      	beq.n	80076ac <_vfiprintf_r+0x120>
 8007680:	9a07      	ldr	r2, [sp, #28]
 8007682:	4654      	mov	r4, sl
 8007684:	2000      	movs	r0, #0
 8007686:	f04f 0c0a 	mov.w	ip, #10
 800768a:	4621      	mov	r1, r4
 800768c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007690:	3b30      	subs	r3, #48	@ 0x30
 8007692:	2b09      	cmp	r3, #9
 8007694:	d94b      	bls.n	800772e <_vfiprintf_r+0x1a2>
 8007696:	b1b0      	cbz	r0, 80076c6 <_vfiprintf_r+0x13a>
 8007698:	9207      	str	r2, [sp, #28]
 800769a:	e014      	b.n	80076c6 <_vfiprintf_r+0x13a>
 800769c:	eba0 0308 	sub.w	r3, r0, r8
 80076a0:	fa09 f303 	lsl.w	r3, r9, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	46a2      	mov	sl, r4
 80076aa:	e7d2      	b.n	8007652 <_vfiprintf_r+0xc6>
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	1d19      	adds	r1, r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	9103      	str	r1, [sp, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfbb      	ittet	lt
 80076b8:	425b      	neglt	r3, r3
 80076ba:	f042 0202 	orrlt.w	r2, r2, #2
 80076be:	9307      	strge	r3, [sp, #28]
 80076c0:	9307      	strlt	r3, [sp, #28]
 80076c2:	bfb8      	it	lt
 80076c4:	9204      	strlt	r2, [sp, #16]
 80076c6:	7823      	ldrb	r3, [r4, #0]
 80076c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ca:	d10a      	bne.n	80076e2 <_vfiprintf_r+0x156>
 80076cc:	7863      	ldrb	r3, [r4, #1]
 80076ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d0:	d132      	bne.n	8007738 <_vfiprintf_r+0x1ac>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	1d1a      	adds	r2, r3, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	9203      	str	r2, [sp, #12]
 80076da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076de:	3402      	adds	r4, #2
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077b8 <_vfiprintf_r+0x22c>
 80076e6:	7821      	ldrb	r1, [r4, #0]
 80076e8:	2203      	movs	r2, #3
 80076ea:	4650      	mov	r0, sl
 80076ec:	f7f8 fd78 	bl	80001e0 <memchr>
 80076f0:	b138      	cbz	r0, 8007702 <_vfiprintf_r+0x176>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	eba0 000a 	sub.w	r0, r0, sl
 80076f8:	2240      	movs	r2, #64	@ 0x40
 80076fa:	4082      	lsls	r2, r0
 80076fc:	4313      	orrs	r3, r2
 80076fe:	3401      	adds	r4, #1
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4829      	ldr	r0, [pc, #164]	@ (80077ac <_vfiprintf_r+0x220>)
 8007708:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800770c:	2206      	movs	r2, #6
 800770e:	f7f8 fd67 	bl	80001e0 <memchr>
 8007712:	2800      	cmp	r0, #0
 8007714:	d03f      	beq.n	8007796 <_vfiprintf_r+0x20a>
 8007716:	4b26      	ldr	r3, [pc, #152]	@ (80077b0 <_vfiprintf_r+0x224>)
 8007718:	bb1b      	cbnz	r3, 8007762 <_vfiprintf_r+0x1d6>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	3307      	adds	r3, #7
 800771e:	f023 0307 	bic.w	r3, r3, #7
 8007722:	3308      	adds	r3, #8
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	443b      	add	r3, r7
 800772a:	9309      	str	r3, [sp, #36]	@ 0x24
 800772c:	e76a      	b.n	8007604 <_vfiprintf_r+0x78>
 800772e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007732:	460c      	mov	r4, r1
 8007734:	2001      	movs	r0, #1
 8007736:	e7a8      	b.n	800768a <_vfiprintf_r+0xfe>
 8007738:	2300      	movs	r3, #0
 800773a:	3401      	adds	r4, #1
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	4619      	mov	r1, r3
 8007740:	f04f 0c0a 	mov.w	ip, #10
 8007744:	4620      	mov	r0, r4
 8007746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800774a:	3a30      	subs	r2, #48	@ 0x30
 800774c:	2a09      	cmp	r2, #9
 800774e:	d903      	bls.n	8007758 <_vfiprintf_r+0x1cc>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0c6      	beq.n	80076e2 <_vfiprintf_r+0x156>
 8007754:	9105      	str	r1, [sp, #20]
 8007756:	e7c4      	b.n	80076e2 <_vfiprintf_r+0x156>
 8007758:	fb0c 2101 	mla	r1, ip, r1, r2
 800775c:	4604      	mov	r4, r0
 800775e:	2301      	movs	r3, #1
 8007760:	e7f0      	b.n	8007744 <_vfiprintf_r+0x1b8>
 8007762:	ab03      	add	r3, sp, #12
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	462a      	mov	r2, r5
 8007768:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <_vfiprintf_r+0x228>)
 800776a:	a904      	add	r1, sp, #16
 800776c:	4630      	mov	r0, r6
 800776e:	f7fd fd4b 	bl	8005208 <_printf_float>
 8007772:	4607      	mov	r7, r0
 8007774:	1c78      	adds	r0, r7, #1
 8007776:	d1d6      	bne.n	8007726 <_vfiprintf_r+0x19a>
 8007778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d405      	bmi.n	800778a <_vfiprintf_r+0x1fe>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	059a      	lsls	r2, r3, #22
 8007782:	d402      	bmi.n	800778a <_vfiprintf_r+0x1fe>
 8007784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007786:	f7fe fad1 	bl	8005d2c <__retarget_lock_release_recursive>
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	065b      	lsls	r3, r3, #25
 800778e:	f53f af1f 	bmi.w	80075d0 <_vfiprintf_r+0x44>
 8007792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007794:	e71e      	b.n	80075d4 <_vfiprintf_r+0x48>
 8007796:	ab03      	add	r3, sp, #12
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	462a      	mov	r2, r5
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <_vfiprintf_r+0x228>)
 800779e:	a904      	add	r1, sp, #16
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7fd ffc9 	bl	8005738 <_printf_i>
 80077a6:	e7e4      	b.n	8007772 <_vfiprintf_r+0x1e6>
 80077a8:	08007ee7 	.word	0x08007ee7
 80077ac:	08007ef1 	.word	0x08007ef1
 80077b0:	08005209 	.word	0x08005209
 80077b4:	08007569 	.word	0x08007569
 80077b8:	08007eed 	.word	0x08007eed

080077bc <__swbuf_r>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	460e      	mov	r6, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	4605      	mov	r5, r0
 80077c4:	b118      	cbz	r0, 80077ce <__swbuf_r+0x12>
 80077c6:	6a03      	ldr	r3, [r0, #32]
 80077c8:	b90b      	cbnz	r3, 80077ce <__swbuf_r+0x12>
 80077ca:	f7fe f961 	bl	8005a90 <__sinit>
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	071a      	lsls	r2, r3, #28
 80077d6:	d501      	bpl.n	80077dc <__swbuf_r+0x20>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b943      	cbnz	r3, 80077ee <__swbuf_r+0x32>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 f82a 	bl	8007838 <__swsetup_r>
 80077e4:	b118      	cbz	r0, 80077ee <__swbuf_r+0x32>
 80077e6:	f04f 37ff 	mov.w	r7, #4294967295
 80077ea:	4638      	mov	r0, r7
 80077ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	1a98      	subs	r0, r3, r2
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	b2f6      	uxtb	r6, r6
 80077f8:	4283      	cmp	r3, r0
 80077fa:	4637      	mov	r7, r6
 80077fc:	dc05      	bgt.n	800780a <__swbuf_r+0x4e>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f7ff fdf7 	bl	80073f4 <_fflush_r>
 8007806:	2800      	cmp	r0, #0
 8007808:	d1ed      	bne.n	80077e6 <__swbuf_r+0x2a>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	3b01      	subs	r3, #1
 800780e:	60a3      	str	r3, [r4, #8]
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	701e      	strb	r6, [r3, #0]
 8007818:	6962      	ldr	r2, [r4, #20]
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	429a      	cmp	r2, r3
 800781e:	d004      	beq.n	800782a <__swbuf_r+0x6e>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d5e1      	bpl.n	80077ea <__swbuf_r+0x2e>
 8007826:	2e0a      	cmp	r6, #10
 8007828:	d1df      	bne.n	80077ea <__swbuf_r+0x2e>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f7ff fde1 	bl	80073f4 <_fflush_r>
 8007832:	2800      	cmp	r0, #0
 8007834:	d0d9      	beq.n	80077ea <__swbuf_r+0x2e>
 8007836:	e7d6      	b.n	80077e6 <__swbuf_r+0x2a>

08007838 <__swsetup_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4b29      	ldr	r3, [pc, #164]	@ (80078e0 <__swsetup_r+0xa8>)
 800783c:	4605      	mov	r5, r0
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	460c      	mov	r4, r1
 8007842:	b118      	cbz	r0, 800784c <__swsetup_r+0x14>
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b90b      	cbnz	r3, 800784c <__swsetup_r+0x14>
 8007848:	f7fe f922 	bl	8005a90 <__sinit>
 800784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007850:	0719      	lsls	r1, r3, #28
 8007852:	d422      	bmi.n	800789a <__swsetup_r+0x62>
 8007854:	06da      	lsls	r2, r3, #27
 8007856:	d407      	bmi.n	8007868 <__swsetup_r+0x30>
 8007858:	2209      	movs	r2, #9
 800785a:	602a      	str	r2, [r5, #0]
 800785c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	f04f 30ff 	mov.w	r0, #4294967295
 8007866:	e033      	b.n	80078d0 <__swsetup_r+0x98>
 8007868:	0758      	lsls	r0, r3, #29
 800786a:	d512      	bpl.n	8007892 <__swsetup_r+0x5a>
 800786c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786e:	b141      	cbz	r1, 8007882 <__swsetup_r+0x4a>
 8007870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <__swsetup_r+0x46>
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff f8b5 	bl	80069e8 <_free_r>
 800787e:	2300      	movs	r3, #0
 8007880:	6363      	str	r3, [r4, #52]	@ 0x34
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	2300      	movs	r3, #0
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0308 	orr.w	r3, r3, #8
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	b94b      	cbnz	r3, 80078b2 <__swsetup_r+0x7a>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a8:	d003      	beq.n	80078b2 <__swsetup_r+0x7a>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 f883 	bl	80079b8 <__smakebuf_r>
 80078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b6:	f013 0201 	ands.w	r2, r3, #1
 80078ba:	d00a      	beq.n	80078d2 <__swsetup_r+0x9a>
 80078bc:	2200      	movs	r2, #0
 80078be:	60a2      	str	r2, [r4, #8]
 80078c0:	6962      	ldr	r2, [r4, #20]
 80078c2:	4252      	negs	r2, r2
 80078c4:	61a2      	str	r2, [r4, #24]
 80078c6:	6922      	ldr	r2, [r4, #16]
 80078c8:	b942      	cbnz	r2, 80078dc <__swsetup_r+0xa4>
 80078ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ce:	d1c5      	bne.n	800785c <__swsetup_r+0x24>
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	0799      	lsls	r1, r3, #30
 80078d4:	bf58      	it	pl
 80078d6:	6962      	ldrpl	r2, [r4, #20]
 80078d8:	60a2      	str	r2, [r4, #8]
 80078da:	e7f4      	b.n	80078c6 <__swsetup_r+0x8e>
 80078dc:	2000      	movs	r0, #0
 80078de:	e7f7      	b.n	80078d0 <__swsetup_r+0x98>
 80078e0:	20000018 	.word	0x20000018

080078e4 <_raise_r>:
 80078e4:	291f      	cmp	r1, #31
 80078e6:	b538      	push	{r3, r4, r5, lr}
 80078e8:	4605      	mov	r5, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	d904      	bls.n	80078f8 <_raise_r+0x14>
 80078ee:	2316      	movs	r3, #22
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078fa:	b112      	cbz	r2, 8007902 <_raise_r+0x1e>
 80078fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007900:	b94b      	cbnz	r3, 8007916 <_raise_r+0x32>
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f830 	bl	8007968 <_getpid_r>
 8007908:	4622      	mov	r2, r4
 800790a:	4601      	mov	r1, r0
 800790c:	4628      	mov	r0, r5
 800790e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007912:	f000 b817 	b.w	8007944 <_kill_r>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d00a      	beq.n	8007930 <_raise_r+0x4c>
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	d103      	bne.n	8007926 <_raise_r+0x42>
 800791e:	2316      	movs	r3, #22
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	2001      	movs	r0, #1
 8007924:	e7e7      	b.n	80078f6 <_raise_r+0x12>
 8007926:	2100      	movs	r1, #0
 8007928:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800792c:	4620      	mov	r0, r4
 800792e:	4798      	blx	r3
 8007930:	2000      	movs	r0, #0
 8007932:	e7e0      	b.n	80078f6 <_raise_r+0x12>

08007934 <raise>:
 8007934:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <raise+0xc>)
 8007936:	4601      	mov	r1, r0
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f7ff bfd3 	b.w	80078e4 <_raise_r>
 800793e:	bf00      	nop
 8007940:	20000018 	.word	0x20000018

08007944 <_kill_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	@ (8007964 <_kill_r+0x20>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	f7f9 fd41 	bl	80013d8 <_kill>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	d102      	bne.n	8007960 <_kill_r+0x1c>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	b103      	cbz	r3, 8007960 <_kill_r+0x1c>
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	bf00      	nop
 8007964:	20004dac 	.word	0x20004dac

08007968 <_getpid_r>:
 8007968:	f7f9 bd2e 	b.w	80013c8 <_getpid>

0800796c <__swhatbuf_r>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	2900      	cmp	r1, #0
 8007976:	b096      	sub	sp, #88	@ 0x58
 8007978:	4615      	mov	r5, r2
 800797a:	461e      	mov	r6, r3
 800797c:	da0d      	bge.n	800799a <__swhatbuf_r+0x2e>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007984:	f04f 0100 	mov.w	r1, #0
 8007988:	bf14      	ite	ne
 800798a:	2340      	movne	r3, #64	@ 0x40
 800798c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007990:	2000      	movs	r0, #0
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	b016      	add	sp, #88	@ 0x58
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	466a      	mov	r2, sp
 800799c:	f000 f848 	bl	8007a30 <_fstat_r>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dbec      	blt.n	800797e <__swhatbuf_r+0x12>
 80079a4:	9901      	ldr	r1, [sp, #4]
 80079a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ae:	4259      	negs	r1, r3
 80079b0:	4159      	adcs	r1, r3
 80079b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b6:	e7eb      	b.n	8007990 <__swhatbuf_r+0x24>

080079b8 <__smakebuf_r>:
 80079b8:	898b      	ldrh	r3, [r1, #12]
 80079ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079bc:	079d      	lsls	r5, r3, #30
 80079be:	4606      	mov	r6, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	d507      	bpl.n	80079d4 <__smakebuf_r+0x1c>
 80079c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	6123      	str	r3, [r4, #16]
 80079cc:	2301      	movs	r3, #1
 80079ce:	6163      	str	r3, [r4, #20]
 80079d0:	b003      	add	sp, #12
 80079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d4:	ab01      	add	r3, sp, #4
 80079d6:	466a      	mov	r2, sp
 80079d8:	f7ff ffc8 	bl	800796c <__swhatbuf_r>
 80079dc:	9f00      	ldr	r7, [sp, #0]
 80079de:	4605      	mov	r5, r0
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff f874 	bl	8006ad0 <_malloc_r>
 80079e8:	b948      	cbnz	r0, 80079fe <__smakebuf_r+0x46>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	059a      	lsls	r2, r3, #22
 80079f0:	d4ee      	bmi.n	80079d0 <__smakebuf_r+0x18>
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	e7e2      	b.n	80079c4 <__smakebuf_r+0xc>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	6020      	str	r0, [r4, #0]
 8007a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a0e:	b15b      	cbz	r3, 8007a28 <__smakebuf_r+0x70>
 8007a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 f81d 	bl	8007a54 <_isatty_r>
 8007a1a:	b128      	cbz	r0, 8007a28 <__smakebuf_r+0x70>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	431d      	orrs	r5, r3
 8007a2c:	81a5      	strh	r5, [r4, #12]
 8007a2e:	e7cf      	b.n	80079d0 <__smakebuf_r+0x18>

08007a30 <_fstat_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	@ (8007a50 <_fstat_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7f9 fd0f 	bl	8001460 <_fstat>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_fstat_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_fstat_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	20004dac 	.word	0x20004dac

08007a54 <_isatty_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	@ (8007a70 <_isatty_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7f9 fd0e 	bl	8001480 <_isatty>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_isatty_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_isatty_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20004dac 	.word	0x20004dac

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
