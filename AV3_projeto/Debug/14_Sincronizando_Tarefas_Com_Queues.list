
14_Sincronizando_Tarefas_Com_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b2c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005ccc  08005ccc  00006ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e04  08005e04  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e0c  08005e0c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  08005e74  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  08005e74  00007c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cf9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c2  00000000  00000000  0001ed89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00022250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8f  00000000  00000000  00023660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ac4  00000000  00000000  000245ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b07  00000000  00000000  000280b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098228  00000000  00000000  0003ebba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  000d6e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000dc738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cb4 	.word	0x08005cb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005cb4 	.word	0x08005cb4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_GPIO_Init+0xd0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <MX_GPIO_Init+0xd0>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xd0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005fc:	f000 fdde 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000606:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_GPIO_Init+0xd8>)
 8000618:	f000 fc4c 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <MX_GPIO_Init+0xd4>)
 8000634:	f000 fc3e 	bl	8000eb4 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000
 8000648:	40020800 	.word	0x40020800

0800064c <main>:


QueueHandle_t yearQueue;

int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8


  HAL_Init();
 8000652:	f000 fb0b 	bl	8000c6c <HAL_Init>
  SystemClock_Config();
 8000656:	f000 f8dd 	bl	8000814 <SystemClock_Config>
  MX_GPIO_Init();
 800065a:	f7ff ff89 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 fa69 	bl	8000b34 <MX_USART2_UART_Init>

  yearQueue = xQueueCreate(5,sizeof(int32_t));
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	2005      	movs	r0, #5
 8000668:	f002 fb07 	bl	8002c7a <xQueueGenericCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <main+0x6c>)
 8000670:	6013      	str	r3, [r2, #0]

  /* Função que cria uma tarefa para controle do LED */
  xTaskCreate(ReceiverTask,"Tarefa_Receptor",128,NULL,osPriorityAboveNormal,NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2320      	movs	r3, #32
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	490f      	ldr	r1, [pc, #60]	@ (80006bc <main+0x70>)
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <main+0x74>)
 8000682:	f002 ffa9 	bl	80035d8 <xTaskCreate>

  xTaskCreate(SenderTask1,"Tarefa_Transmissor1",128,NULL,osPriorityNormal,NULL);
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2318      	movs	r3, #24
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <main+0x78>)
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <main+0x7c>)
 8000696:	f002 ff9f 	bl	80035d8 <xTaskCreate>

  xTaskCreate(SenderTask2,"Tarefa_Transmissor2",128,NULL,osPriorityNormal,NULL);
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2318      	movs	r3, #24
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	4909      	ldr	r1, [pc, #36]	@ (80006cc <main+0x80>)
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <main+0x84>)
 80006aa:	f002 ff95 	bl	80035d8 <xTaskCreate>


  vTaskStartScheduler(); /* Inicia o escalonador de tarefas - Scheduler */
 80006ae:	f003 f927 	bl	8003900 <vTaskStartScheduler>



  while (1)
 80006b2:	bf00      	nop
 80006b4:	e7fd      	b.n	80006b2 <main+0x66>
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	08005ccc 	.word	0x08005ccc
 80006c0:	0800079d 	.word	0x0800079d
 80006c4:	08005cdc 	.word	0x08005cdc
 80006c8:	080006d5 	.word	0x080006d5
 80006cc:	08005cf0 	.word	0x08005cf0
 80006d0:	08000739 	.word	0x08000739

080006d4 <SenderTask1>:




void SenderTask1(void * pvParameters)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b090      	sub	sp, #64	@ 0x40
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	int32_t value_to_send = 2222;
 80006dc:	f640 03ae 	movw	r3, #2222	@ 0x8ae
 80006e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	BaseType_t qStatus;

    while (1)
    {
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <SenderTask1+0x58>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80006ea:	2300      	movs	r3, #0
 80006ec:	2200      	movs	r2, #0
 80006ee:	f002 fb23 	bl	8002d38 <xQueueGenericSend>
 80006f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (qStatus != pdPASS)
 80006f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d012      	beq.n	8000720 <SenderTask1+0x4c>
		{
			uint8_t txt1[]="Erro: dado da tarefa 1 nao pode ser enviado\n";
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <SenderTask1+0x5c>)
 80006fc:	f107 0408 	add.w	r4, r7, #8
 8000700:	461d      	mov	r5, r3
 8000702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800070e:	c407      	stmia	r4!, {r0, r1, r2}
 8000710:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 8000712:	f107 0108 	add.w	r1, r7, #8
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	222d      	movs	r2, #45	@ 0x2d
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <SenderTask1+0x60>)
 800071c:	f001 fcf6 	bl	800210c <HAL_UART_Transmit>
		}
		osDelay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000724:	f002 f8be 	bl	80028a4 <osDelay>
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 8000728:	e7db      	b.n	80006e2 <SenderTask1+0xe>
 800072a:	bf00      	nop
 800072c:	2000007c 	.word	0x2000007c
 8000730:	08005d04 	.word	0x08005d04
 8000734:	200000cc 	.word	0x200000cc

08000738 <SenderTask2>:
    }
}

void SenderTask2(void * pvParameters)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b090      	sub	sp, #64	@ 0x40
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	int32_t value_to_send = 5555;
 8000740:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
	BaseType_t qStatus;

    while (1)
    {
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <SenderTask2+0x58>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800074e:	2300      	movs	r3, #0
 8000750:	2200      	movs	r2, #0
 8000752:	f002 faf1 	bl	8002d38 <xQueueGenericSend>
 8000756:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (qStatus != pdPASS)
 8000758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800075a:	2b01      	cmp	r3, #1
 800075c:	d012      	beq.n	8000784 <SenderTask2+0x4c>
		{
			uint8_t txt1[]="Erro: dado da tarefa 2 nao pode ser enviado\n";
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <SenderTask2+0x5c>)
 8000760:	f107 0408 	add.w	r4, r7, #8
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000772:	c407      	stmia	r4!, {r0, r1, r2}
 8000774:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	2364      	movs	r3, #100	@ 0x64
 800077c:	222d      	movs	r2, #45	@ 0x2d
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <SenderTask2+0x60>)
 8000780:	f001 fcc4 	bl	800210c <HAL_UART_Transmit>
		}
		osDelay(500);
 8000784:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000788:	f002 f88c 	bl	80028a4 <osDelay>
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 800078c:	e7db      	b.n	8000746 <SenderTask2+0xe>
 800078e:	bf00      	nop
 8000790:	2000007c 	.word	0x2000007c
 8000794:	08005d34 	.word	0x08005d34
 8000798:	200000cc 	.word	0x200000cc

0800079c <ReceiverTask>:
    }
}


void ReceiverTask(void * pvParameters)
{
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

	int value_received;
	const TickType_t wait_time = pdMS_TO_TICKS(800);
 80007a4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80007a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	BaseType_t qStatus;
	uint8_t txt1[28];

    while (1)
    {
        qStatus = xQueueReceive(yearQueue, &value_received, wait_time);
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <ReceiverTask+0x68>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80007b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fc5f 	bl	8003078 <xQueueReceive>
 80007ba:	64b8      	str	r0, [r7, #72]	@ 0x48
        if(qStatus == pdPASS)
 80007bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10e      	bne.n	80007e0 <ReceiverTask+0x44>
        {
        	sprintf((char*)txt1, "o valor recebido foi: %d\n", value_received);
 80007c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80007c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c8:	490f      	ldr	r1, [pc, #60]	@ (8000808 <ReceiverTask+0x6c>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fd7c 	bl	80052c8 <siprintf>
        	HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 80007d0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80007d4:	2364      	movs	r3, #100	@ 0x64
 80007d6:	221c      	movs	r2, #28
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <ReceiverTask+0x70>)
 80007da:	f001 fc97 	bl	800210c <HAL_UART_Transmit>
 80007de:	e7e4      	b.n	80007aa <ReceiverTask+0xe>
        }
        else
        {
        	uint8_t txt1[]="Erro, nao foi possivel receber\n";
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <ReceiverTask+0x74>)
 80007e2:	f107 0408 	add.w	r4, r7, #8
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 80007f4:	f107 0108 	add.w	r1, r7, #8
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	2220      	movs	r2, #32
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <ReceiverTask+0x70>)
 80007fe:	f001 fc85 	bl	800210c <HAL_UART_Transmit>
        qStatus = xQueueReceive(yearQueue, &value_received, wait_time);
 8000802:	e7d2      	b.n	80007aa <ReceiverTask+0xe>
 8000804:	2000007c 	.word	0x2000007c
 8000808:	08005d64 	.word	0x08005d64
 800080c:	200000cc 	.word	0x200000cc
 8000810:	08005d80 	.word	0x08005d80

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fd70 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <SystemClock_Config+0xd0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <SystemClock_Config+0xd0>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000860:	4a21      	ldr	r2, [pc, #132]	@ (80008e8 <SystemClock_Config+0xd4>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000888:	2310      	movs	r3, #16
 800088a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800088c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000890:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000892:	2304      	movs	r3, #4
 8000894:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000896:	2307      	movs	r3, #7
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fca6 	bl	80011f0 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008aa:	f000 f831 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 ff08 	bl	80016e0 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f81b 	bl	8000910 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	@ 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f9d7 	bl	8000cb0 <HAL_IncTick>
  }

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010000 	.word	0x40010000

08000910 <Error_Handler>:


void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop

  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <HAL_MspInit+0x54>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_MspInit+0x54>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fa7d 	bl	8000e60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <HAL_InitTick+0xd0>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a44 <HAL_InitTick+0xd0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6453      	str	r3, [r2, #68]	@ 0x44
 8000994:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <HAL_InitTick+0xd0>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a0:	f107 020c 	add.w	r2, r7, #12
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f8b8 	bl	8001b20 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009b0:	f001 f8a2 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 80009b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b8:	4a23      	ldr	r2, [pc, #140]	@ (8000a48 <HAL_InitTick+0xd4>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009c6:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <HAL_InitTick+0xdc>)
 80009c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009d2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ea:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <HAL_InitTick+0xd8>)
 80009ec:	f001 f8ca 	bl	8001b84 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d11b      	bne.n	8000a36 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009fe:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <HAL_InitTick+0xd8>)
 8000a00:	f001 f91a 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d111      	bne.n	8000a36 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a12:	2019      	movs	r0, #25
 8000a14:	f000 fa40 	bl	8000e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d808      	bhi.n	8000a30 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	2019      	movs	r0, #25
 8000a24:	f000 fa1c 	bl	8000e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_InitTick+0xe0>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e002      	b.n	8000a36 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3730      	adds	r7, #48	@ 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	40010000 	.word	0x40010000
 8000a54:	20000004 	.word	0x20000004

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a96:	f001 f931 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f004 fc76 	bl	80053c4 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20018000 	.word	0x20018000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000c8 	.word	0x200000c8
 8000b0c:	20004c48 	.word	0x20004c48

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f001 fa7e 	bl	800206c <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f7ff fecb 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000cc 	.word	0x200000cc
 8000b84:	40004400 	.word	0x40004400

08000b88 <HAL_UART_MspInit>:
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_UART_MspInit+0x8c>)
 8000bfe:	f000 f959 	bl	8000eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c1c:	f7ff ff78 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 fbc3 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fcff 	bl	800064c <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c5c:	08005e14 	.word	0x08005e14
  ldr r2, =_sbss
 8000c60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c64:	20004c44 	.word	0x20004c44

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f8d8 	bl	8000e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f7ff fe6a 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe3c 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000114 	.word	0x20000114

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000114 	.word	0x20000114

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	@ (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff4c 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e72:	f7ff ff61 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff ffb1 	bl	8000de4 <NVIC_EncodePriority>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff80 	bl	8000d90 <__NVIC_SetPriority>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff54 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e159      	b.n	8001184 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8148 	bne.w	800117e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a2 	beq.w	800117e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b57      	ldr	r3, [pc, #348]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a56      	ldr	r2, [pc, #344]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b54      	ldr	r3, [pc, #336]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a52      	ldr	r2, [pc, #328]	@ (80011a0 <HAL_GPIO_Init+0x2ec>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	@ (80011a4 <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x202>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a48      	ldr	r2, [pc, #288]	@ (80011a8 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1fe>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a47      	ldr	r2, [pc, #284]	@ (80011ac <HAL_GPIO_Init+0x2f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1fa>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1f6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a45      	ldr	r2, [pc, #276]	@ (80011b4 <HAL_GPIO_Init+0x300>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1f2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <HAL_GPIO_Init+0x2ec>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f aea2 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e267      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800120e:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b82      	ldr	r3, [pc, #520]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b7e      	ldr	r3, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e242      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b70      	ldr	r3, [pc, #448]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6f      	ldr	r2, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6d      	ldr	r3, [pc, #436]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6c      	ldr	r2, [pc, #432]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a68      	ldr	r2, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b66      	ldr	r3, [pc, #408]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fd16 	bl	8000cd8 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fd12 	bl	8000cd8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	@ 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e207      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fd02 	bl	8000cd8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcfe 	bl	8000cd8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	@ 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001306:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c7      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4937      	ldr	r1, [pc, #220]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fcb7 	bl	8000cd8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fcb3 	bl	8000cd8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4925      	ldr	r1, [pc, #148]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc96 	bl	8000cd8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc92 	bl	8000cd8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e187      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc76 	bl	8000cd8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc72 	bl	8000cd8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e167      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc5f 	bl	8000cd8 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00e      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc5b 	bl	8000cd8 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e150      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ea      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8097 	beq.w	8001584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a7c      	ldr	r2, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b7a      	ldr	r3, [pc, #488]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b77      	ldr	r3, [pc, #476]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fc1b 	bl	8000cd8 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fc17 	bl	8000cd8 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e10c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x2ea>
 80014cc:	4b64      	ldr	r3, [pc, #400]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d0:	4a63      	ldr	r2, [pc, #396]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	@ 0x70
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150c:	4a54      	ldr	r2, [pc, #336]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fbdc 	bl	8000cd8 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff fbd8 	bl	8000cd8 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0cb      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ee      	beq.n	8001524 <HAL_RCC_OscConfig+0x334>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fbc6 	bl	8000cd8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fbc2 	bl	8000cd8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0b5      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a1 	beq.w	80016d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b08      	cmp	r3, #8
 8001598:	d05c      	beq.n	8001654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb96 	bl	8000cd8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fb92 	bl	8000cd8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb6b 	bl	8000cd8 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb67 	bl	8000cd8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x416>
 8001624:	e054      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb54 	bl	8000cd8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb50 	bl	8000cd8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e045      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e038      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4ec>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d028      	beq.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d121      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa82 	bl	8000cd8 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa7e 	bl	8000cd8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490a      	ldr	r1, [pc, #40]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f874 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	08005db8 	.word	0x08005db8
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b094      	sub	sp, #80	@ 0x50
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b79      	ldr	r3, [pc, #484]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80e1 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e0db      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018e4:	e0db      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b73      	ldr	r3, [pc, #460]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ea:	e0d8      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b6d      	ldr	r3, [pc, #436]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b6a      	ldr	r3, [pc, #424]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800190c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800190e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	@ 0x34
 800191a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800191e:	4622      	mov	r2, r4
 8001920:	462b      	mov	r3, r5
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0159      	lsls	r1, r3, #5
 800192c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001930:	0150      	lsls	r0, r2, #5
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4621      	mov	r1, r4
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	6139      	str	r1, [r7, #16]
 800193c:	4629      	mov	r1, r5
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001950:	4659      	mov	r1, fp
 8001952:	018b      	lsls	r3, r1, #6
 8001954:	4651      	mov	r1, sl
 8001956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195a:	4651      	mov	r1, sl
 800195c:	018a      	lsls	r2, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	ebb2 0801 	subs.w	r8, r2, r1
 8001964:	4659      	mov	r1, fp
 8001966:	eb63 0901 	sbc.w	r9, r3, r1
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800197e:	4690      	mov	r8, r2
 8001980:	4699      	mov	r9, r3
 8001982:	4623      	mov	r3, r4
 8001984:	eb18 0303 	adds.w	r3, r8, r3
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	462b      	mov	r3, r5
 800198c:	eb49 0303 	adc.w	r3, r9, r3
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800199e:	4629      	mov	r1, r5
 80019a0:	024b      	lsls	r3, r1, #9
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a8:	4621      	mov	r1, r4
 80019aa:	024a      	lsls	r2, r1, #9
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019b2:	2200      	movs	r2, #0
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019bc:	f7fe fc60 	bl	8000280 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019c8:	e058      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	4611      	mov	r1, r2
 80019d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0159      	lsls	r1, r3, #5
 80019f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f6:	0150      	lsls	r0, r2, #5
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4641      	mov	r1, r8
 80019fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a02:	4649      	mov	r1, r9
 8001a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a20:	eb63 050b 	sbc.w	r5, r3, fp
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	00eb      	lsls	r3, r5, #3
 8001a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a32:	00e2      	lsls	r2, r4, #3
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4643      	mov	r3, r8
 8001a3a:	18e3      	adds	r3, r4, r3
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	464b      	mov	r3, r9
 8001a40:	eb45 0303 	adc.w	r3, r5, r3
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a52:	4629      	mov	r1, r5
 8001a54:	028b      	lsls	r3, r1, #10
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	028a      	lsls	r2, r1, #10
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	61fa      	str	r2, [r7, #28]
 8001a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a70:	f7fe fc06 	bl	8000280 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3750      	adds	r7, #80	@ 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_RCC_GetHCLKFreq+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000000 	.word	0x20000000

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad4:	f7ff fff0 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0a9b      	lsrs	r3, r3, #10
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4903      	ldr	r1, [pc, #12]	@ (8001af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08005dc8 	.word	0x08005dc8

08001af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001afc:	f7ff ffdc 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0b5b      	lsrs	r3, r3, #13
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	@ (8001b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08005dc8 	.word	0x08005dc8

08001b20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <HAL_RCC_GetClockConfig+0x60>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0207 	and.w	r2, r3, #7
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f839 	bl	8001c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f9b2 	bl	8001f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e044      	b.n	8001cda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7a:	d013      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_TIM_Base_Start_IT+0xb4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a16      	ldr	r2, [pc, #88]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d111      	bne.n	8001cc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d010      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc6:	e007      	b.n	8001cd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40000c00 	.word	0x40000c00
 8001cf8:	40014000 	.word	0x40014000

08001cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d020      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0202 	mvn.w	r2, #2
 8001d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8d2 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8c4 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8d5 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d020      	beq.n	8001dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0204 	mvn.w	r2, #4
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8ac 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f89e 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8af 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d020      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0208 	mvn.w	r2, #8
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f886 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f878 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f889 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d020      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0210 	mvn.w	r2, #16
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f860 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f852 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f863 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0201 	mvn.w	r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fd42 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8e6 	bl	8002058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f834 	bl	8001f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8b8 	bl	8002044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002028 <TIM_Base_SetConfig+0xfc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00f      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	@ (800202c <TIM_Base_SetConfig+0x100>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a36      	ldr	r2, [pc, #216]	@ (8002030 <TIM_Base_SetConfig+0x104>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a35      	ldr	r2, [pc, #212]	@ (8002034 <TIM_Base_SetConfig+0x108>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <TIM_Base_SetConfig+0xfc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f84:	d017      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a28      	ldr	r2, [pc, #160]	@ (800202c <TIM_Base_SetConfig+0x100>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a27      	ldr	r2, [pc, #156]	@ (8002030 <TIM_Base_SetConfig+0x104>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <TIM_Base_SetConfig+0x108>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	@ (8002038 <TIM_Base_SetConfig+0x10c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a24      	ldr	r2, [pc, #144]	@ (800203c <TIM_Base_SetConfig+0x110>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <TIM_Base_SetConfig+0x114>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <TIM_Base_SetConfig+0xfc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d105      	bne.n	800201a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f023 0201 	bic.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]
  }
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800

08002044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e042      	b.n	8002104 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fd78 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f973 	bl	800239c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b20      	cmp	r3, #32
 800212a:	d175      	bne.n	8002218 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_UART_Transmit+0x2c>
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e06e      	b.n	800221a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2221      	movs	r2, #33	@ 0x21
 8002146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800214a:	f7fe fdc5 	bl	8000cd8 <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002164:	d108      	bne.n	8002178 <HAL_UART_Transmit+0x6c>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	e003      	b.n	8002180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002180:	e02e      	b.n	80021e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f848 	bl	8002222 <UART_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e03a      	b.n	800221a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3302      	adds	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	e007      	b.n	80021d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	3301      	adds	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1cb      	bne.n	8002182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	2140      	movs	r1, #64	@ 0x40
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f814 	bl	8002222 <UART_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e006      	b.n	800221a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002232:	e03b      	b.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223a:	d037      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223c:	f7fe fd4c 	bl	8000cd8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	429a      	cmp	r2, r3
 800224a:	d302      	bcc.n	8002252 <UART_WaitOnFlagUntilTimeout+0x30>
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e03a      	b.n	80022cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b80      	cmp	r3, #128	@ 0x80
 8002268:	d020      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b40      	cmp	r3, #64	@ 0x40
 800226e:	d01d      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d116      	bne.n	80022ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f81d 	bl	80022d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2208      	movs	r2, #8
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e00f      	b.n	80022cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d0b4      	beq.n	8002234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b095      	sub	sp, #84	@ 0x54
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	e853 3f00 	ldrex	r3, [r3]
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80022fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3314      	adds	r3, #20
 8002316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	2b01      	cmp	r3, #1
 800234a:	d119      	bne.n	8002380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	e853 3f00 	ldrex	r3, [r3]
 800235a:	60bb      	str	r3, [r7, #8]
   return(result);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f023 0310 	bic.w	r3, r3, #16
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800236c:	61ba      	str	r2, [r7, #24]
 800236e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	e841 2300 	strex	r3, r2, [r1]
 8002378:	613b      	str	r3, [r7, #16]
   return(result);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e5      	bne.n	800234c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800238e:	bf00      	nop
 8002390:	3754      	adds	r7, #84	@ 0x54
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b0c0      	sub	sp, #256	@ 0x100
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	ea40 0301 	orr.w	r3, r0, r1
 80023c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	431a      	orrs	r2, r3
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023f4:	f021 010c 	bic.w	r1, r1, #12
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002402:	430b      	orrs	r3, r1
 8002404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002416:	6999      	ldr	r1, [r3, #24]
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	ea40 0301 	orr.w	r3, r0, r1
 8002422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <UART_SetConfig+0x2cc>)
 800242c:	429a      	cmp	r2, r3
 800242e:	d005      	beq.n	800243c <UART_SetConfig+0xa0>
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b8d      	ldr	r3, [pc, #564]	@ (800266c <UART_SetConfig+0x2d0>)
 8002438:	429a      	cmp	r2, r3
 800243a:	d104      	bne.n	8002446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800243c:	f7ff fb5c 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 8002440:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002444:	e003      	b.n	800244e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002446:	f7ff fb43 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 800244a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002458:	f040 810c 	bne.w	8002674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800245c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002466:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800246a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800246e:	4622      	mov	r2, r4
 8002470:	462b      	mov	r3, r5
 8002472:	1891      	adds	r1, r2, r2
 8002474:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002476:	415b      	adcs	r3, r3
 8002478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800247a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800247e:	4621      	mov	r1, r4
 8002480:	eb12 0801 	adds.w	r8, r2, r1
 8002484:	4629      	mov	r1, r5
 8002486:	eb43 0901 	adc.w	r9, r3, r1
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249e:	4690      	mov	r8, r2
 80024a0:	4699      	mov	r9, r3
 80024a2:	4623      	mov	r3, r4
 80024a4:	eb18 0303 	adds.w	r3, r8, r3
 80024a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024ac:	462b      	mov	r3, r5
 80024ae:	eb49 0303 	adc.w	r3, r9, r3
 80024b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024ca:	460b      	mov	r3, r1
 80024cc:	18db      	adds	r3, r3, r3
 80024ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80024d0:	4613      	mov	r3, r2
 80024d2:	eb42 0303 	adc.w	r3, r2, r3
 80024d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80024d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024e0:	f7fd fece 	bl	8000280 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <UART_SetConfig+0x2d4>)
 80024ea:	fba3 2302 	umull	r2, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	011c      	lsls	r4, r3, #4
 80024f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	1891      	adds	r1, r2, r2
 800250a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800250c:	415b      	adcs	r3, r3
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002514:	4641      	mov	r1, r8
 8002516:	eb12 0a01 	adds.w	sl, r2, r1
 800251a:	4649      	mov	r1, r9
 800251c:	eb43 0b01 	adc.w	fp, r3, r1
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800252c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002534:	4692      	mov	sl, r2
 8002536:	469b      	mov	fp, r3
 8002538:	4643      	mov	r3, r8
 800253a:	eb1a 0303 	adds.w	r3, sl, r3
 800253e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002542:	464b      	mov	r3, r9
 8002544:	eb4b 0303 	adc.w	r3, fp, r3
 8002548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002558:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800255c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002560:	460b      	mov	r3, r1
 8002562:	18db      	adds	r3, r3, r3
 8002564:	643b      	str	r3, [r7, #64]	@ 0x40
 8002566:	4613      	mov	r3, r2
 8002568:	eb42 0303 	adc.w	r3, r2, r3
 800256c:	647b      	str	r3, [r7, #68]	@ 0x44
 800256e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002576:	f7fd fe83 	bl	8000280 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4611      	mov	r1, r2
 8002580:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <UART_SetConfig+0x2d4>)
 8002582:	fba3 2301 	umull	r2, r3, r3, r1
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2264      	movs	r2, #100	@ 0x64
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	1acb      	subs	r3, r1, r3
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <UART_SetConfig+0x2d4>)
 8002598:	fba3 2302 	umull	r2, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025a4:	441c      	add	r4, r3
 80025a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025b8:	4642      	mov	r2, r8
 80025ba:	464b      	mov	r3, r9
 80025bc:	1891      	adds	r1, r2, r2
 80025be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025c0:	415b      	adcs	r3, r3
 80025c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025c8:	4641      	mov	r1, r8
 80025ca:	1851      	adds	r1, r2, r1
 80025cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80025ce:	4649      	mov	r1, r9
 80025d0:	414b      	adcs	r3, r1
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025e0:	4659      	mov	r1, fp
 80025e2:	00cb      	lsls	r3, r1, #3
 80025e4:	4651      	mov	r1, sl
 80025e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ea:	4651      	mov	r1, sl
 80025ec:	00ca      	lsls	r2, r1, #3
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	4642      	mov	r2, r8
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025fc:	464b      	mov	r3, r9
 80025fe:	460a      	mov	r2, r1
 8002600:	eb42 0303 	adc.w	r3, r2, r3
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002614:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800261c:	460b      	mov	r3, r1
 800261e:	18db      	adds	r3, r3, r3
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002622:	4613      	mov	r3, r2
 8002624:	eb42 0303 	adc.w	r3, r2, r3
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800262a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800262e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002632:	f7fd fe25 	bl	8000280 <__aeabi_uldivmod>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <UART_SetConfig+0x2d4>)
 800263c:	fba3 1302 	umull	r1, r3, r3, r2
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	2164      	movs	r1, #100	@ 0x64
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	3332      	adds	r3, #50	@ 0x32
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <UART_SetConfig+0x2d4>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	f003 0207 	and.w	r2, r3, #7
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4422      	add	r2, r4
 8002662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002664:	e106      	b.n	8002874 <UART_SetConfig+0x4d8>
 8002666:	bf00      	nop
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800267e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002686:	4642      	mov	r2, r8
 8002688:	464b      	mov	r3, r9
 800268a:	1891      	adds	r1, r2, r2
 800268c:	6239      	str	r1, [r7, #32]
 800268e:	415b      	adcs	r3, r3
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
 8002692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002696:	4641      	mov	r1, r8
 8002698:	1854      	adds	r4, r2, r1
 800269a:	4649      	mov	r1, r9
 800269c:	eb43 0501 	adc.w	r5, r3, r1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	00eb      	lsls	r3, r5, #3
 80026aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ae:	00e2      	lsls	r2, r4, #3
 80026b0:	4614      	mov	r4, r2
 80026b2:	461d      	mov	r5, r3
 80026b4:	4643      	mov	r3, r8
 80026b6:	18e3      	adds	r3, r4, r3
 80026b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026bc:	464b      	mov	r3, r9
 80026be:	eb45 0303 	adc.w	r3, r5, r3
 80026c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026e2:	4629      	mov	r1, r5
 80026e4:	008b      	lsls	r3, r1, #2
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ec:	4621      	mov	r1, r4
 80026ee:	008a      	lsls	r2, r1, #2
 80026f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026f4:	f7fd fdc4 	bl	8000280 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4b60      	ldr	r3, [pc, #384]	@ (8002880 <UART_SetConfig+0x4e4>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	011c      	lsls	r4, r3, #4
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002710:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	61b9      	str	r1, [r7, #24]
 8002720:	415b      	adcs	r3, r3
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002728:	4641      	mov	r1, r8
 800272a:	1851      	adds	r1, r2, r1
 800272c:	6139      	str	r1, [r7, #16]
 800272e:	4649      	mov	r1, r9
 8002730:	414b      	adcs	r3, r1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002740:	4659      	mov	r1, fp
 8002742:	00cb      	lsls	r3, r1, #3
 8002744:	4651      	mov	r1, sl
 8002746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800274a:	4651      	mov	r1, sl
 800274c:	00ca      	lsls	r2, r1, #3
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	4603      	mov	r3, r0
 8002754:	4642      	mov	r2, r8
 8002756:	189b      	adds	r3, r3, r2
 8002758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800275c:	464b      	mov	r3, r9
 800275e:	460a      	mov	r2, r1
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002772:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002780:	4649      	mov	r1, r9
 8002782:	008b      	lsls	r3, r1, #2
 8002784:	4641      	mov	r1, r8
 8002786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800278a:	4641      	mov	r1, r8
 800278c:	008a      	lsls	r2, r1, #2
 800278e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002792:	f7fd fd75 	bl	8000280 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4611      	mov	r1, r2
 800279c:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <UART_SetConfig+0x4e4>)
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2264      	movs	r2, #100	@ 0x64
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	1acb      	subs	r3, r1, r3
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	3332      	adds	r3, #50	@ 0x32
 80027b0:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <UART_SetConfig+0x4e4>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027bc:	441c      	add	r4, r3
 80027be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c2:	2200      	movs	r2, #0
 80027c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80027c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	415b      	adcs	r3, r3
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027dc:	4641      	mov	r1, r8
 80027de:	1851      	adds	r1, r2, r1
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	4649      	mov	r1, r9
 80027e4:	414b      	adcs	r3, r1
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027f4:	4659      	mov	r1, fp
 80027f6:	00cb      	lsls	r3, r1, #3
 80027f8:	4651      	mov	r1, sl
 80027fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fe:	4651      	mov	r1, sl
 8002800:	00ca      	lsls	r2, r1, #3
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	4603      	mov	r3, r0
 8002808:	4642      	mov	r2, r8
 800280a:	189b      	adds	r3, r3, r2
 800280c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800280e:	464b      	mov	r3, r9
 8002810:	460a      	mov	r2, r1
 8002812:	eb42 0303 	adc.w	r3, r2, r3
 8002816:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	663b      	str	r3, [r7, #96]	@ 0x60
 8002822:	667a      	str	r2, [r7, #100]	@ 0x64
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002830:	4649      	mov	r1, r9
 8002832:	008b      	lsls	r3, r1, #2
 8002834:	4641      	mov	r1, r8
 8002836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800283a:	4641      	mov	r1, r8
 800283c:	008a      	lsls	r2, r1, #2
 800283e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002842:	f7fd fd1d 	bl	8000280 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <UART_SetConfig+0x4e4>)
 800284c:	fba3 1302 	umull	r1, r3, r3, r2
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	2164      	movs	r1, #100	@ 0x64
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	3332      	adds	r3, #50	@ 0x32
 800285e:	4a08      	ldr	r2, [pc, #32]	@ (8002880 <UART_SetConfig+0x4e4>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	f003 020f 	and.w	r2, r3, #15
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4422      	add	r2, r4
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800287a:	46bd      	mov	sp, r7
 800287c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002880:	51eb851f 	.word	0x51eb851f

08002884 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <SysTick_Handler+0x1c>)
 800288a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800288c:	f001 fc9c 	bl	80041c8 <xTaskGetSchedulerState>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002896:	f002 fa97 	bl	8004dc8 <xPortSysTickHandler>
  }
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ac:	f3ef 8305 	mrs	r3, IPSR
 80028b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <osDelay+0x1c>
    stat = osErrorISR;
 80028b8:	f06f 0305 	mvn.w	r3, #5
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e007      	b.n	80028d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 ffe2 	bl	8003894 <vTaskDelay>
    }
  }

  return (stat);
 80028d0:	68fb      	ldr	r3, [r7, #12]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <vApplicationGetIdleTaskMemory+0x2c>)
 80028ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4a06      	ldr	r2, [pc, #24]	@ (800290c <vApplicationGetIdleTaskMemory+0x30>)
 80028f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000118 	.word	0x20000118
 800290c:	200001c0 	.word	0x200001c0

08002910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <vApplicationGetTimerTaskMemory+0x2c>)
 8002920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <vApplicationGetTimerTaskMemory+0x30>)
 8002926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	601a      	str	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	200003c0 	.word	0x200003c0
 8002940:	20000468 	.word	0x20000468

08002944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0208 	add.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f103 0208 	add.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f103 0208 	add.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d103      	bne.n	8002a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00c      	b.n	8002a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e002      	b.n	8002a14 <vListInsert+0x2e>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d2f6      	bcs.n	8002a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6852      	ldr	r2, [r2, #4]
 8002a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d103      	bne.n	8002a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ad8:	f002 f8e6 	bl	8004ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	441a      	add	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	22ff      	movs	r2, #255	@ 0xff
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	22ff      	movs	r2, #255	@ 0xff
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d114      	bne.n	8002b58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01a      	beq.n	8002b6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3310      	adds	r3, #16
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f97e 	bl	8003e3c <xTaskRemoveFromEventList>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <xQueueGenericReset+0xd0>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	e009      	b.n	8002b6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fef1 	bl	8002944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3324      	adds	r3, #36	@ 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff feec 	bl	8002944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b6c:	f002 f8ce 	bl	8004d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08e      	sub	sp, #56	@ 0x38
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <xQueueGenericCreateStatic+0x56>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <xQueueGenericCreateStatic+0x5a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <xQueueGenericCreateStatic+0x5c>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	623b      	str	r3, [r7, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <xQueueGenericCreateStatic+0x84>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <xQueueGenericCreateStatic+0x88>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <xQueueGenericCreateStatic+0x8a>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	61fb      	str	r3, [r7, #28]
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c26:	2350      	movs	r3, #80	@ 0x50
 8002c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b50      	cmp	r3, #80	@ 0x50
 8002c2e:	d00b      	beq.n	8002c48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61bb      	str	r3, [r7, #24]
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f840 	bl	8002cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3730      	adds	r7, #48	@ 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b08a      	sub	sp, #40	@ 0x28
 8002c7e:	af02      	add	r7, sp, #8
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	4613      	mov	r3, r2
 8002c86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	613b      	str	r3, [r7, #16]
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	3350      	adds	r3, #80	@ 0x50
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 f919 	bl	8004eec <pvPortMalloc>
 8002cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3350      	adds	r3, #80	@ 0x50
 8002cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f805 	bl	8002cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d1e:	2101      	movs	r1, #1
 8002d20:	69b8      	ldr	r0, [r7, #24]
 8002d22:	f7ff fec3 	bl	8002aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	@ 0x38
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <xQueueGenericSend+0x34>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x42>
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSend+0x46>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSend+0x48>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <xQueueGenericSend+0x64>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x72>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x76>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x78>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <xQueueGenericSend+0x94>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dcc:	f001 f9fc 	bl	80041c8 <xTaskGetSchedulerState>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <xQueueGenericSend+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <xQueueGenericSend+0xa8>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <xQueueGenericSend+0xaa>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <xQueueGenericSend+0xc6>
	__asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	61fb      	str	r3, [r7, #28]
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfe:	f001 ff53 	bl	8004ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <xQueueGenericSend+0xdc>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d129      	bne.n	8002e68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1a:	f000 fa0f 	bl	800323c <prvCopyDataToQueue>
 8002e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	3324      	adds	r3, #36	@ 0x24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 f805 	bl	8003e3c <xTaskRemoveFromEventList>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	e00a      	b.n	8002e60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e50:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e60:	f001 ff54 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e063      	b.n	8002f30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6e:	f001 ff4d 	bl	8004d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e05c      	b.n	8002f30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 f83f 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e8a:	f001 ff3f 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8e:	f000 fda7 	bl	80039e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e92:	f001 ff09 	bl	8004ca8 <vPortEnterCritical>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d103      	bne.n	8002eac <xQueueGenericSend+0x174>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d103      	bne.n	8002ec2 <xQueueGenericSend+0x18a>
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec2:	f001 ff23 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec6:	1d3a      	adds	r2, r7, #4
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 f82e 	bl	8003f30 <xTaskCheckForTimeOut>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d124      	bne.n	8002f24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002edc:	f000 faa6 	bl	800342c <prvIsQueueFull>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	3310      	adds	r3, #16
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 ff52 	bl	8003d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef6:	f000 fa31 	bl	800335c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002efa:	f000 fd7f 	bl	80039fc <xTaskResumeAll>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f af7c 	bne.w	8002dfe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f06:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	e772      	b.n	8002dfe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f1a:	f000 fa1f 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1e:	f000 fd6d 	bl	80039fc <xTaskResumeAll>
 8002f22:	e76c      	b.n	8002dfe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f26:	f000 fa19 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f2a:	f000 fd67 	bl	80039fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3738      	adds	r7, #56	@ 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b090      	sub	sp, #64	@ 0x40
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSendFromISR+0x3e>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSendFromISR+0x42>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSendFromISR+0x44>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSendFromISR+0x6e>
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <xQueueGenericSendFromISR+0x72>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <xQueueGenericSendFromISR+0x74>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	623b      	str	r3, [r7, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fcc:	f001 ff4c 	bl	8004e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fd0:	f3ef 8211 	mrs	r2, BASEPRI
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <xQueueGenericSendFromISR+0xc2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d12f      	bne.n	800305e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003004:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003014:	f000 f912 	bl	800323c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003018:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d112      	bne.n	8003048 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302c:	3324      	adds	r3, #36	@ 0x24
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ff04 	bl	8003e3c <xTaskRemoveFromEventList>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800304c:	3301      	adds	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	b25a      	sxtb	r2, r3
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800305c:	e001      	b.n	8003062 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800306c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003070:	4618      	mov	r0, r3
 8003072:	3740      	adds	r7, #64	@ 0x40
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	@ 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <xQueueReceive+0x32>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	623b      	str	r3, [r7, #32]
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	e7fd      	b.n	80030a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <xQueueReceive+0x40>
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <xQueueReceive+0x44>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <xQueueReceive+0x46>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <xQueueReceive+0x62>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	61fb      	str	r3, [r7, #28]
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030da:	f001 f875 	bl	80041c8 <xTaskGetSchedulerState>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <xQueueReceive+0x72>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueReceive+0x76>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueReceive+0x78>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xQueueReceive+0x94>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61bb      	str	r3, [r7, #24]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800310c:	f001 fdcc 	bl	8004ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01f      	beq.n	800315c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003120:	f000 f8f6 	bl	8003310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00f      	beq.n	8003154 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	3310      	adds	r3, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe7f 	bl	8003e3c <xTaskRemoveFromEventList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003144:	4b3c      	ldr	r3, [pc, #240]	@ (8003238 <xQueueReceive+0x1c0>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003154:	f001 fdda 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 8003158:	2301      	movs	r3, #1
 800315a:	e069      	b.n	8003230 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003162:	f001 fdd3 	bl	8004d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003166:	2300      	movs	r3, #0
 8003168:	e062      	b.n	8003230 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fec5 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800317a:	2301      	movs	r3, #1
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800317e:	f001 fdc5 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003182:	f000 fc2d 	bl	80039e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003186:	f001 fd8f 	bl	8004ca8 <vPortEnterCritical>
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d103      	bne.n	80031a0 <xQueueReceive+0x128>
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d103      	bne.n	80031b6 <xQueueReceive+0x13e>
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b6:	f001 fda9 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ba:	1d3a      	adds	r2, r7, #4
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 feb4 	bl	8003f30 <xTaskCheckForTimeOut>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d123      	bne.n	8003216 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d0:	f000 f916 	bl	8003400 <prvIsQueueEmpty>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	3324      	adds	r3, #36	@ 0x24
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdd8 	bl	8003d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ea:	f000 f8b7 	bl	800335c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ee:	f000 fc05 	bl	80039fc <xTaskResumeAll>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d189      	bne.n	800310c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <xQueueReceive+0x1c0>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	e780      	b.n	800310c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800320a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320c:	f000 f8a6 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003210:	f000 fbf4 	bl	80039fc <xTaskResumeAll>
 8003214:	e77a      	b.n	800310c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003218:	f000 f8a0 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800321c:	f000 fbee 	bl	80039fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003222:	f000 f8ed 	bl	8003400 <prvIsQueueEmpty>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f43f af6f 	beq.w	800310c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800322e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003230:	4618      	mov	r0, r3
 8003232:	3730      	adds	r7, #48	@ 0x30
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d14d      	bne.n	80032fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 ffcc 	bl	8004204 <xTaskPriorityDisinherit>
 800326c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e043      	b.n	80032fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d119      	bne.n	80032b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6858      	ldr	r0, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	f002 f8c8 	bl	800541c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	441a      	add	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d32b      	bcc.n	80032fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e026      	b.n	80032fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68d8      	ldr	r0, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	461a      	mov	r2, r3
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	f002 f8ae 	bl	800541c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	425b      	negs	r3, r3
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	425b      	negs	r3, r3
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d105      	bne.n	80032fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003306:	697b      	ldr	r3, [r7, #20]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d303      	bcc.n	8003344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	461a      	mov	r2, r3
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f002 f864 	bl	800541c <memcpy>
	}
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003364:	f001 fca0 	bl	8004ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800336e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003370:	e011      	b.n	8003396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3324      	adds	r3, #36	@ 0x24
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd5c 	bl	8003e3c <xTaskRemoveFromEventList>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800338a:	f000 fe35 	bl	8003ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	dce9      	bgt.n	8003372 <prvUnlockQueue+0x16>
 800339e:	e000      	b.n	80033a2 <prvUnlockQueue+0x46>
					break;
 80033a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	22ff      	movs	r2, #255	@ 0xff
 80033a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fcaf 	bl	8004d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ae:	f001 fc7b 	bl	8004ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ba:	e011      	b.n	80033e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3310      	adds	r3, #16
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fd37 	bl	8003e3c <xTaskRemoveFromEventList>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033d4:	f000 fe10 	bl	8003ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dce9      	bgt.n	80033bc <prvUnlockQueue+0x60>
 80033e8:	e000      	b.n	80033ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033f4:	f001 fc8a 	bl	8004d0c <vPortExitCritical>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003408:	f001 fc4e 	bl	8004ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341e:	f001 fc75 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003434:	f001 fc38 	bl	8004ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	429a      	cmp	r2, r3
 8003442:	d102      	bne.n	800344a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003444:	2301      	movs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e001      	b.n	800344e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f001 fc5d 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e014      	b.n	8003496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800346c:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <vQueueAddToRegistry+0x50>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <vQueueAddToRegistry+0x50>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003482:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <vQueueAddToRegistry+0x50>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800348e:	e006      	b.n	800349e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b07      	cmp	r3, #7
 800349a:	d9e7      	bls.n	800346c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000868 	.word	0x20000868

080034b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034c0:	f001 fbf2 	bl	8004ca8 <vPortEnterCritical>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <vQueueWaitForMessageRestricted+0x2a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d103      	bne.n	80034f0 <vQueueWaitForMessageRestricted+0x40>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f0:	f001 fc0c 	bl	8004d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3324      	adds	r3, #36	@ 0x24
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fc6d 	bl	8003de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff26 	bl	800335c <prvUnlockQueue>
	}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	@ 0x38
 800351c:	af04      	add	r7, sp, #16
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xTaskCreateStatic+0x2c>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	623b      	str	r3, [r7, #32]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <xTaskCreateStatic+0x4a>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	61fb      	str	r3, [r7, #28]
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003562:	23a8      	movs	r3, #168	@ 0xa8
 8003564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2ba8      	cmp	r3, #168	@ 0xa8
 800356a:	d00b      	beq.n	8003584 <xTaskCreateStatic+0x6c>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	61bb      	str	r3, [r7, #24]
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01e      	beq.n	80035ca <xTaskCreateStatic+0xb2>
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035a4:	2300      	movs	r3, #0
 80035a6:	9303      	str	r3, [sp, #12]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f851 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035c4:	f000 f8f6 	bl	80037b4 <prvAddNewTaskToReadyList>
 80035c8:	e001      	b.n	80035ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ce:	697b      	ldr	r3, [r7, #20]
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	@ 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	@ 0x30
 80035dc:	af04      	add	r7, sp, #16
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fc7d 	bl	8004eec <pvPortMalloc>
 80035f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035fa:	20a8      	movs	r0, #168	@ 0xa8
 80035fc:	f001 fc76 	bl	8004eec <pvPortMalloc>
 8003600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
 800360e:	e005      	b.n	800361c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f001 fd39 	bl	8005088 <vPortFree>
 8003616:	e001      	b.n	800361c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	2300      	movs	r3, #0
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f80f 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003646:	69f8      	ldr	r0, [r7, #28]
 8003648:	f000 f8b4 	bl	80037b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e002      	b.n	8003658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003658:	69bb      	ldr	r3, [r7, #24]
	}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	21a5      	movs	r1, #165	@ 0xa5
 800367e:	f001 fe43 	bl	8005308 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800368c:	3b01      	subs	r3, #1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01f      	beq.n	8003704 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e012      	b.n	80036f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	7819      	ldrb	r1, [r3, #0]
 80036d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	3334      	adds	r3, #52	@ 0x34
 80036da:	460a      	mov	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	d9e9      	bls.n	80036ca <prvInitialiseNewTask+0x66>
 80036f6:	e000      	b.n	80036fa <prvInitialiseNewTask+0x96>
			{
				break;
 80036f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003702:	e003      	b.n	800370c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b37      	cmp	r3, #55	@ 0x37
 8003710:	d901      	bls.n	8003716 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003712:	2337      	movs	r3, #55	@ 0x37
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003720:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f929 	bl	8002984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	3318      	adds	r3, #24
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f924 	bl	8002984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003740:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	3354      	adds	r3, #84	@ 0x54
 8003766:	224c      	movs	r2, #76	@ 0x4c
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fdcc 	bl	8005308 <memset>
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <prvInitialiseNewTask+0x144>)
 8003774:	659a      	str	r2, [r3, #88]	@ 0x58
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	4a0c      	ldr	r2, [pc, #48]	@ (80037ac <prvInitialiseNewTask+0x148>)
 800377a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	4a0c      	ldr	r2, [pc, #48]	@ (80037b0 <prvInitialiseNewTask+0x14c>)
 8003780:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	69b8      	ldr	r0, [r7, #24]
 8003788:	f001 f95a 	bl	8004a40 <pxPortInitialiseStack>
 800378c:	4602      	mov	r2, r0
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800379c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800379e:	bf00      	nop
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20004afc 	.word	0x20004afc
 80037ac:	20004b64 	.word	0x20004b64
 80037b0:	20004bcc 	.word	0x20004bcc

080037b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037bc:	f001 fa74 	bl	8004ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ca:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037d2:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037d8:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e0:	f000 fc2e 	bl	8004040 <prvInitialiseTaskLists>
 80037e4:	e00d      	b.n	8003802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <prvAddNewTaskToReadyList+0xcc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d802      	bhi.n	8003802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037fc:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <prvAddNewTaskToReadyList+0xd4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d903      	bls.n	8003828 <prvAddNewTaskToReadyList+0x74>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <prvAddNewTaskToReadyList+0xd4>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4a15      	ldr	r2, [pc, #84]	@ (800388c <prvAddNewTaskToReadyList+0xd8>)
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7ff f8ad 	bl	800299e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003844:	f001 fa62 	bl	8004d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <prvAddNewTaskToReadyList+0xcc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d207      	bcs.n	800386e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800385e:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <prvAddNewTaskToReadyList+0xdc>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000d7c 	.word	0x20000d7c
 800387c:	200008a8 	.word	0x200008a8
 8003880:	20000d88 	.word	0x20000d88
 8003884:	20000d98 	.word	0x20000d98
 8003888:	20000d84 	.word	0x20000d84
 800388c:	200008ac 	.word	0x200008ac
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <vTaskDelay+0x64>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <vTaskDelay+0x32>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60bb      	str	r3, [r7, #8]
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	e7fd      	b.n	80038c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038c6:	f000 f88b 	bl	80039e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fd09 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d2:	f000 f893 	bl	80039fc <xTaskResumeAll>
 80038d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038de:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <vTaskDelay+0x68>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000da4 	.word	0x20000da4
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800390e:	463a      	mov	r2, r7
 8003910:	1d39      	adds	r1, r7, #4
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe ffe0 	bl	80028dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	460a      	mov	r2, r1
 800392e:	4924      	ldr	r1, [pc, #144]	@ (80039c0 <vTaskStartScheduler+0xc0>)
 8003930:	4824      	ldr	r0, [pc, #144]	@ (80039c4 <vTaskStartScheduler+0xc4>)
 8003932:	f7ff fdf1 	bl	8003518 <xTaskCreateStatic>
 8003936:	4603      	mov	r3, r0
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <vTaskStartScheduler+0xc8>)
 800393a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800393c:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <vTaskStartScheduler+0xc8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e001      	b.n	800394e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003954:	f000 fd1a 	bl	800438c <xTimerCreateTimerTask>
 8003958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d11b      	bne.n	8003998 <vTaskStartScheduler+0x98>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	613b      	str	r3, [r7, #16]
}
 8003972:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <vTaskStartScheduler+0xcc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3354      	adds	r3, #84	@ 0x54
 800397a:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <vTaskStartScheduler+0xd0>)
 800397c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <vTaskStartScheduler+0xd4>)
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003986:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <vTaskStartScheduler+0xd8>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <vTaskStartScheduler+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003992:	f001 f8e5 	bl	8004b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003996:	e00f      	b.n	80039b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d10b      	bne.n	80039b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <vTaskStartScheduler+0xb4>
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08005da0 	.word	0x08005da0
 80039c4:	08004011 	.word	0x08004011
 80039c8:	20000da0 	.word	0x20000da0
 80039cc:	200008a8 	.word	0x200008a8
 80039d0:	20000010 	.word	0x20000010
 80039d4:	20000d9c 	.word	0x20000d9c
 80039d8:	20000d88 	.word	0x20000d88
 80039dc:	20000d80 	.word	0x20000d80

080039e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e4:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <vTaskSuspendAll+0x18>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a03      	ldr	r2, [pc, #12]	@ (80039f8 <vTaskSuspendAll+0x18>)
 80039ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	20000da4 	.word	0x20000da4

080039fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a0a:	4b42      	ldr	r3, [pc, #264]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	603b      	str	r3, [r7, #0]
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a2a:	f001 f93d 	bl	8004ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a2e:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4a37      	ldr	r2, [pc, #220]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a38:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d162      	bne.n	8003b06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a40:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <xTaskResumeAll+0x11c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05e      	beq.n	8003b06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a48:	e02f      	b.n	8003aaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <xTaskResumeAll+0x120>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3318      	adds	r3, #24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fffe 	bl	8002a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fff9 	bl	8002a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b20 <xTaskResumeAll+0x124>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d903      	bls.n	8003a7a <xTaskResumeAll+0x7e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <xTaskResumeAll+0x124>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <xTaskResumeAll+0x128>)
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f7fe ff84 	bl	800299e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9a:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <xTaskResumeAll+0x12c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <xTaskResumeAll+0x120>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1cb      	bne.n	8003a4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ab8:	f000 fb66 	bl	8004188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003abc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <xTaskResumeAll+0x134>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ac8:	f000 f846 	bl	8003b58 <xTaskIncrementTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f1      	bne.n	8003ac8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <xTaskResumeAll+0x134>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <xTaskResumeAll+0x138>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f001 f901 	bl	8004d0c <vPortExitCritical>

	return xAlreadyYielded;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000da4 	.word	0x20000da4
 8003b18:	20000d7c 	.word	0x20000d7c
 8003b1c:	20000d3c 	.word	0x20000d3c
 8003b20:	20000d84 	.word	0x20000d84
 8003b24:	200008ac 	.word	0x200008ac
 8003b28:	200008a8 	.word	0x200008a8
 8003b2c:	20000d90 	.word	0x20000d90
 8003b30:	20000d8c 	.word	0x20000d8c
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <xTaskGetTickCount+0x1c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000d80 	.word	0x20000d80

08003b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ca0 <xTaskIncrementTick+0x148>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8090 	bne.w	8003c8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca4 <xTaskIncrementTick+0x14c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <xTaskIncrementTick+0x14c>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d121      	bne.n	8003bc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b80:	4b49      	ldr	r3, [pc, #292]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	603b      	str	r3, [r7, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <xTaskIncrementTick+0x46>
 8003ba2:	4b41      	ldr	r3, [pc, #260]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <xTaskIncrementTick+0x154>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8003cac <xTaskIncrementTick+0x154>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <xTaskIncrementTick+0x158>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb0 <xTaskIncrementTick+0x158>)
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	f000 fae2 	bl	8004188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d349      	bcc.n	8003c62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bce:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd8:	4b36      	ldr	r3, [pc, #216]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295
 8003bde:	601a      	str	r2, [r3, #0]
					break;
 8003be0:	e03f      	b.n	8003c62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be2:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d203      	bcs.n	8003c02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c00:	e02f      	b.n	8003c62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe ff26 	bl	8002a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe ff1d 	bl	8002a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <xTaskIncrementTick+0x160>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d903      	bls.n	8003c32 <xTaskIncrementTick+0xda>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <xTaskIncrementTick+0x160>)
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <xTaskIncrementTick+0x164>)
 8003c40:	441a      	add	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe fea8 	bl	800299e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <xTaskIncrementTick+0x168>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3b8      	bcc.n	8003bce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c60:	e7b5      	b.n	8003bce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c62:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <xTaskIncrementTick+0x168>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c68:	4914      	ldr	r1, [pc, #80]	@ (8003cbc <xTaskIncrementTick+0x164>)
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d901      	bls.n	8003c7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c7e:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <xTaskIncrementTick+0x16c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e004      	b.n	8003c96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <xTaskIncrementTick+0x170>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc8 <xTaskIncrementTick+0x170>)
 8003c94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000da4 	.word	0x20000da4
 8003ca4:	20000d80 	.word	0x20000d80
 8003ca8:	20000d34 	.word	0x20000d34
 8003cac:	20000d38 	.word	0x20000d38
 8003cb0:	20000d94 	.word	0x20000d94
 8003cb4:	20000d9c 	.word	0x20000d9c
 8003cb8:	20000d84 	.word	0x20000d84
 8003cbc:	200008ac 	.word	0x200008ac
 8003cc0:	200008a8 	.word	0x200008a8
 8003cc4:	20000d90 	.word	0x20000d90
 8003cc8:	20000d8c 	.word	0x20000d8c

08003ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <vTaskSwitchContext+0xb4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cda:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <vTaskSwitchContext+0xb8>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ce0:	e047      	b.n	8003d72 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ce2:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <vTaskSwitchContext+0xb8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <vTaskSwitchContext+0xbc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e011      	b.n	8003d14 <vTaskSwitchContext+0x48>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <vTaskSwitchContext+0x42>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <vTaskSwitchContext+0x3e>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	491d      	ldr	r1, [pc, #116]	@ (8003d8c <vTaskSwitchContext+0xc0>)
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0e3      	beq.n	8003cf0 <vTaskSwitchContext+0x24>
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <vTaskSwitchContext+0xc0>)
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d104      	bne.n	8003d58 <vTaskSwitchContext+0x8c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <vTaskSwitchContext+0xc4>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <vTaskSwitchContext+0xbc>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <vTaskSwitchContext+0xc4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3354      	adds	r3, #84	@ 0x54
 8003d6e:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <vTaskSwitchContext+0xc8>)
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000da4 	.word	0x20000da4
 8003d84:	20000d90 	.word	0x20000d90
 8003d88:	20000d84 	.word	0x20000d84
 8003d8c:	200008ac 	.word	0x200008ac
 8003d90:	200008a8 	.word	0x200008a8
 8003d94:	20000010 	.word	0x20000010

08003d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <vTaskPlaceOnEventList+0x48>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe fe0c 	bl	80029e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dce:	2101      	movs	r1, #1
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f000 fa87 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200008a8 	.word	0x200008a8

08003de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3318      	adds	r3, #24
 8003e14:	4619      	mov	r1, r3
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7fe fdc1 	bl	800299e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f000 fa5a 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
	}
 8003e30:	bf00      	nop
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200008a8 	.word	0x200008a8

08003e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fdf2 	bl	8002a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <xTaskRemoveFromEventList+0xb0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fde9 	bl	8002a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d903      	bls.n	8003e9a <xTaskRemoveFromEventList+0x5e>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <xTaskRemoveFromEventList+0xb8>)
 8003ea8:	441a      	add	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7fe fd74 	bl	800299e <vListInsertEnd>
 8003eb6:	e005      	b.n	8003ec4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3318      	adds	r3, #24
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	480e      	ldr	r0, [pc, #56]	@ (8003ef8 <xTaskRemoveFromEventList+0xbc>)
 8003ec0:	f7fe fd6d 	bl	800299e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <xTaskRemoveFromEventList+0xc0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d905      	bls.n	8003ede <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <xTaskRemoveFromEventList+0xc4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e001      	b.n	8003ee2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ee2:	697b      	ldr	r3, [r7, #20]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000da4 	.word	0x20000da4
 8003ef0:	20000d84 	.word	0x20000d84
 8003ef4:	200008ac 	.word	0x200008ac
 8003ef8:	20000d3c 	.word	0x20000d3c
 8003efc:	200008a8 	.word	0x200008a8
 8003f00:	20000d90 	.word	0x20000d90

08003f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <vTaskInternalSetTimeOutState+0x24>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <vTaskInternalSetTimeOutState+0x28>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20000d94 	.word	0x20000d94
 8003f2c:	20000d80 	.word	0x20000d80

08003f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	613b      	str	r3, [r7, #16]
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60fb      	str	r3, [r7, #12]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f76:	f000 fe97 	bl	8004ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <xTaskCheckForTimeOut+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e023      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <xTaskCheckForTimeOut+0xc4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d007      	beq.n	8003fb6 <xTaskCheckForTimeOut+0x86>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e015      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d20b      	bcs.n	8003fd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff99 	bl	8003f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e004      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fe2:	f000 fe93 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000d80 	.word	0x20000d80
 8003ff4:	20000d94 	.word	0x20000d94

08003ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <vTaskMissedYield+0x14>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000d90 	.word	0x20000d90

08004010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004018:	f000 f852 	bl	80040c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <prvIdleTask+0x28>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d9f9      	bls.n	8004018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <prvIdleTask+0x2c>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004034:	e7f0      	b.n	8004018 <prvIdleTask+0x8>
 8004036:	bf00      	nop
 8004038:	200008ac 	.word	0x200008ac
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	e00c      	b.n	8004066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <prvInitialiseTaskLists+0x60>)
 8004058:	4413      	add	r3, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fc72 	bl	8002944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b37      	cmp	r3, #55	@ 0x37
 800406a:	d9ef      	bls.n	800404c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800406c:	480d      	ldr	r0, [pc, #52]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800406e:	f7fe fc69 	bl	8002944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004072:	480d      	ldr	r0, [pc, #52]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004074:	f7fe fc66 	bl	8002944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004078:	480c      	ldr	r0, [pc, #48]	@ (80040ac <prvInitialiseTaskLists+0x6c>)
 800407a:	f7fe fc63 	bl	8002944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407e:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <prvInitialiseTaskLists+0x70>)
 8004080:	f7fe fc60 	bl	8002944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004084:	480b      	ldr	r0, [pc, #44]	@ (80040b4 <prvInitialiseTaskLists+0x74>)
 8004086:	f7fe fc5d 	bl	8002944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvInitialiseTaskLists+0x78>)
 800408c:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800408e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <prvInitialiseTaskLists+0x7c>)
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200008ac 	.word	0x200008ac
 80040a4:	20000d0c 	.word	0x20000d0c
 80040a8:	20000d20 	.word	0x20000d20
 80040ac:	20000d3c 	.word	0x20000d3c
 80040b0:	20000d50 	.word	0x20000d50
 80040b4:	20000d68 	.word	0x20000d68
 80040b8:	20000d34 	.word	0x20000d34
 80040bc:	20000d38 	.word	0x20000d38

080040c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c6:	e019      	b.n	80040fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c8:	f000 fdee 	bl	8004ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <prvCheckTasksWaitingTermination+0x50>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fcbd 	bl	8002a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040f2:	f000 fe0b 	bl	8004d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f810 	bl	800411c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e1      	bne.n	80040c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000d50 	.word	0x20000d50
 8004114:	20000d7c 	.word	0x20000d7c
 8004118:	20000d64 	.word	0x20000d64

0800411c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3354      	adds	r3, #84	@ 0x54
 8004128:	4618      	mov	r0, r3
 800412a:	f001 f8f5 	bl	8005318 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ffa3 	bl	8005088 <vPortFree>
				vPortFree( pxTCB );
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 ffa0 	bl	8005088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004148:	e019      	b.n	800417e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004150:	2b01      	cmp	r3, #1
 8004152:	d103      	bne.n	800415c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 ff97 	bl	8005088 <vPortFree>
	}
 800415a:	e010      	b.n	800417e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004162:	2b02      	cmp	r3, #2
 8004164:	d00b      	beq.n	800417e <prvDeleteTCB+0x62>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60fb      	str	r3, [r7, #12]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <prvDeleteTCB+0x5e>
	}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800418e:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <prvResetNextTaskUnblockTime+0x38>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004198:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <prvResetNextTaskUnblockTime+0x3c>)
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041a0:	e008      	b.n	80041b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a2:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <prvResetNextTaskUnblockTime+0x38>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <prvResetNextTaskUnblockTime+0x3c>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000d34 	.word	0x20000d34
 80041c4:	20000d9c 	.word	0x20000d9c

080041c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <xTaskGetSchedulerState+0x34>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041d6:	2301      	movs	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	e008      	b.n	80041ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041dc:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <xTaskGetSchedulerState+0x38>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041e4:	2302      	movs	r3, #2
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e001      	b.n	80041ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041ee:	687b      	ldr	r3, [r7, #4]
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	20000d88 	.word	0x20000d88
 8004200:	20000da4 	.word	0x20000da4

08004204 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d058      	beq.n	80042cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800421a:	4b2f      	ldr	r3, [pc, #188]	@ (80042d8 <xTaskPriorityDisinherit+0xd4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d00b      	beq.n	800423c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	60fb      	str	r3, [r7, #12]
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60bb      	str	r3, [r7, #8]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426e:	429a      	cmp	r2, r3
 8004270:	d02c      	beq.n	80042cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d128      	bne.n	80042cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fbea 	bl	8002a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429c:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <xTaskPriorityDisinherit+0xd8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <xTaskPriorityDisinherit+0xa8>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <xTaskPriorityDisinherit+0xd8>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <xTaskPriorityDisinherit+0xdc>)
 80042ba:	441a      	add	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fb6b 	bl	800299e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
	}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200008a8 	.word	0x200008a8
 80042dc:	20000d84 	.word	0x20000d84
 80042e0:	200008ac 	.word	0x200008ac

080042e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <prvAddCurrentTaskToDelayedList+0x90>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f4:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fbac 	bl	8002a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d10a      	bne.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4819      	ldr	r0, [pc, #100]	@ (800437c <prvAddCurrentTaskToDelayedList+0x98>)
 8004318:	f7fe fb41 	bl	800299e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800431c:	e026      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d209      	bcs.n	800434a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe fb4f 	bl	80029e6 <vListInsert>
}
 8004348:	e010      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434a:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b0a      	ldr	r3, [pc, #40]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7fe fb45 	bl	80029e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d202      	bcs.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000d80 	.word	0x20000d80
 8004378:	200008a8 	.word	0x200008a8
 800437c:	20000d68 	.word	0x20000d68
 8004380:	20000d38 	.word	0x20000d38
 8004384:	20000d34 	.word	0x20000d34
 8004388:	20000d9c 	.word	0x20000d9c

0800438c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004396:	f000 fb13 	bl	80049c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800439a:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <xTimerCreateTimerTask+0x84>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d021      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043aa:	1d3a      	adds	r2, r7, #4
 80043ac:	f107 0108 	add.w	r1, r7, #8
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe faab 	bl	8002910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	9202      	str	r2, [sp, #8]
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	2302      	movs	r3, #2
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	460a      	mov	r2, r1
 80043cc:	4911      	ldr	r1, [pc, #68]	@ (8004414 <xTimerCreateTimerTask+0x88>)
 80043ce:	4812      	ldr	r0, [pc, #72]	@ (8004418 <xTimerCreateTimerTask+0x8c>)
 80043d0:	f7ff f8a2 	bl	8003518 <xTaskCreateStatic>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a11      	ldr	r2, [pc, #68]	@ (800441c <xTimerCreateTimerTask+0x90>)
 80043d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <xTimerCreateTimerTask+0x90>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	613b      	str	r3, [r7, #16]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004404:	697b      	ldr	r3, [r7, #20]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000dd8 	.word	0x20000dd8
 8004414:	08005da8 	.word	0x08005da8
 8004418:	08004559 	.word	0x08004559
 800441c:	20000ddc 	.word	0x20000ddc

08004420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	@ 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <xTimerGenericCommand+0x30>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <xTimerGenericCommand+0x98>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02a      	beq.n	80044ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b05      	cmp	r3, #5
 8004468:	dc18      	bgt.n	800449c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800446a:	f7ff fead 	bl	80041c8 <xTaskGetSchedulerState>
 800446e:	4603      	mov	r3, r0
 8004470:	2b02      	cmp	r3, #2
 8004472:	d109      	bne.n	8004488 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004474:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <xTimerGenericCommand+0x98>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	f107 0110 	add.w	r1, r7, #16
 800447c:	2300      	movs	r3, #0
 800447e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004480:	f7fe fc5a 	bl	8002d38 <xQueueGenericSend>
 8004484:	6278      	str	r0, [r7, #36]	@ 0x24
 8004486:	e012      	b.n	80044ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <xTimerGenericCommand+0x98>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f107 0110 	add.w	r1, r7, #16
 8004490:	2300      	movs	r3, #0
 8004492:	2200      	movs	r2, #0
 8004494:	f7fe fc50 	bl	8002d38 <xQueueGenericSend>
 8004498:	6278      	str	r0, [r7, #36]	@ 0x24
 800449a:	e008      	b.n	80044ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <xTimerGenericCommand+0x98>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	f107 0110 	add.w	r1, r7, #16
 80044a4:	2300      	movs	r3, #0
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	f7fe fd48 	bl	8002f3c <xQueueGenericSendFromISR>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	@ 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000dd8 	.word	0x20000dd8

080044bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c6:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <prvProcessExpiredTimer+0x98>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fabf 	bl	8002a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	18d1      	adds	r1, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f000 f8d5 	bl	80046a4 <prvInsertTimerInActiveList>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	2100      	movs	r1, #0
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff88 	bl	8004420 <xTimerGenericCommand>
 8004510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	4798      	blx	r3
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000dd0 	.word	0x20000dd0

08004558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004560:	f107 0308 	add.w	r3, r7, #8
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f859 	bl	800461c <prvGetNextExpireTime>
 800456a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f805 	bl	8004580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004576:	f000 f8d7 	bl	8004728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800457a:	bf00      	nop
 800457c:	e7f0      	b.n	8004560 <prvTimerTask+0x8>
	...

08004580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800458a:	f7ff fa29 	bl	80039e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f866 	bl	8004664 <prvSampleTimeNow>
 8004598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d130      	bne.n	8004602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <prvProcessTimerOrBlockTask+0x3c>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d806      	bhi.n	80045bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045ae:	f7ff fa25 	bl	80039fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff81 	bl	80044bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045ba:	e024      	b.n	8004606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <prvProcessTimerOrBlockTask+0x90>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <prvProcessTimerOrBlockTask+0x50>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <prvProcessTimerOrBlockTask+0x52>
 80045d0:	2300      	movs	r3, #0
 80045d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <prvProcessTimerOrBlockTask+0x94>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7fe ff65 	bl	80034b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045e6:	f7ff fa09 	bl	80039fc <xTaskResumeAll>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045f0:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <prvProcessTimerOrBlockTask+0x98>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
}
 8004600:	e001      	b.n	8004606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004602:	f7ff f9fb 	bl	80039fc <xTaskResumeAll>
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000dd4 	.word	0x20000dd4
 8004614:	20000dd8 	.word	0x20000dd8
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004624:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <prvGetNextExpireTime+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <prvGetNextExpireTime+0x16>
 800462e:	2201      	movs	r2, #1
 8004630:	e000      	b.n	8004634 <prvGetNextExpireTime+0x18>
 8004632:	2200      	movs	r2, #0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <prvGetNextExpireTime+0x44>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e001      	b.n	8004650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000dd0 	.word	0x20000dd0

08004664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800466c:	f7ff fa64 	bl	8003b38 <xTaskGetTickCount>
 8004670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004672:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <prvSampleTimeNow+0x3c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	429a      	cmp	r2, r3
 800467a:	d205      	bcs.n	8004688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800467c:	f000 f93a 	bl	80048f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e002      	b.n	800468e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800468e:	4a04      	ldr	r2, [pc, #16]	@ (80046a0 <prvSampleTimeNow+0x3c>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004694:	68fb      	ldr	r3, [r7, #12]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000de0 	.word	0x20000de0

080046a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d812      	bhi.n	80046f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e01b      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046de:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <prvInsertTimerInActiveList+0x7c>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe f97c 	bl	80029e6 <vListInsert>
 80046ee:	e012      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d206      	bcs.n	8004706 <prvInsertTimerInActiveList+0x62>
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e007      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004706:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <prvInsertTimerInActiveList+0x80>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe f968 	bl	80029e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004716:	697b      	ldr	r3, [r7, #20]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000dd4 	.word	0x20000dd4
 8004724:	20000dd0 	.word	0x20000dd0

08004728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800472e:	e0ce      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da19      	bge.n	800476a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	3304      	adds	r3, #4
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	61fb      	str	r3, [r7, #28]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800475a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004760:	6850      	ldr	r0, [r2, #4]
 8004762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	4611      	mov	r1, r2
 8004768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f2c0 80ae 	blt.w	80048ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	3304      	adds	r3, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe f968 	bl	8002a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004788:	463b      	mov	r3, r7
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff6a 	bl	8004664 <prvSampleTimeNow>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b09      	cmp	r3, #9
 8004796:	f200 8097 	bhi.w	80048c8 <prvProcessReceivedCommands+0x1a0>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <prvProcessReceivedCommands+0x78>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047c9 	.word	0x080047c9
 80047ac:	0800483f 	.word	0x0800483f
 80047b0:	08004853 	.word	0x08004853
 80047b4:	0800489f 	.word	0x0800489f
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047c9 	.word	0x080047c9
 80047c0:	0800483f 	.word	0x0800483f
 80047c4:	08004853 	.word	0x08004853
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	18d1      	adds	r1, r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e8:	f7ff ff5c 	bl	80046a4 <prvInsertTimerInActiveList>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06c      	beq.n	80048cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d061      	beq.n	80048cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	441a      	add	r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	2100      	movs	r1, #0
 8004818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481a:	f7ff fe01 	bl	8004420 <xTimerGenericCommand>
 800481e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d152      	bne.n	80048cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61bb      	str	r3, [r7, #24]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004850:	e03d      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	b2da      	uxtb	r2, r3
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	617b      	str	r3, [r7, #20]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	18d1      	adds	r1, r2, r3
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004898:	f7ff ff04 	bl	80046a4 <prvInsertTimerInActiveList>
					break;
 800489c:	e017      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ae:	f000 fbeb 	bl	8005088 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048b2:	e00c      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048c6:	e002      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
					break;
 80048cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <prvProcessReceivedCommands+0x1c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1d39      	adds	r1, r7, #4
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fbce 	bl	8003078 <xQueueReceive>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f47f af26 	bne.w	8004730 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3730      	adds	r7, #48	@ 0x30
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000dd8 	.word	0x20000dd8

080048f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048fa:	e049      	b.n	8004990 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048fc:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004906:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe f89f 	bl	8002a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02f      	beq.n	8004990 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d90e      	bls.n	8004960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f844 	bl	80029e6 <vListInsert>
 800495e:	e017      	b.n	8004990 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004960:	2300      	movs	r3, #0
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	2100      	movs	r1, #0
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff fd58 	bl	8004420 <xTimerGenericCommand>
 8004970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	603b      	str	r3, [r7, #0]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1b0      	bne.n	80048fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <prvSwitchTimerLists+0xc8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 80049a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049a8:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <prvSwitchTimerLists+0xc8>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6013      	str	r3, [r2, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000dd0 	.word	0x20000dd0
 80049bc:	20000dd4 	.word	0x20000dd4

080049c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049c6:	f000 f96f 	bl	8004ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049ca:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d120      	bne.n	8004a14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049d2:	4814      	ldr	r0, [pc, #80]	@ (8004a24 <prvCheckForValidListAndQueue+0x64>)
 80049d4:	f7fd ffb6 	bl	8002944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049d8:	4813      	ldr	r0, [pc, #76]	@ (8004a28 <prvCheckForValidListAndQueue+0x68>)
 80049da:	f7fd ffb3 	bl	8002944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049de:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <prvCheckForValidListAndQueue+0x6c>)
 80049e0:	4a10      	ldr	r2, [pc, #64]	@ (8004a24 <prvCheckForValidListAndQueue+0x64>)
 80049e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <prvCheckForValidListAndQueue+0x70>)
 80049e6:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <prvCheckForValidListAndQueue+0x68>)
 80049e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <prvCheckForValidListAndQueue+0x74>)
 80049f0:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <prvCheckForValidListAndQueue+0x78>)
 80049f2:	2110      	movs	r1, #16
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7fe f8c3 	bl	8002b80 <xQueueGenericCreateStatic>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 80049fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	490b      	ldr	r1, [pc, #44]	@ (8004a3c <prvCheckForValidListAndQueue+0x7c>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fd24 	bl	800345c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a14:	f000 f97a 	bl	8004d0c <vPortExitCritical>
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000dd8 	.word	0x20000dd8
 8004a24:	20000da8 	.word	0x20000da8
 8004a28:	20000dbc 	.word	0x20000dbc
 8004a2c:	20000dd0 	.word	0x20000dd0
 8004a30:	20000dd4 	.word	0x20000dd4
 8004a34:	20000e84 	.word	0x20000e84
 8004a38:	20000de4 	.word	0x20000de4
 8004a3c:	08005db0 	.word	0x08005db0

08004a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a70:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <pxPortInitialiseStack+0x64>)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b14      	subs	r3, #20
 8004a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b04      	subs	r3, #4
 8004a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f06f 0202 	mvn.w	r2, #2
 8004a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b20      	subs	r3, #32
 8004a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a96:	68fb      	ldr	r3, [r7, #12]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	08004aa9 	.word	0x08004aa9

08004aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <prvTaskExitError+0x58>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d00b      	beq.n	8004ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60fb      	str	r3, [r7, #12]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <prvTaskExitError+0x28>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60bb      	str	r3, [r7, #8]
}
 8004ae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ae8:	bf00      	nop
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0fc      	beq.n	8004aea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000000c 	.word	0x2000000c
	...

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	4770      	bx	lr
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst2>:
 8004b30:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b38:	4808      	ldr	r0, [pc, #32]	@ (8004b5c <prvPortStartFirstTask+0x24>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8814 	msr	CONTROL, r0
 8004b4a:	b662      	cpsie	i
 8004b4c:	b661      	cpsie	f
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	df00      	svc	0
 8004b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed08 	.word	0xe000ed08

08004b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <xPortStartScheduler+0x124>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a47      	ldr	r2, [pc, #284]	@ (8004c88 <xPortStartScheduler+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10b      	bne.n	8004b88 <xPortStartScheduler+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b88:	4b3e      	ldr	r3, [pc, #248]	@ (8004c84 <xPortStartScheduler+0x124>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c8c <xPortStartScheduler+0x12c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10b      	bne.n	8004baa <xPortStartScheduler+0x4a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60fb      	str	r3, [r7, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004baa:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <xPortStartScheduler+0x130>)
 8004bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	22ff      	movs	r2, #255	@ 0xff
 8004bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <xPortStartScheduler+0x134>)
 8004bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bd2:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bd8:	e009      	b.n	8004bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004bda:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d0ef      	beq.n	8004bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bfa:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1c3 0307 	rsb	r3, r3, #7
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00b      	beq.n	8004c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60bb      	str	r3, [r7, #8]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c28:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c3c:	4b17      	ldr	r3, [pc, #92]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c48:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a13      	ldr	r2, [pc, #76]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c54:	f000 f8da 	bl	8004e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c58:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <xPortStartScheduler+0x140>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c5e:	f000 f8f9 	bl	8004e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <xPortStartScheduler+0x144>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca4 <xPortStartScheduler+0x144>)
 8004c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c6e:	f7ff ff63 	bl	8004b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c72:	f7ff f82b 	bl	8003ccc <vTaskSwitchContext>
	prvTaskExitError();
 8004c76:	f7ff ff17 	bl	8004aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	410fc271 	.word	0x410fc271
 8004c8c:	410fc270 	.word	0x410fc270
 8004c90:	e000e400 	.word	0xe000e400
 8004c94:	20000ed4 	.word	0x20000ed4
 8004c98:	20000ed8 	.word	0x20000ed8
 8004c9c:	e000ed20 	.word	0xe000ed20
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	e000ef34 	.word	0xe000ef34

08004ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d110      	bne.n	8004cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <vPortEnterCritical+0x60>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <vPortEnterCritical+0x4a>
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <vPortExitCritical+0x26>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	607b      	str	r3, [r7, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d3c:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <vPortExitCritical+0x44>
 8004d44:	2300      	movs	r3, #0
 8004d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f383 8811 	msr	BASEPRI, r3
}
 8004d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d60:	f3ef 8009 	mrs	r0, PSP
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <pxCurrentTCBConst>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f01e 0f10 	tst.w	lr, #16
 8004d70:	bf08      	it	eq
 8004d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	6010      	str	r0, [r2, #0]
 8004d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d84:	f380 8811 	msr	BASEPRI, r0
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f7fe ff9c 	bl	8003ccc <vTaskSwitchContext>
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f380 8811 	msr	BASEPRI, r0
 8004d9c:	bc09      	pop	{r0, r3}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da6:	f01e 0f10 	tst.w	lr, #16
 8004daa:	bf08      	it	eq
 8004dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004db0:	f380 8809 	msr	PSP, r0
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst>:
 8004dc0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004de2:	f7fe feb9 	bl	8003b58 <xTaskIncrementTick>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <xPortSysTickHandler+0x40>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f383 8811 	msr	BASEPRI, r3
}
 8004dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <vPortSetupTimerInterrupt+0x38>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <vPortSetupTimerInterrupt+0x3c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <vPortSetupTimerInterrupt+0x40>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <vPortSetupTimerInterrupt+0x44>)
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e2e:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e010 	.word	0xe000e010
 8004e44:	e000e018 	.word	0xe000e018
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	10624dd3 	.word	0x10624dd3
 8004e50:	e000e014 	.word	0xe000e014

08004e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004e64 <vPortEnableVFP+0x10>
 8004e58:	6801      	ldr	r1, [r0, #0]
 8004e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004e5e:	6001      	str	r1, [r0, #0]
 8004e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e62:	bf00      	nop
 8004e64:	e000ed88 	.word	0xe000ed88

08004e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e6e:	f3ef 8305 	mrs	r3, IPSR
 8004e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	d915      	bls.n	8004ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e7a:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <vPortValidateInterruptPriority+0x74>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e84:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <vPortValidateInterruptPriority+0x78>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	7afa      	ldrb	r2, [r7, #11]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d20b      	bcs.n	8004ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <vPortValidateInterruptPriority+0x7c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <vPortValidateInterruptPriority+0x80>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90b      	bls.n	8004ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	603b      	str	r3, [r7, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortValidateInterruptPriority+0x62>
	}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e3f0 	.word	0xe000e3f0
 8004ee0:	20000ed4 	.word	0x20000ed4
 8004ee4:	e000ed0c 	.word	0xe000ed0c
 8004ee8:	20000ed8 	.word	0x20000ed8

08004eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	@ 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ef8:	f7fe fd72 	bl	80039e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004efc:	4b5c      	ldr	r3, [pc, #368]	@ (8005070 <pvPortMalloc+0x184>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f04:	f000 f924 	bl	8005150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f08:	4b5a      	ldr	r3, [pc, #360]	@ (8005074 <pvPortMalloc+0x188>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8095 	bne.w	8005040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01e      	beq.n	8004f5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d015      	beq.n	8004f5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	3308      	adds	r3, #8
 8004f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <pvPortMalloc+0x6e>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	617b      	str	r3, [r7, #20]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d06f      	beq.n	8005040 <pvPortMalloc+0x154>
 8004f60:	4b45      	ldr	r3, [pc, #276]	@ (8005078 <pvPortMalloc+0x18c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d86a      	bhi.n	8005040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f6a:	4b44      	ldr	r3, [pc, #272]	@ (800507c <pvPortMalloc+0x190>)
 8004f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f6e:	4b43      	ldr	r3, [pc, #268]	@ (800507c <pvPortMalloc+0x190>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f74:	e004      	b.n	8004f80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d903      	bls.n	8004f92 <pvPortMalloc+0xa6>
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f92:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <pvPortMalloc+0x184>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d051      	beq.n	8005040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4413      	add	r3, r2
 8004fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1ad2      	subs	r2, r2, r3
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d920      	bls.n	8005000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <pvPortMalloc+0xfc>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffa:	69b8      	ldr	r0, [r7, #24]
 8004ffc:	f000 f90a 	bl	8005214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005000:	4b1d      	ldr	r3, [pc, #116]	@ (8005078 <pvPortMalloc+0x18c>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <pvPortMalloc+0x18c>)
 800500c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <pvPortMalloc+0x18c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <pvPortMalloc+0x194>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d203      	bcs.n	8005022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501a:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <pvPortMalloc+0x18c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	@ (8005080 <pvPortMalloc+0x194>)
 8005020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <pvPortMalloc+0x188>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	431a      	orrs	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <pvPortMalloc+0x198>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <pvPortMalloc+0x198>)
 800503e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005040:	f7fe fcdc 	bl	80039fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <pvPortMalloc+0x17a>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <pvPortMalloc+0x176>
	return pvReturn;
 8005066:	69fb      	ldr	r3, [r7, #28]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3728      	adds	r7, #40	@ 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20004ae4 	.word	0x20004ae4
 8005074:	20004af8 	.word	0x20004af8
 8005078:	20004ae8 	.word	0x20004ae8
 800507c:	20004adc 	.word	0x20004adc
 8005080:	20004aec 	.word	0x20004aec
 8005084:	20004af0 	.word	0x20004af0

08005088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d04f      	beq.n	800513a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800509a:	2308      	movs	r3, #8
 800509c:	425b      	negs	r3, r3
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4413      	add	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <vPortFree+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <vPortFree+0x46>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <vPortFree+0x66>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <vPortFree+0xbc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11a      	bne.n	800513a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4b0e      	ldr	r3, [pc, #56]	@ (8005144 <vPortFree+0xbc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005114:	f7fe fc64 	bl	80039e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <vPortFree+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4413      	add	r3, r2
 8005122:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <vPortFree+0xc0>)
 8005124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005126:	6938      	ldr	r0, [r7, #16]
 8005128:	f000 f874 	bl	8005214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800512c:	4b07      	ldr	r3, [pc, #28]	@ (800514c <vPortFree+0xc4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a06      	ldr	r2, [pc, #24]	@ (800514c <vPortFree+0xc4>)
 8005134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005136:	f7fe fc61 	bl	80039fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20004af8 	.word	0x20004af8
 8005148:	20004ae8 	.word	0x20004ae8
 800514c:	20004af4 	.word	0x20004af4

08005150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005156:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800515a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800515c:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <prvHeapInit+0xac>)
 800515e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3307      	adds	r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <prvHeapInit+0xac>)
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005188:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <prvHeapInit+0xb0>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800518e:	4b1c      	ldr	r3, [pc, #112]	@ (8005200 <prvHeapInit+0xb0>)
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800519c:	2208      	movs	r2, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a15      	ldr	r2, [pc, #84]	@ (8005204 <prvHeapInit+0xb4>)
 80051b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <prvHeapInit+0xb4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <prvHeapInit+0xb4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <prvHeapInit+0xb4>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <prvHeapInit+0xb8>)
 80051de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a09      	ldr	r2, [pc, #36]	@ (800520c <prvHeapInit+0xbc>)
 80051e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051e8:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <prvHeapInit+0xc0>)
 80051ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000edc 	.word	0x20000edc
 8005200:	20004adc 	.word	0x20004adc
 8005204:	20004ae4 	.word	0x20004ae4
 8005208:	20004aec 	.word	0x20004aec
 800520c:	20004ae8 	.word	0x20004ae8
 8005210:	20004af8 	.word	0x20004af8

08005214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <prvInsertBlockIntoFreeList+0xac>)
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <prvInsertBlockIntoFreeList+0x14>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d8f7      	bhi.n	8005222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d108      	bne.n	8005256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d118      	bne.n	800529c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d00d      	beq.n	8005292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e008      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005292:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e003      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d002      	beq.n	80052b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20004adc 	.word	0x20004adc
 80052c4:	20004ae4 	.word	0x20004ae4

080052c8 <siprintf>:
 80052c8:	b40e      	push	{r1, r2, r3}
 80052ca:	b500      	push	{lr}
 80052cc:	b09c      	sub	sp, #112	@ 0x70
 80052ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80052d0:	9002      	str	r0, [sp, #8]
 80052d2:	9006      	str	r0, [sp, #24]
 80052d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052d8:	4809      	ldr	r0, [pc, #36]	@ (8005300 <siprintf+0x38>)
 80052da:	9107      	str	r1, [sp, #28]
 80052dc:	9104      	str	r1, [sp, #16]
 80052de:	4909      	ldr	r1, [pc, #36]	@ (8005304 <siprintf+0x3c>)
 80052e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e4:	9105      	str	r1, [sp, #20]
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	a902      	add	r1, sp, #8
 80052ec:	f000 f9f8 	bl	80056e0 <_svfiprintf_r>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	b01c      	add	sp, #112	@ 0x70
 80052f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052fc:	b003      	add	sp, #12
 80052fe:	4770      	bx	lr
 8005300:	20000010 	.word	0x20000010
 8005304:	ffff0208 	.word	0xffff0208

08005308 <memset>:
 8005308:	4402      	add	r2, r0
 800530a:	4603      	mov	r3, r0
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	f803 1b01 	strb.w	r1, [r3], #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <_reclaim_reent>:
 8005318:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <_reclaim_reent+0xa8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4283      	cmp	r3, r0
 800531e:	b570      	push	{r4, r5, r6, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d04b      	beq.n	80053bc <_reclaim_reent+0xa4>
 8005324:	69c3      	ldr	r3, [r0, #28]
 8005326:	b1ab      	cbz	r3, 8005354 <_reclaim_reent+0x3c>
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	b16b      	cbz	r3, 8005348 <_reclaim_reent+0x30>
 800532c:	2500      	movs	r5, #0
 800532e:	69e3      	ldr	r3, [r4, #28]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	5959      	ldr	r1, [r3, r5]
 8005334:	2900      	cmp	r1, #0
 8005336:	d13b      	bne.n	80053b0 <_reclaim_reent+0x98>
 8005338:	3504      	adds	r5, #4
 800533a:	2d80      	cmp	r5, #128	@ 0x80
 800533c:	d1f7      	bne.n	800532e <_reclaim_reent+0x16>
 800533e:	69e3      	ldr	r3, [r4, #28]
 8005340:	4620      	mov	r0, r4
 8005342:	68d9      	ldr	r1, [r3, #12]
 8005344:	f000 f878 	bl	8005438 <_free_r>
 8005348:	69e3      	ldr	r3, [r4, #28]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	b111      	cbz	r1, 8005354 <_reclaim_reent+0x3c>
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f872 	bl	8005438 <_free_r>
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	b111      	cbz	r1, 800535e <_reclaim_reent+0x46>
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f86d 	bl	8005438 <_free_r>
 800535e:	69e1      	ldr	r1, [r4, #28]
 8005360:	b111      	cbz	r1, 8005368 <_reclaim_reent+0x50>
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f868 	bl	8005438 <_free_r>
 8005368:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800536a:	b111      	cbz	r1, 8005372 <_reclaim_reent+0x5a>
 800536c:	4620      	mov	r0, r4
 800536e:	f000 f863 	bl	8005438 <_free_r>
 8005372:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005374:	b111      	cbz	r1, 800537c <_reclaim_reent+0x64>
 8005376:	4620      	mov	r0, r4
 8005378:	f000 f85e 	bl	8005438 <_free_r>
 800537c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800537e:	b111      	cbz	r1, 8005386 <_reclaim_reent+0x6e>
 8005380:	4620      	mov	r0, r4
 8005382:	f000 f859 	bl	8005438 <_free_r>
 8005386:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005388:	b111      	cbz	r1, 8005390 <_reclaim_reent+0x78>
 800538a:	4620      	mov	r0, r4
 800538c:	f000 f854 	bl	8005438 <_free_r>
 8005390:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005392:	b111      	cbz	r1, 800539a <_reclaim_reent+0x82>
 8005394:	4620      	mov	r0, r4
 8005396:	f000 f84f 	bl	8005438 <_free_r>
 800539a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800539c:	b111      	cbz	r1, 80053a4 <_reclaim_reent+0x8c>
 800539e:	4620      	mov	r0, r4
 80053a0:	f000 f84a 	bl	8005438 <_free_r>
 80053a4:	6a23      	ldr	r3, [r4, #32]
 80053a6:	b14b      	cbz	r3, 80053bc <_reclaim_reent+0xa4>
 80053a8:	4620      	mov	r0, r4
 80053aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053ae:	4718      	bx	r3
 80053b0:	680e      	ldr	r6, [r1, #0]
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 f840 	bl	8005438 <_free_r>
 80053b8:	4631      	mov	r1, r6
 80053ba:	e7bb      	b.n	8005334 <_reclaim_reent+0x1c>
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	bf00      	nop
 80053c0:	20000010 	.word	0x20000010

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	@ (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000010 	.word	0x20000010

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	@ (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005414 <__libc_init_array+0x44>)
 80053e4:	f000 fc66 	bl	8005cb4 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	08005e0c 	.word	0x08005e0c
 800540c:	08005e0c 	.word	0x08005e0c
 8005410:	08005e0c 	.word	0x08005e0c
 8005414:	08005e10 	.word	0x08005e10

08005418 <__retarget_lock_acquire_recursive>:
 8005418:	4770      	bx	lr

0800541a <__retarget_lock_release_recursive>:
 800541a:	4770      	bx	lr

0800541c <memcpy>:
 800541c:	440a      	add	r2, r1
 800541e:	4291      	cmp	r1, r2
 8005420:	f100 33ff 	add.w	r3, r0, #4294967295
 8005424:	d100      	bne.n	8005428 <memcpy+0xc>
 8005426:	4770      	bx	lr
 8005428:	b510      	push	{r4, lr}
 800542a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800542e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005432:	4291      	cmp	r1, r2
 8005434:	d1f9      	bne.n	800542a <memcpy+0xe>
 8005436:	bd10      	pop	{r4, pc}

08005438 <_free_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4605      	mov	r5, r0
 800543c:	2900      	cmp	r1, #0
 800543e:	d041      	beq.n	80054c4 <_free_r+0x8c>
 8005440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005444:	1f0c      	subs	r4, r1, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfb8      	it	lt
 800544a:	18e4      	addlt	r4, r4, r3
 800544c:	f000 f8e0 	bl	8005610 <__malloc_lock>
 8005450:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <_free_r+0x90>)
 8005452:	6813      	ldr	r3, [r2, #0]
 8005454:	b933      	cbnz	r3, 8005464 <_free_r+0x2c>
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	6014      	str	r4, [r2, #0]
 800545a:	4628      	mov	r0, r5
 800545c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005460:	f000 b8dc 	b.w	800561c <__malloc_unlock>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d908      	bls.n	800547a <_free_r+0x42>
 8005468:	6820      	ldr	r0, [r4, #0]
 800546a:	1821      	adds	r1, r4, r0
 800546c:	428b      	cmp	r3, r1
 800546e:	bf01      	itttt	eq
 8005470:	6819      	ldreq	r1, [r3, #0]
 8005472:	685b      	ldreq	r3, [r3, #4]
 8005474:	1809      	addeq	r1, r1, r0
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	e7ed      	b.n	8005456 <_free_r+0x1e>
 800547a:	461a      	mov	r2, r3
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b10b      	cbz	r3, 8005484 <_free_r+0x4c>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d9fa      	bls.n	800547a <_free_r+0x42>
 8005484:	6811      	ldr	r1, [r2, #0]
 8005486:	1850      	adds	r0, r2, r1
 8005488:	42a0      	cmp	r0, r4
 800548a:	d10b      	bne.n	80054a4 <_free_r+0x6c>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	4401      	add	r1, r0
 8005490:	1850      	adds	r0, r2, r1
 8005492:	4283      	cmp	r3, r0
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	d1e0      	bne.n	800545a <_free_r+0x22>
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	6053      	str	r3, [r2, #4]
 800549e:	4408      	add	r0, r1
 80054a0:	6010      	str	r0, [r2, #0]
 80054a2:	e7da      	b.n	800545a <_free_r+0x22>
 80054a4:	d902      	bls.n	80054ac <_free_r+0x74>
 80054a6:	230c      	movs	r3, #12
 80054a8:	602b      	str	r3, [r5, #0]
 80054aa:	e7d6      	b.n	800545a <_free_r+0x22>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	1821      	adds	r1, r4, r0
 80054b0:	428b      	cmp	r3, r1
 80054b2:	bf04      	itt	eq
 80054b4:	6819      	ldreq	r1, [r3, #0]
 80054b6:	685b      	ldreq	r3, [r3, #4]
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	bf04      	itt	eq
 80054bc:	1809      	addeq	r1, r1, r0
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	6054      	str	r4, [r2, #4]
 80054c2:	e7ca      	b.n	800545a <_free_r+0x22>
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	20004c40 	.word	0x20004c40

080054cc <sbrk_aligned>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4e0f      	ldr	r6, [pc, #60]	@ (800550c <sbrk_aligned+0x40>)
 80054d0:	460c      	mov	r4, r1
 80054d2:	6831      	ldr	r1, [r6, #0]
 80054d4:	4605      	mov	r5, r0
 80054d6:	b911      	cbnz	r1, 80054de <sbrk_aligned+0x12>
 80054d8:	f000 fba6 	bl	8005c28 <_sbrk_r>
 80054dc:	6030      	str	r0, [r6, #0]
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fba1 	bl	8005c28 <_sbrk_r>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	d103      	bne.n	80054f2 <sbrk_aligned+0x26>
 80054ea:	f04f 34ff 	mov.w	r4, #4294967295
 80054ee:	4620      	mov	r0, r4
 80054f0:	bd70      	pop	{r4, r5, r6, pc}
 80054f2:	1cc4      	adds	r4, r0, #3
 80054f4:	f024 0403 	bic.w	r4, r4, #3
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d0f8      	beq.n	80054ee <sbrk_aligned+0x22>
 80054fc:	1a21      	subs	r1, r4, r0
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 fb92 	bl	8005c28 <_sbrk_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d1f2      	bne.n	80054ee <sbrk_aligned+0x22>
 8005508:	e7ef      	b.n	80054ea <sbrk_aligned+0x1e>
 800550a:	bf00      	nop
 800550c:	20004c3c 	.word	0x20004c3c

08005510 <_malloc_r>:
 8005510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005514:	1ccd      	adds	r5, r1, #3
 8005516:	f025 0503 	bic.w	r5, r5, #3
 800551a:	3508      	adds	r5, #8
 800551c:	2d0c      	cmp	r5, #12
 800551e:	bf38      	it	cc
 8005520:	250c      	movcc	r5, #12
 8005522:	2d00      	cmp	r5, #0
 8005524:	4606      	mov	r6, r0
 8005526:	db01      	blt.n	800552c <_malloc_r+0x1c>
 8005528:	42a9      	cmp	r1, r5
 800552a:	d904      	bls.n	8005536 <_malloc_r+0x26>
 800552c:	230c      	movs	r3, #12
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	2000      	movs	r0, #0
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800560c <_malloc_r+0xfc>
 800553a:	f000 f869 	bl	8005610 <__malloc_lock>
 800553e:	f8d8 3000 	ldr.w	r3, [r8]
 8005542:	461c      	mov	r4, r3
 8005544:	bb44      	cbnz	r4, 8005598 <_malloc_r+0x88>
 8005546:	4629      	mov	r1, r5
 8005548:	4630      	mov	r0, r6
 800554a:	f7ff ffbf 	bl	80054cc <sbrk_aligned>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	4604      	mov	r4, r0
 8005552:	d158      	bne.n	8005606 <_malloc_r+0xf6>
 8005554:	f8d8 4000 	ldr.w	r4, [r8]
 8005558:	4627      	mov	r7, r4
 800555a:	2f00      	cmp	r7, #0
 800555c:	d143      	bne.n	80055e6 <_malloc_r+0xd6>
 800555e:	2c00      	cmp	r4, #0
 8005560:	d04b      	beq.n	80055fa <_malloc_r+0xea>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	4639      	mov	r1, r7
 8005566:	4630      	mov	r0, r6
 8005568:	eb04 0903 	add.w	r9, r4, r3
 800556c:	f000 fb5c 	bl	8005c28 <_sbrk_r>
 8005570:	4581      	cmp	r9, r0
 8005572:	d142      	bne.n	80055fa <_malloc_r+0xea>
 8005574:	6821      	ldr	r1, [r4, #0]
 8005576:	1a6d      	subs	r5, r5, r1
 8005578:	4629      	mov	r1, r5
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffa6 	bl	80054cc <sbrk_aligned>
 8005580:	3001      	adds	r0, #1
 8005582:	d03a      	beq.n	80055fa <_malloc_r+0xea>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	442b      	add	r3, r5
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	f8d8 3000 	ldr.w	r3, [r8]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	bb62      	cbnz	r2, 80055ec <_malloc_r+0xdc>
 8005592:	f8c8 7000 	str.w	r7, [r8]
 8005596:	e00f      	b.n	80055b8 <_malloc_r+0xa8>
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	1b52      	subs	r2, r2, r5
 800559c:	d420      	bmi.n	80055e0 <_malloc_r+0xd0>
 800559e:	2a0b      	cmp	r2, #11
 80055a0:	d917      	bls.n	80055d2 <_malloc_r+0xc2>
 80055a2:	1961      	adds	r1, r4, r5
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	6025      	str	r5, [r4, #0]
 80055a8:	bf18      	it	ne
 80055aa:	6059      	strne	r1, [r3, #4]
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	bf08      	it	eq
 80055b0:	f8c8 1000 	streq.w	r1, [r8]
 80055b4:	5162      	str	r2, [r4, r5]
 80055b6:	604b      	str	r3, [r1, #4]
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 f82f 	bl	800561c <__malloc_unlock>
 80055be:	f104 000b 	add.w	r0, r4, #11
 80055c2:	1d23      	adds	r3, r4, #4
 80055c4:	f020 0007 	bic.w	r0, r0, #7
 80055c8:	1ac2      	subs	r2, r0, r3
 80055ca:	bf1c      	itt	ne
 80055cc:	1a1b      	subne	r3, r3, r0
 80055ce:	50a3      	strne	r3, [r4, r2]
 80055d0:	e7af      	b.n	8005532 <_malloc_r+0x22>
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	bf0c      	ite	eq
 80055d8:	f8c8 2000 	streq.w	r2, [r8]
 80055dc:	605a      	strne	r2, [r3, #4]
 80055de:	e7eb      	b.n	80055b8 <_malloc_r+0xa8>
 80055e0:	4623      	mov	r3, r4
 80055e2:	6864      	ldr	r4, [r4, #4]
 80055e4:	e7ae      	b.n	8005544 <_malloc_r+0x34>
 80055e6:	463c      	mov	r4, r7
 80055e8:	687f      	ldr	r7, [r7, #4]
 80055ea:	e7b6      	b.n	800555a <_malloc_r+0x4a>
 80055ec:	461a      	mov	r2, r3
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d1fb      	bne.n	80055ec <_malloc_r+0xdc>
 80055f4:	2300      	movs	r3, #0
 80055f6:	6053      	str	r3, [r2, #4]
 80055f8:	e7de      	b.n	80055b8 <_malloc_r+0xa8>
 80055fa:	230c      	movs	r3, #12
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 f80c 	bl	800561c <__malloc_unlock>
 8005604:	e794      	b.n	8005530 <_malloc_r+0x20>
 8005606:	6005      	str	r5, [r0, #0]
 8005608:	e7d6      	b.n	80055b8 <_malloc_r+0xa8>
 800560a:	bf00      	nop
 800560c:	20004c40 	.word	0x20004c40

08005610 <__malloc_lock>:
 8005610:	4801      	ldr	r0, [pc, #4]	@ (8005618 <__malloc_lock+0x8>)
 8005612:	f7ff bf01 	b.w	8005418 <__retarget_lock_acquire_recursive>
 8005616:	bf00      	nop
 8005618:	20004c38 	.word	0x20004c38

0800561c <__malloc_unlock>:
 800561c:	4801      	ldr	r0, [pc, #4]	@ (8005624 <__malloc_unlock+0x8>)
 800561e:	f7ff befc 	b.w	800541a <__retarget_lock_release_recursive>
 8005622:	bf00      	nop
 8005624:	20004c38 	.word	0x20004c38

08005628 <__ssputs_r>:
 8005628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	688e      	ldr	r6, [r1, #8]
 800562e:	461f      	mov	r7, r3
 8005630:	42be      	cmp	r6, r7
 8005632:	680b      	ldr	r3, [r1, #0]
 8005634:	4682      	mov	sl, r0
 8005636:	460c      	mov	r4, r1
 8005638:	4690      	mov	r8, r2
 800563a:	d82d      	bhi.n	8005698 <__ssputs_r+0x70>
 800563c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005640:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005644:	d026      	beq.n	8005694 <__ssputs_r+0x6c>
 8005646:	6965      	ldr	r5, [r4, #20]
 8005648:	6909      	ldr	r1, [r1, #16]
 800564a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800564e:	eba3 0901 	sub.w	r9, r3, r1
 8005652:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005656:	1c7b      	adds	r3, r7, #1
 8005658:	444b      	add	r3, r9
 800565a:	106d      	asrs	r5, r5, #1
 800565c:	429d      	cmp	r5, r3
 800565e:	bf38      	it	cc
 8005660:	461d      	movcc	r5, r3
 8005662:	0553      	lsls	r3, r2, #21
 8005664:	d527      	bpl.n	80056b6 <__ssputs_r+0x8e>
 8005666:	4629      	mov	r1, r5
 8005668:	f7ff ff52 	bl	8005510 <_malloc_r>
 800566c:	4606      	mov	r6, r0
 800566e:	b360      	cbz	r0, 80056ca <__ssputs_r+0xa2>
 8005670:	6921      	ldr	r1, [r4, #16]
 8005672:	464a      	mov	r2, r9
 8005674:	f7ff fed2 	bl	800541c <memcpy>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	6126      	str	r6, [r4, #16]
 8005686:	6165      	str	r5, [r4, #20]
 8005688:	444e      	add	r6, r9
 800568a:	eba5 0509 	sub.w	r5, r5, r9
 800568e:	6026      	str	r6, [r4, #0]
 8005690:	60a5      	str	r5, [r4, #8]
 8005692:	463e      	mov	r6, r7
 8005694:	42be      	cmp	r6, r7
 8005696:	d900      	bls.n	800569a <__ssputs_r+0x72>
 8005698:	463e      	mov	r6, r7
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	4632      	mov	r2, r6
 800569e:	4641      	mov	r1, r8
 80056a0:	f000 faa8 	bl	8005bf4 <memmove>
 80056a4:	68a3      	ldr	r3, [r4, #8]
 80056a6:	1b9b      	subs	r3, r3, r6
 80056a8:	60a3      	str	r3, [r4, #8]
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	4433      	add	r3, r6
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	2000      	movs	r0, #0
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	462a      	mov	r2, r5
 80056b8:	f000 fac6 	bl	8005c48 <_realloc_r>
 80056bc:	4606      	mov	r6, r0
 80056be:	2800      	cmp	r0, #0
 80056c0:	d1e0      	bne.n	8005684 <__ssputs_r+0x5c>
 80056c2:	6921      	ldr	r1, [r4, #16]
 80056c4:	4650      	mov	r0, sl
 80056c6:	f7ff feb7 	bl	8005438 <_free_r>
 80056ca:	230c      	movs	r3, #12
 80056cc:	f8ca 3000 	str.w	r3, [sl]
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	e7e9      	b.n	80056b2 <__ssputs_r+0x8a>
	...

080056e0 <_svfiprintf_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	4698      	mov	r8, r3
 80056e6:	898b      	ldrh	r3, [r1, #12]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	b09d      	sub	sp, #116	@ 0x74
 80056ec:	4607      	mov	r7, r0
 80056ee:	460d      	mov	r5, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	d510      	bpl.n	8005716 <_svfiprintf_r+0x36>
 80056f4:	690b      	ldr	r3, [r1, #16]
 80056f6:	b973      	cbnz	r3, 8005716 <_svfiprintf_r+0x36>
 80056f8:	2140      	movs	r1, #64	@ 0x40
 80056fa:	f7ff ff09 	bl	8005510 <_malloc_r>
 80056fe:	6028      	str	r0, [r5, #0]
 8005700:	6128      	str	r0, [r5, #16]
 8005702:	b930      	cbnz	r0, 8005712 <_svfiprintf_r+0x32>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	b01d      	add	sp, #116	@ 0x74
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	2340      	movs	r3, #64	@ 0x40
 8005714:	616b      	str	r3, [r5, #20]
 8005716:	2300      	movs	r3, #0
 8005718:	9309      	str	r3, [sp, #36]	@ 0x24
 800571a:	2320      	movs	r3, #32
 800571c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005720:	f8cd 800c 	str.w	r8, [sp, #12]
 8005724:	2330      	movs	r3, #48	@ 0x30
 8005726:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058c4 <_svfiprintf_r+0x1e4>
 800572a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800572e:	f04f 0901 	mov.w	r9, #1
 8005732:	4623      	mov	r3, r4
 8005734:	469a      	mov	sl, r3
 8005736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800573a:	b10a      	cbz	r2, 8005740 <_svfiprintf_r+0x60>
 800573c:	2a25      	cmp	r2, #37	@ 0x25
 800573e:	d1f9      	bne.n	8005734 <_svfiprintf_r+0x54>
 8005740:	ebba 0b04 	subs.w	fp, sl, r4
 8005744:	d00b      	beq.n	800575e <_svfiprintf_r+0x7e>
 8005746:	465b      	mov	r3, fp
 8005748:	4622      	mov	r2, r4
 800574a:	4629      	mov	r1, r5
 800574c:	4638      	mov	r0, r7
 800574e:	f7ff ff6b 	bl	8005628 <__ssputs_r>
 8005752:	3001      	adds	r0, #1
 8005754:	f000 80a7 	beq.w	80058a6 <_svfiprintf_r+0x1c6>
 8005758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800575a:	445a      	add	r2, fp
 800575c:	9209      	str	r2, [sp, #36]	@ 0x24
 800575e:	f89a 3000 	ldrb.w	r3, [sl]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 809f 	beq.w	80058a6 <_svfiprintf_r+0x1c6>
 8005768:	2300      	movs	r3, #0
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005772:	f10a 0a01 	add.w	sl, sl, #1
 8005776:	9304      	str	r3, [sp, #16]
 8005778:	9307      	str	r3, [sp, #28]
 800577a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800577e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005780:	4654      	mov	r4, sl
 8005782:	2205      	movs	r2, #5
 8005784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005788:	484e      	ldr	r0, [pc, #312]	@ (80058c4 <_svfiprintf_r+0x1e4>)
 800578a:	f7fa fd29 	bl	80001e0 <memchr>
 800578e:	9a04      	ldr	r2, [sp, #16]
 8005790:	b9d8      	cbnz	r0, 80057ca <_svfiprintf_r+0xea>
 8005792:	06d0      	lsls	r0, r2, #27
 8005794:	bf44      	itt	mi
 8005796:	2320      	movmi	r3, #32
 8005798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800579c:	0711      	lsls	r1, r2, #28
 800579e:	bf44      	itt	mi
 80057a0:	232b      	movmi	r3, #43	@ 0x2b
 80057a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057a6:	f89a 3000 	ldrb.w	r3, [sl]
 80057aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ac:	d015      	beq.n	80057da <_svfiprintf_r+0xfa>
 80057ae:	9a07      	ldr	r2, [sp, #28]
 80057b0:	4654      	mov	r4, sl
 80057b2:	2000      	movs	r0, #0
 80057b4:	f04f 0c0a 	mov.w	ip, #10
 80057b8:	4621      	mov	r1, r4
 80057ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057be:	3b30      	subs	r3, #48	@ 0x30
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	d94b      	bls.n	800585c <_svfiprintf_r+0x17c>
 80057c4:	b1b0      	cbz	r0, 80057f4 <_svfiprintf_r+0x114>
 80057c6:	9207      	str	r2, [sp, #28]
 80057c8:	e014      	b.n	80057f4 <_svfiprintf_r+0x114>
 80057ca:	eba0 0308 	sub.w	r3, r0, r8
 80057ce:	fa09 f303 	lsl.w	r3, r9, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	46a2      	mov	sl, r4
 80057d8:	e7d2      	b.n	8005780 <_svfiprintf_r+0xa0>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	9103      	str	r1, [sp, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bfbb      	ittet	lt
 80057e6:	425b      	neglt	r3, r3
 80057e8:	f042 0202 	orrlt.w	r2, r2, #2
 80057ec:	9307      	strge	r3, [sp, #28]
 80057ee:	9307      	strlt	r3, [sp, #28]
 80057f0:	bfb8      	it	lt
 80057f2:	9204      	strlt	r2, [sp, #16]
 80057f4:	7823      	ldrb	r3, [r4, #0]
 80057f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80057f8:	d10a      	bne.n	8005810 <_svfiprintf_r+0x130>
 80057fa:	7863      	ldrb	r3, [r4, #1]
 80057fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80057fe:	d132      	bne.n	8005866 <_svfiprintf_r+0x186>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	1d1a      	adds	r2, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	9203      	str	r2, [sp, #12]
 8005808:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800580c:	3402      	adds	r4, #2
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058d4 <_svfiprintf_r+0x1f4>
 8005814:	7821      	ldrb	r1, [r4, #0]
 8005816:	2203      	movs	r2, #3
 8005818:	4650      	mov	r0, sl
 800581a:	f7fa fce1 	bl	80001e0 <memchr>
 800581e:	b138      	cbz	r0, 8005830 <_svfiprintf_r+0x150>
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	eba0 000a 	sub.w	r0, r0, sl
 8005826:	2240      	movs	r2, #64	@ 0x40
 8005828:	4082      	lsls	r2, r0
 800582a:	4313      	orrs	r3, r2
 800582c:	3401      	adds	r4, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005834:	4824      	ldr	r0, [pc, #144]	@ (80058c8 <_svfiprintf_r+0x1e8>)
 8005836:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800583a:	2206      	movs	r2, #6
 800583c:	f7fa fcd0 	bl	80001e0 <memchr>
 8005840:	2800      	cmp	r0, #0
 8005842:	d036      	beq.n	80058b2 <_svfiprintf_r+0x1d2>
 8005844:	4b21      	ldr	r3, [pc, #132]	@ (80058cc <_svfiprintf_r+0x1ec>)
 8005846:	bb1b      	cbnz	r3, 8005890 <_svfiprintf_r+0x1b0>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	3308      	adds	r3, #8
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005856:	4433      	add	r3, r6
 8005858:	9309      	str	r3, [sp, #36]	@ 0x24
 800585a:	e76a      	b.n	8005732 <_svfiprintf_r+0x52>
 800585c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005860:	460c      	mov	r4, r1
 8005862:	2001      	movs	r0, #1
 8005864:	e7a8      	b.n	80057b8 <_svfiprintf_r+0xd8>
 8005866:	2300      	movs	r3, #0
 8005868:	3401      	adds	r4, #1
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4619      	mov	r1, r3
 800586e:	f04f 0c0a 	mov.w	ip, #10
 8005872:	4620      	mov	r0, r4
 8005874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005878:	3a30      	subs	r2, #48	@ 0x30
 800587a:	2a09      	cmp	r2, #9
 800587c:	d903      	bls.n	8005886 <_svfiprintf_r+0x1a6>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0c6      	beq.n	8005810 <_svfiprintf_r+0x130>
 8005882:	9105      	str	r1, [sp, #20]
 8005884:	e7c4      	b.n	8005810 <_svfiprintf_r+0x130>
 8005886:	fb0c 2101 	mla	r1, ip, r1, r2
 800588a:	4604      	mov	r4, r0
 800588c:	2301      	movs	r3, #1
 800588e:	e7f0      	b.n	8005872 <_svfiprintf_r+0x192>
 8005890:	ab03      	add	r3, sp, #12
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	462a      	mov	r2, r5
 8005896:	4b0e      	ldr	r3, [pc, #56]	@ (80058d0 <_svfiprintf_r+0x1f0>)
 8005898:	a904      	add	r1, sp, #16
 800589a:	4638      	mov	r0, r7
 800589c:	f3af 8000 	nop.w
 80058a0:	1c42      	adds	r2, r0, #1
 80058a2:	4606      	mov	r6, r0
 80058a4:	d1d6      	bne.n	8005854 <_svfiprintf_r+0x174>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	065b      	lsls	r3, r3, #25
 80058aa:	f53f af2d 	bmi.w	8005708 <_svfiprintf_r+0x28>
 80058ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058b0:	e72c      	b.n	800570c <_svfiprintf_r+0x2c>
 80058b2:	ab03      	add	r3, sp, #12
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	462a      	mov	r2, r5
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <_svfiprintf_r+0x1f0>)
 80058ba:	a904      	add	r1, sp, #16
 80058bc:	4638      	mov	r0, r7
 80058be:	f000 f879 	bl	80059b4 <_printf_i>
 80058c2:	e7ed      	b.n	80058a0 <_svfiprintf_r+0x1c0>
 80058c4:	08005dd0 	.word	0x08005dd0
 80058c8:	08005dda 	.word	0x08005dda
 80058cc:	00000000 	.word	0x00000000
 80058d0:	08005629 	.word	0x08005629
 80058d4:	08005dd6 	.word	0x08005dd6

080058d8 <_printf_common>:
 80058d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058dc:	4616      	mov	r6, r2
 80058de:	4698      	mov	r8, r3
 80058e0:	688a      	ldr	r2, [r1, #8]
 80058e2:	690b      	ldr	r3, [r1, #16]
 80058e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	bfb8      	it	lt
 80058ec:	4613      	movlt	r3, r2
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058f4:	4607      	mov	r7, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	b10a      	cbz	r2, 80058fe <_printf_common+0x26>
 80058fa:	3301      	adds	r3, #1
 80058fc:	6033      	str	r3, [r6, #0]
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	0699      	lsls	r1, r3, #26
 8005902:	bf42      	ittt	mi
 8005904:	6833      	ldrmi	r3, [r6, #0]
 8005906:	3302      	addmi	r3, #2
 8005908:	6033      	strmi	r3, [r6, #0]
 800590a:	6825      	ldr	r5, [r4, #0]
 800590c:	f015 0506 	ands.w	r5, r5, #6
 8005910:	d106      	bne.n	8005920 <_printf_common+0x48>
 8005912:	f104 0a19 	add.w	sl, r4, #25
 8005916:	68e3      	ldr	r3, [r4, #12]
 8005918:	6832      	ldr	r2, [r6, #0]
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	42ab      	cmp	r3, r5
 800591e:	dc26      	bgt.n	800596e <_printf_common+0x96>
 8005920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005924:	6822      	ldr	r2, [r4, #0]
 8005926:	3b00      	subs	r3, #0
 8005928:	bf18      	it	ne
 800592a:	2301      	movne	r3, #1
 800592c:	0692      	lsls	r2, r2, #26
 800592e:	d42b      	bmi.n	8005988 <_printf_common+0xb0>
 8005930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005934:	4641      	mov	r1, r8
 8005936:	4638      	mov	r0, r7
 8005938:	47c8      	blx	r9
 800593a:	3001      	adds	r0, #1
 800593c:	d01e      	beq.n	800597c <_printf_common+0xa4>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	6922      	ldr	r2, [r4, #16]
 8005942:	f003 0306 	and.w	r3, r3, #6
 8005946:	2b04      	cmp	r3, #4
 8005948:	bf02      	ittt	eq
 800594a:	68e5      	ldreq	r5, [r4, #12]
 800594c:	6833      	ldreq	r3, [r6, #0]
 800594e:	1aed      	subeq	r5, r5, r3
 8005950:	68a3      	ldr	r3, [r4, #8]
 8005952:	bf0c      	ite	eq
 8005954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005958:	2500      	movne	r5, #0
 800595a:	4293      	cmp	r3, r2
 800595c:	bfc4      	itt	gt
 800595e:	1a9b      	subgt	r3, r3, r2
 8005960:	18ed      	addgt	r5, r5, r3
 8005962:	2600      	movs	r6, #0
 8005964:	341a      	adds	r4, #26
 8005966:	42b5      	cmp	r5, r6
 8005968:	d11a      	bne.n	80059a0 <_printf_common+0xc8>
 800596a:	2000      	movs	r0, #0
 800596c:	e008      	b.n	8005980 <_printf_common+0xa8>
 800596e:	2301      	movs	r3, #1
 8005970:	4652      	mov	r2, sl
 8005972:	4641      	mov	r1, r8
 8005974:	4638      	mov	r0, r7
 8005976:	47c8      	blx	r9
 8005978:	3001      	adds	r0, #1
 800597a:	d103      	bne.n	8005984 <_printf_common+0xac>
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005984:	3501      	adds	r5, #1
 8005986:	e7c6      	b.n	8005916 <_printf_common+0x3e>
 8005988:	18e1      	adds	r1, r4, r3
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	2030      	movs	r0, #48	@ 0x30
 800598e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005992:	4422      	add	r2, r4
 8005994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800599c:	3302      	adds	r3, #2
 800599e:	e7c7      	b.n	8005930 <_printf_common+0x58>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4622      	mov	r2, r4
 80059a4:	4641      	mov	r1, r8
 80059a6:	4638      	mov	r0, r7
 80059a8:	47c8      	blx	r9
 80059aa:	3001      	adds	r0, #1
 80059ac:	d0e6      	beq.n	800597c <_printf_common+0xa4>
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7d9      	b.n	8005966 <_printf_common+0x8e>
	...

080059b4 <_printf_i>:
 80059b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b8:	7e0f      	ldrb	r7, [r1, #24]
 80059ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059bc:	2f78      	cmp	r7, #120	@ 0x78
 80059be:	4691      	mov	r9, r2
 80059c0:	4680      	mov	r8, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	469a      	mov	sl, r3
 80059c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ca:	d807      	bhi.n	80059dc <_printf_i+0x28>
 80059cc:	2f62      	cmp	r7, #98	@ 0x62
 80059ce:	d80a      	bhi.n	80059e6 <_printf_i+0x32>
 80059d0:	2f00      	cmp	r7, #0
 80059d2:	f000 80d2 	beq.w	8005b7a <_printf_i+0x1c6>
 80059d6:	2f58      	cmp	r7, #88	@ 0x58
 80059d8:	f000 80b9 	beq.w	8005b4e <_printf_i+0x19a>
 80059dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059e4:	e03a      	b.n	8005a5c <_printf_i+0xa8>
 80059e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ea:	2b15      	cmp	r3, #21
 80059ec:	d8f6      	bhi.n	80059dc <_printf_i+0x28>
 80059ee:	a101      	add	r1, pc, #4	@ (adr r1, 80059f4 <_printf_i+0x40>)
 80059f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f4:	08005a4d 	.word	0x08005a4d
 80059f8:	08005a61 	.word	0x08005a61
 80059fc:	080059dd 	.word	0x080059dd
 8005a00:	080059dd 	.word	0x080059dd
 8005a04:	080059dd 	.word	0x080059dd
 8005a08:	080059dd 	.word	0x080059dd
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059dd 	.word	0x080059dd
 8005a14:	080059dd 	.word	0x080059dd
 8005a18:	080059dd 	.word	0x080059dd
 8005a1c:	080059dd 	.word	0x080059dd
 8005a20:	08005b61 	.word	0x08005b61
 8005a24:	08005a8b 	.word	0x08005a8b
 8005a28:	08005b1b 	.word	0x08005b1b
 8005a2c:	080059dd 	.word	0x080059dd
 8005a30:	080059dd 	.word	0x080059dd
 8005a34:	08005b83 	.word	0x08005b83
 8005a38:	080059dd 	.word	0x080059dd
 8005a3c:	08005a8b 	.word	0x08005a8b
 8005a40:	080059dd 	.word	0x080059dd
 8005a44:	080059dd 	.word	0x080059dd
 8005a48:	08005b23 	.word	0x08005b23
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	1d1a      	adds	r2, r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6032      	str	r2, [r6, #0]
 8005a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e09d      	b.n	8005b9c <_printf_i+0x1e8>
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1d19      	adds	r1, r3, #4
 8005a66:	6031      	str	r1, [r6, #0]
 8005a68:	0606      	lsls	r6, r0, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xbc>
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	e003      	b.n	8005a78 <_printf_i+0xc4>
 8005a70:	0645      	lsls	r5, r0, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xb8>
 8005a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	da03      	bge.n	8005a84 <_printf_i+0xd0>
 8005a7c:	232d      	movs	r3, #45	@ 0x2d
 8005a7e:	426d      	negs	r5, r5
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a84:	4859      	ldr	r0, [pc, #356]	@ (8005bec <_printf_i+0x238>)
 8005a86:	230a      	movs	r3, #10
 8005a88:	e011      	b.n	8005aae <_printf_i+0xfa>
 8005a8a:	6821      	ldr	r1, [r4, #0]
 8005a8c:	6833      	ldr	r3, [r6, #0]
 8005a8e:	0608      	lsls	r0, r1, #24
 8005a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a94:	d402      	bmi.n	8005a9c <_printf_i+0xe8>
 8005a96:	0649      	lsls	r1, r1, #25
 8005a98:	bf48      	it	mi
 8005a9a:	b2ad      	uxthmi	r5, r5
 8005a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a9e:	4853      	ldr	r0, [pc, #332]	@ (8005bec <_printf_i+0x238>)
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	bf14      	ite	ne
 8005aa4:	230a      	movne	r3, #10
 8005aa6:	2308      	moveq	r3, #8
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005aae:	6866      	ldr	r6, [r4, #4]
 8005ab0:	60a6      	str	r6, [r4, #8]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	bfa2      	ittt	ge
 8005ab6:	6821      	ldrge	r1, [r4, #0]
 8005ab8:	f021 0104 	bicge.w	r1, r1, #4
 8005abc:	6021      	strge	r1, [r4, #0]
 8005abe:	b90d      	cbnz	r5, 8005ac4 <_printf_i+0x110>
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	d04b      	beq.n	8005b5c <_printf_i+0x1a8>
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aca:	fb03 5711 	mls	r7, r3, r1, r5
 8005ace:	5dc7      	ldrb	r7, [r0, r7]
 8005ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ad4:	462f      	mov	r7, r5
 8005ad6:	42bb      	cmp	r3, r7
 8005ad8:	460d      	mov	r5, r1
 8005ada:	d9f4      	bls.n	8005ac6 <_printf_i+0x112>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d10b      	bne.n	8005af8 <_printf_i+0x144>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	07df      	lsls	r7, r3, #31
 8005ae4:	d508      	bpl.n	8005af8 <_printf_i+0x144>
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	6861      	ldr	r1, [r4, #4]
 8005aea:	4299      	cmp	r1, r3
 8005aec:	bfde      	ittt	le
 8005aee:	2330      	movle	r3, #48	@ 0x30
 8005af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005af8:	1b92      	subs	r2, r2, r6
 8005afa:	6122      	str	r2, [r4, #16]
 8005afc:	f8cd a000 	str.w	sl, [sp]
 8005b00:	464b      	mov	r3, r9
 8005b02:	aa03      	add	r2, sp, #12
 8005b04:	4621      	mov	r1, r4
 8005b06:	4640      	mov	r0, r8
 8005b08:	f7ff fee6 	bl	80058d8 <_printf_common>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d14a      	bne.n	8005ba6 <_printf_i+0x1f2>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	b004      	add	sp, #16
 8005b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	f043 0320 	orr.w	r3, r3, #32
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	4833      	ldr	r0, [pc, #204]	@ (8005bf0 <_printf_i+0x23c>)
 8005b24:	2778      	movs	r7, #120	@ 0x78
 8005b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	6831      	ldr	r1, [r6, #0]
 8005b2e:	061f      	lsls	r7, r3, #24
 8005b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b34:	d402      	bmi.n	8005b3c <_printf_i+0x188>
 8005b36:	065f      	lsls	r7, r3, #25
 8005b38:	bf48      	it	mi
 8005b3a:	b2ad      	uxthmi	r5, r5
 8005b3c:	6031      	str	r1, [r6, #0]
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	bf44      	itt	mi
 8005b42:	f043 0320 	orrmi.w	r3, r3, #32
 8005b46:	6023      	strmi	r3, [r4, #0]
 8005b48:	b11d      	cbz	r5, 8005b52 <_printf_i+0x19e>
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	e7ac      	b.n	8005aa8 <_printf_i+0xf4>
 8005b4e:	4827      	ldr	r0, [pc, #156]	@ (8005bec <_printf_i+0x238>)
 8005b50:	e7e9      	b.n	8005b26 <_printf_i+0x172>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	f023 0320 	bic.w	r3, r3, #32
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	e7f6      	b.n	8005b4a <_printf_i+0x196>
 8005b5c:	4616      	mov	r6, r2
 8005b5e:	e7bd      	b.n	8005adc <_printf_i+0x128>
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	6961      	ldr	r1, [r4, #20]
 8005b66:	1d18      	adds	r0, r3, #4
 8005b68:	6030      	str	r0, [r6, #0]
 8005b6a:	062e      	lsls	r6, r5, #24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	d501      	bpl.n	8005b74 <_printf_i+0x1c0>
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <_printf_i+0x1c6>
 8005b74:	0668      	lsls	r0, r5, #25
 8005b76:	d5fb      	bpl.n	8005b70 <_printf_i+0x1bc>
 8005b78:	8019      	strh	r1, [r3, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	4616      	mov	r6, r2
 8005b80:	e7bc      	b.n	8005afc <_printf_i+0x148>
 8005b82:	6833      	ldr	r3, [r6, #0]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	6032      	str	r2, [r6, #0]
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7fa fb26 	bl	80001e0 <memchr>
 8005b94:	b108      	cbz	r0, 8005b9a <_printf_i+0x1e6>
 8005b96:	1b80      	subs	r0, r0, r6
 8005b98:	6060      	str	r0, [r4, #4]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba4:	e7aa      	b.n	8005afc <_printf_i+0x148>
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4649      	mov	r1, r9
 8005bac:	4640      	mov	r0, r8
 8005bae:	47d0      	blx	sl
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d0ad      	beq.n	8005b10 <_printf_i+0x15c>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	079b      	lsls	r3, r3, #30
 8005bb8:	d413      	bmi.n	8005be2 <_printf_i+0x22e>
 8005bba:	68e0      	ldr	r0, [r4, #12]
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	4298      	cmp	r0, r3
 8005bc0:	bfb8      	it	lt
 8005bc2:	4618      	movlt	r0, r3
 8005bc4:	e7a6      	b.n	8005b14 <_printf_i+0x160>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d09d      	beq.n	8005b10 <_printf_i+0x15c>
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	9903      	ldr	r1, [sp, #12]
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	dcf2      	bgt.n	8005bc6 <_printf_i+0x212>
 8005be0:	e7eb      	b.n	8005bba <_printf_i+0x206>
 8005be2:	2500      	movs	r5, #0
 8005be4:	f104 0619 	add.w	r6, r4, #25
 8005be8:	e7f5      	b.n	8005bd6 <_printf_i+0x222>
 8005bea:	bf00      	nop
 8005bec:	08005de1 	.word	0x08005de1
 8005bf0:	08005df2 	.word	0x08005df2

08005bf4 <memmove>:
 8005bf4:	4288      	cmp	r0, r1
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	eb01 0402 	add.w	r4, r1, r2
 8005bfc:	d902      	bls.n	8005c04 <memmove+0x10>
 8005bfe:	4284      	cmp	r4, r0
 8005c00:	4623      	mov	r3, r4
 8005c02:	d807      	bhi.n	8005c14 <memmove+0x20>
 8005c04:	1e43      	subs	r3, r0, #1
 8005c06:	42a1      	cmp	r1, r4
 8005c08:	d008      	beq.n	8005c1c <memmove+0x28>
 8005c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c12:	e7f8      	b.n	8005c06 <memmove+0x12>
 8005c14:	4402      	add	r2, r0
 8005c16:	4601      	mov	r1, r0
 8005c18:	428a      	cmp	r2, r1
 8005c1a:	d100      	bne.n	8005c1e <memmove+0x2a>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c26:	e7f7      	b.n	8005c18 <memmove+0x24>

08005c28 <_sbrk_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	@ (8005c44 <_sbrk_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fa ff36 	bl	8000aa4 <_sbrk>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_sbrk_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_sbrk_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20004c34 	.word	0x20004c34

08005c48 <_realloc_r>:
 8005c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	4615      	mov	r5, r2
 8005c50:	460c      	mov	r4, r1
 8005c52:	b921      	cbnz	r1, 8005c5e <_realloc_r+0x16>
 8005c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	4611      	mov	r1, r2
 8005c5a:	f7ff bc59 	b.w	8005510 <_malloc_r>
 8005c5e:	b92a      	cbnz	r2, 8005c6c <_realloc_r+0x24>
 8005c60:	f7ff fbea 	bl	8005438 <_free_r>
 8005c64:	2400      	movs	r4, #0
 8005c66:	4620      	mov	r0, r4
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	f000 f81a 	bl	8005ca4 <_malloc_usable_size_r>
 8005c70:	4285      	cmp	r5, r0
 8005c72:	4606      	mov	r6, r0
 8005c74:	d802      	bhi.n	8005c7c <_realloc_r+0x34>
 8005c76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c7a:	d8f4      	bhi.n	8005c66 <_realloc_r+0x1e>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff fc46 	bl	8005510 <_malloc_r>
 8005c84:	4607      	mov	r7, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d0ec      	beq.n	8005c64 <_realloc_r+0x1c>
 8005c8a:	42b5      	cmp	r5, r6
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4621      	mov	r1, r4
 8005c90:	bf28      	it	cs
 8005c92:	4632      	movcs	r2, r6
 8005c94:	f7ff fbc2 	bl	800541c <memcpy>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fbcc 	bl	8005438 <_free_r>
 8005ca0:	463c      	mov	r4, r7
 8005ca2:	e7e0      	b.n	8005c66 <_realloc_r+0x1e>

08005ca4 <_malloc_usable_size_r>:
 8005ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca8:	1f18      	subs	r0, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfbc      	itt	lt
 8005cae:	580b      	ldrlt	r3, [r1, r0]
 8005cb0:	18c0      	addlt	r0, r0, r3
 8005cb2:	4770      	bx	lr

08005cb4 <_init>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	bf00      	nop
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr

08005cc0 <_fini>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr
