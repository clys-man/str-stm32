
9_shield_LCD_AV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000898  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000a2c  08000a2c  00001a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a80  08000a80  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000a80  08000a80  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a80  08000a80  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a80  08000a80  00001a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a84  08000a84  00001a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000a88  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000aa0  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000aa0  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016d0  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d6  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00003df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ef  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb51  00000000  00000000  0000403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000215c  00000000  00000000  00012b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000538fd  00000000  00000000  00014cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000685e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003cc  00000000  00000000  00068670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00068a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a14 	.word	0x08000a14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000a14 	.word	0x08000a14

080001d4 <GPIO_init>:
#include "stm32f4xx.h"
#include "tim.h"
#include "uart.h"

void GPIO_init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    // Habilita clock para GPIOA, GPIOB, GPIOC
    RCC->AHB1ENR |= (1U<<0) | (1U<<1) | (1U<<2);
 80001d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000298 <GPIO_init+0xc4>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000298 <GPIO_init+0xc4>)
 80001de:	f043 0307 	orr.w	r3, r3, #7
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (1U<<18);   // Pino 9 como saída - RS
 80001e4:	4b2d      	ldr	r3, [pc, #180]	@ (800029c <GPIO_init+0xc8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a2c      	ldr	r2, [pc, #176]	@ (800029c <GPIO_init+0xc8>)
 80001ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<19);
 80001f0:	4b2a      	ldr	r3, [pc, #168]	@ (800029c <GPIO_init+0xc8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a29      	ldr	r2, [pc, #164]	@ (800029c <GPIO_init+0xc8>)
 80001f6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80001fa:	6013      	str	r3, [r2, #0]

    GPIOC->MODER |= (1U<<14);   // Pino 7 como saída - EN
 80001fc:	4b28      	ldr	r3, [pc, #160]	@ (80002a0 <GPIO_init+0xcc>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a27      	ldr	r2, [pc, #156]	@ (80002a0 <GPIO_init+0xcc>)
 8000202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000206:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1U<<15);
 8000208:	4b25      	ldr	r3, [pc, #148]	@ (80002a0 <GPIO_init+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a24      	ldr	r2, [pc, #144]	@ (80002a0 <GPIO_init+0xcc>)
 800020e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000212:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<10);   // Pino 5 como saída - D4
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <GPIO_init+0xd0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a22      	ldr	r2, [pc, #136]	@ (80002a4 <GPIO_init+0xd0>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<11);
 8000220:	4b20      	ldr	r3, [pc, #128]	@ (80002a4 <GPIO_init+0xd0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1f      	ldr	r2, [pc, #124]	@ (80002a4 <GPIO_init+0xd0>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<8);    // Pino 4 como saída - D5
 800022c:	4b1d      	ldr	r3, [pc, #116]	@ (80002a4 <GPIO_init+0xd0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1c      	ldr	r2, [pc, #112]	@ (80002a4 <GPIO_init+0xd0>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000236:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<9);
 8000238:	4b1a      	ldr	r3, [pc, #104]	@ (80002a4 <GPIO_init+0xd0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <GPIO_init+0xd0>)
 800023e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000242:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<20);   // Pino 10 como saída - D6
 8000244:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <GPIO_init+0xd0>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a16      	ldr	r2, [pc, #88]	@ (80002a4 <GPIO_init+0xd0>)
 800024a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800024e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<21);
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <GPIO_init+0xd0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <GPIO_init+0xd0>)
 8000256:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800025a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<16);   // Pino 8 como saída - D7
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <GPIO_init+0xc8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0e      	ldr	r2, [pc, #56]	@ (800029c <GPIO_init+0xc8>)
 8000262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000266:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<17);
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <GPIO_init+0xc8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0b      	ldr	r2, [pc, #44]	@ (800029c <GPIO_init+0xc8>)
 800026e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000272:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<10);   // LED
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <GPIO_init+0xc8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a08      	ldr	r2, [pc, #32]	@ (800029c <GPIO_init+0xc8>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800027e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<11);
 8000280:	4b06      	ldr	r3, [pc, #24]	@ (800029c <GPIO_init+0xc8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a05      	ldr	r2, [pc, #20]	@ (800029c <GPIO_init+0xc8>)
 8000286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800028a:	6013      	str	r3, [r2, #0]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40020800 	.word	0x40020800
 80002a4:	40020400 	.word	0x40020400

080002a8 <send_to_lcd>:

void send_to_lcd(int data, int rs)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
    // rs = 1 para dados, rs=0 para comando
    if (rs == 1) {
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d106      	bne.n	80002c6 <send_to_lcd+0x1e>
        GPIOA->ODR |= (1U<<9);
 80002b8:	4b36      	ldr	r3, [pc, #216]	@ (8000394 <send_to_lcd+0xec>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a35      	ldr	r2, [pc, #212]	@ (8000394 <send_to_lcd+0xec>)
 80002be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c2:	6153      	str	r3, [r2, #20]
 80002c4:	e008      	b.n	80002d8 <send_to_lcd+0x30>
    } else if (rs == 0) {
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d105      	bne.n	80002d8 <send_to_lcd+0x30>
        GPIOA->ODR &= ~(1U<<9);
 80002cc:	4b31      	ldr	r3, [pc, #196]	@ (8000394 <send_to_lcd+0xec>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a30      	ldr	r2, [pc, #192]	@ (8000394 <send_to_lcd+0xec>)
 80002d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002d6:	6153      	str	r3, [r2, #20]
    }

    if (((data>>3)&0x01) == 1) {   // D7 pin
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f003 0308 	and.w	r3, r3, #8
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d006      	beq.n	80002f0 <send_to_lcd+0x48>
        GPIOA->ODR |= (1U<<8);
 80002e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000394 <send_to_lcd+0xec>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000394 <send_to_lcd+0xec>)
 80002e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	e005      	b.n	80002fc <send_to_lcd+0x54>
    } else {
        GPIOA->ODR &= ~(1U<<8);
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <send_to_lcd+0xec>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a27      	ldr	r2, [pc, #156]	@ (8000394 <send_to_lcd+0xec>)
 80002f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80002fa:	6153      	str	r3, [r2, #20]
    }

    if (((data>>2)&0x01) == 1) {   // D6 pin
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <send_to_lcd+0x6c>
        GPIOB->ODR |= (1U<<10);
 8000306:	4b24      	ldr	r3, [pc, #144]	@ (8000398 <send_to_lcd+0xf0>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a23      	ldr	r2, [pc, #140]	@ (8000398 <send_to_lcd+0xf0>)
 800030c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	e005      	b.n	8000320 <send_to_lcd+0x78>
    } else {
        GPIOB->ODR &= ~(1U<<10);
 8000314:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <send_to_lcd+0xf0>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a1f      	ldr	r2, [pc, #124]	@ (8000398 <send_to_lcd+0xf0>)
 800031a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800031e:	6153      	str	r3, [r2, #20]
    }

    if (((data>>1)&0x01) == 1) {   // D5 pin
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d006      	beq.n	8000338 <send_to_lcd+0x90>
        GPIOB->ODR |= (1U<<4);
 800032a:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <send_to_lcd+0xf0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a1a      	ldr	r2, [pc, #104]	@ (8000398 <send_to_lcd+0xf0>)
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	e005      	b.n	8000344 <send_to_lcd+0x9c>
    } else {
        GPIOB->ODR &= ~(1U<<4);
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <send_to_lcd+0xf0>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a16      	ldr	r2, [pc, #88]	@ (8000398 <send_to_lcd+0xf0>)
 800033e:	f023 0310 	bic.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]
    }

    if (((data>>0)&0x01) == 1) {   // D4 pin
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <send_to_lcd+0xb4>
        GPIOB->ODR |= (1U<<5);
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <send_to_lcd+0xf0>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <send_to_lcd+0xf0>)
 8000354:	f043 0320 	orr.w	r3, r3, #32
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	e005      	b.n	8000368 <send_to_lcd+0xc0>
    } else {
        GPIOB->ODR &= ~(1U<<5);
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <send_to_lcd+0xf0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <send_to_lcd+0xf0>)
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6153      	str	r3, [r2, #20]
    }

    // Habilita o enable do LCD
    GPIOC->ODR |= (1U<<7);
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <send_to_lcd+0xf4>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a0b      	ldr	r2, [pc, #44]	@ (800039c <send_to_lcd+0xf4>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000372:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 8000374:	2064      	movs	r0, #100	@ 0x64
 8000376:	f000 fa2d 	bl	80007d4 <delayLCD>

    // Desabilita o enable do LCD
    GPIOC->ODR &= ~(1U<<7);
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <send_to_lcd+0xf4>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a07      	ldr	r2, [pc, #28]	@ (800039c <send_to_lcd+0xf4>)
 8000380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000384:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 8000386:	2064      	movs	r0, #100	@ 0x64
 8000388:	f000 fa24 	bl	80007d4 <delayLCD>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40020000 	.word	0x40020000
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800

080003a0 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((cmd>>4)&0x0F);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	091b      	lsrs	r3, r3, #4
 80003ae:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);  // RS deve ser 0 enquanto enviando um comando
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff77 	bl	80002a8 <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((cmd)&0x0F);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff6e 	bl	80002a8 <send_to_lcd>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <lcd_init>:

void lcd_init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    // Inicialização no modo 4 bits
    delay_ms(50);     // Espera > 40ms
 80003d8:	2032      	movs	r0, #50	@ 0x32
 80003da:	f000 f9e2 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x30);
 80003de:	2030      	movs	r0, #48	@ 0x30
 80003e0:	f7ff ffde 	bl	80003a0 <lcd_send_cmd>
    delay_ms(5);      // Espera por > 4.1ms
 80003e4:	2005      	movs	r0, #5
 80003e6:	f000 f9dc 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x30);
 80003ea:	2030      	movs	r0, #48	@ 0x30
 80003ec:	f7ff ffd8 	bl	80003a0 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 f9d6 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x30);
 80003f6:	2030      	movs	r0, #48	@ 0x30
 80003f8:	f7ff ffd2 	bl	80003a0 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80003fc:	2001      	movs	r0, #1
 80003fe:	f000 f9d0 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x20);  // Inicialização no modo de 4 bits
 8000402:	2020      	movs	r0, #32
 8000404:	f7ff ffcc 	bl	80003a0 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 8000408:	2001      	movs	r0, #1
 800040a:	f000 f9ca 	bl	80007a2 <delay_ms>

    // Inicialização do display
    lcd_send_cmd(0x28); // Função set --- DL=0 (modo 4 bits), N=1 (2 linhas), F=0 (Fonte 5x8)
 800040e:	2028      	movs	r0, #40	@ 0x28
 8000410:	f7ff ffc6 	bl	80003a0 <lcd_send_cmd>
    delay_ms(50);
 8000414:	2032      	movs	r0, #50	@ 0x32
 8000416:	f000 f9c4 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x08); // Controle on/off do display --- D=0, C=0, B=0 --- display off
 800041a:	2008      	movs	r0, #8
 800041c:	f7ff ffc0 	bl	80003a0 <lcd_send_cmd>
    delay_ms(50);
 8000420:	2032      	movs	r0, #50	@ 0x32
 8000422:	f000 f9be 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x01); // Limpa display
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ffba 	bl	80003a0 <lcd_send_cmd>
    delay_ms(50);
 800042c:	2032      	movs	r0, #50	@ 0x32
 800042e:	f000 f9b8 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x06); // Entry mode set --- I/D=1 (incrementa cursor), S=0 (sem shift)
 8000432:	2006      	movs	r0, #6
 8000434:	f7ff ffb4 	bl	80003a0 <lcd_send_cmd>
    delay_ms(50);
 8000438:	2032      	movs	r0, #50	@ 0x32
 800043a:	f000 f9b2 	bl	80007a2 <delay_ms>
    lcd_send_cmd(0x0C); // Display on/off control --- D=1, C=0, B=0 (cursor e blink desativados)
 800043e:	200c      	movs	r0, #12
 8000440:	f7ff ffae 	bl	80003a0 <lcd_send_cmd>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((data>>4)&0x0F);
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	091b      	lsrs	r3, r3, #4
 8000456:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);  // RS deve ser 1 enquanto enviando um dado
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	2101      	movs	r1, #1
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff23 	bl	80002a8 <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((data)&0x0F);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	f003 030f 	and.w	r3, r3, #15
 8000468:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff1a 	bl	80002a8 <send_to_lcd>
}
 8000474:	bf00      	nop
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <lcd_put_cur>:
    lcd_send_cmd(0x01);
    delay_ms(100);
}

void lcd_put_cur(int row, int col)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
    switch (row)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d003      	beq.n	8000494 <lcd_put_cur+0x18>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d005      	beq.n	800049e <lcd_put_cur+0x22>
 8000492:	e009      	b.n	80004a8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;  // 0x80 = Endereço da col. na linha 1
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800049a:	603b      	str	r3, [r7, #0]
            break;
 800049c:	e004      	b.n	80004a8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;  // 0xC0 = Endereço da 2a col. na linha 1
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80004a4:	603b      	str	r3, [r7, #0]
            break;
 80004a6:	bf00      	nop
    }

    lcd_send_cmd(col);  // Posiciona o cursor no endereço a ser escrito no LCD
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff77 	bl	80003a0 <lcd_send_cmd>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <lcd_send_string>:

void lcd_send_string (char *str)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 80004c2:	e006      	b.n	80004d2 <lcd_send_string+0x18>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	607a      	str	r2, [r7, #4]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ffbb 	bl	8000448 <lcd_send_data>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1f4      	bne.n	80004c4 <lcd_send_string+0xa>
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <display_serial_char_on_lcd>:

void display_serial_char_on_lcd(char received_char) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
    lcd_put_cur(1, 7);  // Linha 2 (indexada como 1) e coluna 7
 80004ee:	2107      	movs	r1, #7
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffc3 	bl	800047c <lcd_put_cur>

    char str[2];  // Cria um array de 2 caracteres
    str[0] = received_char;  // Coloca o caractere lido
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	733b      	strb	r3, [r7, #12]
    str[1] = '\0';  // Terminador nulo
 80004fa:	2300      	movs	r3, #0
 80004fc:	737b      	strb	r3, [r7, #13]
    lcd_send_string(str);  // Exibe o caractere no LCD como uma string
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffd9 	bl	80004ba <lcd_send_string>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <keypad_init>:
#include "stm32f4xx.h"
#include "keypad.h"

uint16_t keypad_init()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);  // Habilita clock para GPIOA
 8000514:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <keypad_init+0x54>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a12      	ldr	r2, [pc, #72]	@ (8000564 <keypad_init+0x54>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1<<8);  // Habilita clock para ADC1
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <keypad_init+0x54>)
 8000522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <keypad_init+0x54>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800052a:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= 0x03;    // Configura PA0 como entrada analógica
 800052c:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <keypad_init+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <keypad_init+0x58>)
 8000532:	f043 0303 	orr.w	r3, r3, #3
 8000536:	6013      	str	r3, [r2, #0]

    ADC1->CR2 = 0;           // Dispara aquisição por software
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <keypad_init+0x5c>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;          // Seleciona o canal
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <keypad_init+0x5c>)
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1 = 4;         // Tamanho da sequência de conversão 1
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <keypad_init+0x5c>)
 8000546:	2204      	movs	r2, #4
 8000548:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->CR2 |= 1;          // Habilita ADC1
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <keypad_init+0x5c>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <keypad_init+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6093      	str	r3, [r2, #8]

    return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000
 800056c:	40012000 	.word	0x40012000

08000570 <keypad_read_key>:

// ---------------------------

uint16_t keypad_read_key()
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	uint16_t adc_readout = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	80fb      	strh	r3, [r7, #6]

    ADC1->CR2 |= (1U<<30);   // Inicia a conversão
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <keypad_read_key+0xa0>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	4a24      	ldr	r2, [pc, #144]	@ (8000610 <keypad_read_key+0xa0>)
 8000580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000584:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & 2));  // Espera o final da conversão
 8000586:	bf00      	nop
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <keypad_read_key+0xa0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0f9      	beq.n	8000588 <keypad_read_key+0x18>
    adc_readout = ADC1->DR;  // Retorna o resultado
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <keypad_read_key+0xa0>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000598:	80fb      	strh	r3, [r7, #6]

    if(adc_readout > 800 && adc_readout < 850)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80005a0:	d906      	bls.n	80005b0 <keypad_read_key+0x40>
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	f240 3251 	movw	r2, #849	@ 0x351
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d801      	bhi.n	80005b0 <keypad_read_key+0x40>
    {
        return KEY_UP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e028      	b.n	8000602 <keypad_read_key+0x92>
    }
    else if(adc_readout > 1950 && adc_readout < 2050)
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	f240 729e 	movw	r2, #1950	@ 0x79e
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d906      	bls.n	80005c8 <keypad_read_key+0x58>
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	f640 0201 	movw	r2, #2049	@ 0x801
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d801      	bhi.n	80005c8 <keypad_read_key+0x58>
    {
        return KEY_DOWN;
 80005c4:	2302      	movs	r3, #2
 80005c6:	e01c      	b.n	8000602 <keypad_read_key+0x92>
    }
    else if(adc_readout > 3000 && adc_readout < 3150)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d906      	bls.n	80005e0 <keypad_read_key+0x70>
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	f640 424d 	movw	r2, #3149	@ 0xc4d
 80005d8:	4293      	cmp	r3, r2
 80005da:	d801      	bhi.n	80005e0 <keypad_read_key+0x70>
    {
        return KEY_LEFT;
 80005dc:	2303      	movs	r3, #3
 80005de:	e010      	b.n	8000602 <keypad_read_key+0x92>
    }
    else if(adc_readout >= 0 && adc_readout < 50)
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	2b31      	cmp	r3, #49	@ 0x31
 80005e4:	d801      	bhi.n	80005ea <keypad_read_key+0x7a>
    {
        return KEY_RIGHT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e00b      	b.n	8000602 <keypad_read_key+0x92>
    }
    else if(adc_readout > 4000 && adc_readout < 5050)
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80005f0:	d906      	bls.n	8000600 <keypad_read_key+0x90>
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	f241 32b9 	movw	r2, #5049	@ 0x13b9
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d801      	bhi.n	8000600 <keypad_read_key+0x90>
    {
        return KEY_SELECT;
 80005fc:	2304      	movs	r3, #4
 80005fe:	e000      	b.n	8000602 <keypad_read_key+0x92>
    }

    return KEY_NONE;
 8000600:	2305      	movs	r3, #5
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40012000 	.word	0x40012000

08000614 <main>:

int row = 0;
int col = 0;

int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    uint16_t key_val = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	807b      	strh	r3, [r7, #2]
    static char* key_name[] = {"RIGHT", "UP  ", "DOWN", "LEFT", "SELECT", "NONE   "};


    GPIO_init();
 800061e:	f7ff fdd9 	bl	80001d4 <GPIO_init>
    tim2_init();
 8000622:	f000 f861 	bl	80006e8 <tim2_init>

    keypad_init();
 8000626:	f7ff ff73 	bl	8000510 <keypad_init>

    lcd_init();
 800062a:	f7ff fed3 	bl	80003d4 <lcd_init>
    uart2_rxtx_init();  // Inicializa UART para leitura e escrita
 800062e:	f000 f905 	bl	800083c <uart2_rxtx_init>

    // Mensagem de inicialização no LCD
    lcd_put_cur(0, 0);
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff21 	bl	800047c <lcd_put_cur>
    lcd_send_string("SIST. TEMPO REAL");
 800063a:	481d      	ldr	r0, [pc, #116]	@ (80006b0 <main+0x9c>)
 800063c:	f7ff ff3d 	bl	80004ba <lcd_send_string>

    lcd_put_cur(1, 0);
 8000640:	2100      	movs	r1, #0
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ff1a 	bl	800047c <lcd_put_cur>
    lcd_send_string("* U N I F O R *");
 8000648:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <main+0xa0>)
 800064a:	f7ff ff36 	bl	80004ba <lcd_send_string>
    delay(3000);
 800064e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000652:	f000 f86d 	bl	8000730 <delay>



    int bounce = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]

    while (1)
    {
        // Leitura da tecla
        key_val = keypad_read_key();
 800065a:	f7ff ff89 	bl	8000570 <keypad_read_key>
 800065e:	4603      	mov	r3, r0
 8000660:	807b      	strh	r3, [r7, #2]

        if ((key_val == 4) & (bounce == 0))
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	2b04      	cmp	r3, #4
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2da      	uxtb	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf0c      	ite	eq
 8000674:	2301      	moveq	r3, #1
 8000676:	2300      	movne	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4013      	ands	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d003      	beq.n	800068a <main+0x76>
        {
            bounce++;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e7e7      	b.n	800065a <main+0x46>
        }
        else
        {
            lcd_put_cur(1, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fef5 	bl	800047c <lcd_put_cur>
            lcd_send_string(key_name[key_val]);
 8000692:	887b      	ldrh	r3, [r7, #2]
 8000694:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <main+0xa4>)
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff0d 	bl	80004ba <lcd_send_string>
            delay(300);
 80006a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006a4:	f000 f844 	bl	8000730 <delay>
            bounce = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
        key_val = keypad_read_key();
 80006ac:	e7d5      	b.n	800065a <main+0x46>
 80006ae:	bf00      	nop
 80006b0:	08000a2c 	.word	0x08000a2c
 80006b4:	08000a40 	.word	0x08000a40
 80006b8:	20000000 	.word	0x20000000

080006bc <USART2_IRQHandler>:


    }
}

void USART2_IRQHandler(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
    if (USART2->SR & SR_RXNE) { // Verifica se o buffer de recepção não está vazio
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <USART2_IRQHandler+0x28>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <USART2_IRQHandler+0x20>
        char received_char = (char)(USART2->DR & 0xFF); // Lê o dado
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <USART2_IRQHandler+0x28>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	71fb      	strb	r3, [r7, #7]
        display_serial_char_on_lcd(received_char); // Exibe no LCD
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff04 	bl	80004e4 <display_serial_char_on_lcd>
    }
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400

080006e8 <tim2_init>:
#define TIM2EN (1U<<0)
#define CR1_CEN (1U<<0)
#define SR_UIF (1U<<0)

void tim2_init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
    /* Habilita o clock para acesso ao timer2 */
    RCC->APB1ENR |= TIM2EN;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <tim2_init+0x44>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <tim2_init+0x44>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Configura o valor do prescaler */
    TIM2->PSC = 16;  // 16.000.000 / 16 = 1.000.000
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006fc:	2210      	movs	r2, #16
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Configura o valor de recarga automática (auto-reload) */
    TIM2->ARR = 1000;  // 1.000.000 / 1000 = 1000
 8000700:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Limpa o contador */
    TIM2->CNT = 0;
 800070a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Desabilita o timer */
    TIM2->CR1 &= ~CR1_CEN;
 8000712:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6013      	str	r3, [r2, #0]
    /* Habilita a interrupção do TIM2 */
    // TIM2->DIER = DIER_UIE;

    /* Habilita a interrupção do controlador para o TIM2 */
    // NVIC_EnableIRQ(TIM2_IRQn);
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <delay>:

void delay(uint16_t ms)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
    /* Habilita o timer */
    TIM2->CR1 |= CR1_CEN;
 800073a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800074a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24

    for (int i = 0; i < ms; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e012      	b.n	800077e <delay+0x4e>
        /* Espera pelo flag UIF - Estouro do timer */
        while (!(TIM2->SR & SR_UIF)) {}
 8000758:	bf00      	nop
 800075a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0f8      	beq.n	800075a <delay+0x2a>

        /* Limpa o flag UIF */
        TIM2->SR &= ~SR_UIF;
 8000768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	6113      	str	r3, [r2, #16]
    for (int i = 0; i < ms; i++) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbe8      	blt.n	8000758 <delay+0x28>
    }

    TIM2->CR1 &= ~CR1_CEN;
 8000786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <delay_ms>:

// Delay de aprox. 1ms
void delay_ms(uint16_t us)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 50 * us; i++) {}
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e002      	b.n	80007b8 <delay_ms+0x16>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	2232      	movs	r2, #50	@ 0x32
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbf5      	blt.n	80007b2 <delay_ms+0x10>
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <delayLCD>:

// Delay de aprox. 20us
void delayLCD(uint16_t us)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < us; i++) {}
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e002      	b.n	80007ea <delayLCD+0x16>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbf8      	blt.n	80007e4 <delayLCD+0x10>
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4907      	ldr	r1, [pc, #28]	@ (8000838 <__NVIC_EnableIRQ+0x38>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100

0800083c <uart2_rxtx_init>:
int __io_putchar(int ch){
    uart2_write(ch);
    return ch;
}

void uart2_rxtx_init(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

    RCC -> AHB1ENR |= GPIOAEN;
 8000840:	4b36      	ldr	r3, [pc, #216]	@ (800091c <uart2_rxtx_init+0xe0>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a35      	ldr	r2, [pc, #212]	@ (800091c <uart2_rxtx_init+0xe0>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30


    GPIOA->MODER &=~(1U<<4);
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a33      	ldr	r2, [pc, #204]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000852:	f023 0310 	bic.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U<<5);
 8000858:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a30      	ldr	r2, [pc, #192]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6013      	str	r3, [r2, #0]


    GPIOA->AFR[0] |= (1U<<8);
 8000864:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	4a2d      	ldr	r2, [pc, #180]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800086e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<9);
 8000870:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800087a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<10);
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	4a27      	ldr	r2, [pc, #156]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000886:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &=~(1U<<11);
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800088a:	6a1b      	ldr	r3, [r3, #32]
 800088c:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800088e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000892:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~(1U<<6);
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <uart2_rxtx_init+0xe4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <uart2_rxtx_init+0xe4>)
 800089a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800089e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U<<7);
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008aa:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] |= (1U<<12);
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<13);
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008c2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<14);
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4a15      	ldr	r2, [pc, #84]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<15);
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <uart2_rxtx_init+0xe4>)
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008da:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= UART2EN;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <uart2_rxtx_init+0xe0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <uart2_rxtx_init+0xe0>)
 80008e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40

    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80008e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ec:	490d      	ldr	r1, [pc, #52]	@ (8000924 <uart2_rxtx_init+0xe8>)
 80008ee:	480e      	ldr	r0, [pc, #56]	@ (8000928 <uart2_rxtx_init+0xec>)
 80008f0:	f000 f81c 	bl	800092c <uart_set_baudrate>

    USART2->CR1 = (CR1_TE| CR1_RE);
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <uart2_rxtx_init+0xec>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	60da      	str	r2, [r3, #12]

    USART2->CR1 |= (1U<<5);
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <uart2_rxtx_init+0xec>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <uart2_rxtx_init+0xec>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(USART2_IRQn);
 8000906:	2026      	movs	r0, #38	@ 0x26
 8000908:	f7ff ff7a 	bl	8000800 <__NVIC_EnableIRQ>

    USART2->CR1 |= CR1_UE;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <uart2_rxtx_init+0xec>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <uart2_rxtx_init+0xec>)
 8000912:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	00f42400 	.word	0x00f42400
 8000928:	40004400 	.word	0x40004400

0800092c <uart_set_baudrate>:
    while(!(USART2->SR & SR_TXE)){}

    USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	f000 f808 	bl	8000950 <compute_uart_bd>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	609a      	str	r2, [r3, #8]
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	085a      	lsrs	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	441a      	add	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	b29b      	uxth	r3, r3
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	@ (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f000 f811 	bl	80009cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fe33 	bl	8000614 <main>

080009ae <LoopForever>:

LoopForever:
  b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80009bc:	08000a88 	.word	0x08000a88
  ldr r2, =_sbss
 80009c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80009c4:	20000034 	.word	0x20000034

080009c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <__libc_init_array>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000a04 <__libc_init_array+0x38>)
 80009d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000a08 <__libc_init_array+0x3c>)
 80009d2:	1b64      	subs	r4, r4, r5
 80009d4:	10a4      	asrs	r4, r4, #2
 80009d6:	2600      	movs	r6, #0
 80009d8:	42a6      	cmp	r6, r4
 80009da:	d109      	bne.n	80009f0 <__libc_init_array+0x24>
 80009dc:	4d0b      	ldr	r5, [pc, #44]	@ (8000a0c <__libc_init_array+0x40>)
 80009de:	4c0c      	ldr	r4, [pc, #48]	@ (8000a10 <__libc_init_array+0x44>)
 80009e0:	f000 f818 	bl	8000a14 <_init>
 80009e4:	1b64      	subs	r4, r4, r5
 80009e6:	10a4      	asrs	r4, r4, #2
 80009e8:	2600      	movs	r6, #0
 80009ea:	42a6      	cmp	r6, r4
 80009ec:	d105      	bne.n	80009fa <__libc_init_array+0x2e>
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	3601      	adds	r6, #1
 80009f8:	e7ee      	b.n	80009d8 <__libc_init_array+0xc>
 80009fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fe:	4798      	blx	r3
 8000a00:	3601      	adds	r6, #1
 8000a02:	e7f2      	b.n	80009ea <__libc_init_array+0x1e>
 8000a04:	08000a80 	.word	0x08000a80
 8000a08:	08000a80 	.word	0x08000a80
 8000a0c:	08000a80 	.word	0x08000a80
 8000a10:	08000a84 	.word	0x08000a84

08000a14 <_init>:
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	bf00      	nop
 8000a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1a:	bc08      	pop	{r3}
 8000a1c:	469e      	mov	lr, r3
 8000a1e:	4770      	bx	lr

08000a20 <_fini>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	bf00      	nop
 8000a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a26:	bc08      	pop	{r3}
 8000a28:	469e      	mov	lr, r3
 8000a2a:	4770      	bx	lr
